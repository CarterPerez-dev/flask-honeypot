This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: templates-LAGACY
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
examples/
  full_deployment/
    Dockerfile.backend
    Dockerfile.frontend
  custom_config.py
  simple_honeypot.py
  with_existing_app.py
honeypot/
  backend/
    middleware/
      csrf_protection.py
    routes/
      honeypot_pages.py
      honeypot_routes.py
      honeypot.py
    templates/
      honeypot/
        admin-login.html
        database-dashboard.html
        devops-dashboard.html
        ecommerce-dashboard.html
        framework-dashboard.html
        generic-login.html
      redirection/
        step1.html
        step10.html
        step11.html
        step12.html
        step13.html
        step14.html
        step15.html
        step2.html
        step3.html
        step4.html
        step5.html
        step6.html
        step7.html
        step8.html
        step9.html
    __init__.py
    app.py
  config/
    settings.py
  database/
    models.py
    mongodb.py
  frontend/
    public/
      index.html
      manifest.json
      robots.txt
      site.webmanifest
    src/
      components/
        csrfHelper.js
      App.js
      index.css
      index.js
      reportWebVitals.js
    .gitignore
    package.json
    README.md
  __init__.py
.gitignore
combined_context.txt
LICENSE
MANIFEST.in
pyproject.toml
README.md
setup.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="combined_context.txt">
Need to install the following packages:
repomix@0.3.3
Ok to proceed? (y) 

ðŸ“¦ Repomix v0.3.3

No custom config found at repomix.config.json or global config at /home/yoshi/.config/repomix/repomix.config.json.
You can add a config file for additional settings. Please check https://github.com/yamadashy/repomix for more information.
â ™ Collecting files...
[2K[1A[2K[Gâ ¹ Collecting files...
[2K[1A[2K[Gâ ¸ Collect file... (17/96) honeypot/backend/routes/honeypot.py
[2K[1A[2K[Gâ ¼ Collect file... (21/96) honeypot/backend/templates/honeypot/cms-dashboard.html
[2K[1A[2K[Gâ ´ Collect file... (25/96) honeypot/backend/templates/honeypot/devops-dashboard.h
tml
[2K[1A[2K[1A[2K[Gâ ¦ Collect file... (30/96) honeypot/backend/templates/honeypot/generic-login.html
[2K[1A[2K[Gâ § Collect file... (34/96) honeypot/backend/templates/honeypot/mobile-api.html
[2K[1A[2K[Gâ ‡ Collect file... (37/96) honeypot/backend/templates/honeypot/remote-access-dash
board.html
</file>

<file path="examples/full_deployment/Dockerfile.backend">
FROM python:3.11-slim

WORKDIR /app

# Install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libffi-dev \
    gcc \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Install honeypot-framework and dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Expose port
EXPOSE 5000

# Run with Gunicorn
CMD ["gunicorn", "-k", "gevent", "-w", "4", "--bind", "0.0.0.0:5000", "app:app"]
</file>

<file path="examples/full_deployment/Dockerfile.frontend">
FROM python:3.11-slim

WORKDIR /app

# Install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libffi-dev \
    gcc \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Install honeypot-framework and dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Expose port
EXPOSE 5000

# Run with Gunicorn
CMD ["gunicorn", "-k", "gevent", "-w", "4", "--bind", "0.0.0.0:5000", "app:app"]
</file>

<file path="examples/custom_config.py">
# examples/custom_config.py
from honeypot import create_honeypot_app
import os

# Set environment variables
os.environ["REDIS_HOST"] = "my-redis-server"
os.environ["MONGO_URI"] = "mongodb://user:password@my-mongo-server:27017/honeypot"

# Create a honeypot app with custom configuration
app = create_honeypot_app({
    "HONEYPOT_RATE_LIMIT": 10,
    "HONEYPOT_RATE_PERIOD": 30,
    "SECRET_KEY": "my-secure-key-for-production"
})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
</file>

<file path="examples/simple_honeypot.py">
# examples/simple_honeypot.py
from honeypot import create_honeypot_app

# Create a default honeypot app
app = create_honeypot_app()

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
</file>

<file path="examples/with_existing_app.py">
# examples/with_existing_app.py
from flask import Flask
from honeypot import create_honeypot_app
from werkzeug.middleware.dispatcher import DispatcherMiddleware
from werkzeug.serving import run_simple

# Create your main application
main_app = Flask(__name__)

@main_app.route('/')
def home():
    return 'Main application home page'

# Create the honeypot app
honeypot_app = create_honeypot_app()

# Combine the applications
application = DispatcherMiddleware(main_app, {
    '/security': honeypot_app
})

if __name__ == "__main__":
    run_simple('localhost', 5000, application, use_reloader=True)
</file>

<file path="honeypot/backend/middleware/csrf_protection.py">
# honeypot/backend/middleware/csrf_protection.py
import secrets
from flask import request, session, jsonify, abort
from functools import wraps

def generate_csrf_token():
    """Generate a secure CSRF token and store it in the session"""
    if 'csrf_token' not in session:
        session['csrf_token'] = secrets.token_hex(32)
    return session['csrf_token']

def csrf_protect(admin_only=True):
    """
    CSRF protection middleware for admin routes.
    
    Args:
        admin_only (bool): Whether to only check for CSRF on admin routes
        
    Returns:
        function: Decorated route function
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if request.method in ['POST', 'PUT', 'DELETE', 'PATCH']:
                if not admin_only or request.path.startswith('/cracked'):
                    token = request.headers.get('X-CSRF-TOKEN')
                    session_token = session.get('csrf_token')
                    
                    if not token or not session_token or token != session_token:
                        return jsonify({"error": "CSRF token validation failed"}), 403
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator
</file>

<file path="honeypot/backend/templates/honeypot/admin-login.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Login</title>
    <style>
        /* Base Styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: #333;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .login-container {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
            padding: 30px;
        }
        .logo {
            text-align: center;
            margin-bottom: 30px;
        }
        .logo i {
            font-size: 48px;
            color: #3498db;
        }
        .company-name {
            font-size: 24px;
            font-weight: 600;
            margin-top: 10px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        .form-group input:focus {
            border-color: #3498db;
            outline: none;
        }
        .form-group input.error {
            border-color: #e74c3c;
        }
        .error-message {
            color: #e74c3c;
            font-size: 12px;
            margin-top: 5px;
            display: none;
        }
        .login-button {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .login-button:hover {
            background-color: #2980b9;
        }
        .login-options {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
            font-size: 14px;
        }
        .login-options a {
            color: #3498db;
            text-decoration: none;
        }
        .login-options a:hover {
            text-decoration: underline;
        }
        .captcha-container {
            margin: 20px 0;
            display: none;
        }
        .captcha-image {
            width: 100%;
            height: 80px;
            background-color: #f3f3f3;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-family: 'Courier New', monospace;
            position: relative;
            overflow: hidden;
            margin-bottom: 10px;
        }
        .captcha-image::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: repeating-linear-gradient(
                45deg,
                rgba(0,0,0,0.05),
                rgba(0,0,0,0.05) 10px,
                rgba(0,0,0,0.02) 10px,
                rgba(0,0,0,0.02) 20px
            );
        }
        .captcha-image::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><line x1="0" y1="0" x2="100" y2="100" stroke="rgba(0,0,0,0.1)" stroke-width="1"/><line x1="100" y1="0" x2="0" y2="100" stroke="rgba(0,0,0,0.1)" stroke-width="1"/></svg>');
            background-size: 20px 20px;
        }
        .captcha-input input {
            width: 70%;
        }
        .captcha-refresh {
            display: inline-block;
            width: 25%;
            padding: 10px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: center;
            cursor: pointer;
            margin-left: 5%;
        }
        .hidden {
            display: none;
        }
        .loading {
            display: none;
            text-align: center;
            margin-top: 20px;
        }
        .loading-spinner {
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid rgba(0,0,0,0.1);
            border-radius: 50%;
            border-top-color: #3498db;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .loading-text {
            margin-top: 10px;
            font-size: 14px;
            color: #666;
        }
        .sql-message {
            background-color: #f8d7da;
            color: #721c24;
            padding: 10px;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            margin: 15px 0;
            display: none;
        }
        .connection-status {
            text-align: center;
            font-size: 12px;
            color: #666;
            margin-top: 20px;
        }
        .connection-status i {
            color: #2ecc71;
            margin-right: 5px;
        }
        .lockout-message {
            display: none;
            background-color: #d4edda;
            color: #155724;
            padding: 10px;
            border: 1px solid #c3e6cb;
            border-radius: 4px;
            margin: 15px 0;
            text-align: center;
        }
        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 400px;
            position: relative;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 24px;
            cursor: pointer;
        }
        .progress {
            height: 20px;
            background-color: #f3f3f3;
            border-radius: 10px;
            margin-top: 15px;
            overflow: hidden;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            background-color: #3498db;
            width: 0;
            transition: width 0.5s ease;
        }
        .progress-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            line-height: 20px;
            text-align: center;
            color: #666;
            font-size: 12px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="login-container">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            <div class="company-name">AdminControl</div>
            <div style="font-size: 14px; color: #777;">Secure Administration Panel</div>
        </div>
        
        <form id="login-form" onsubmit="return processLogin(event);">
            <div class="form-group">
                <label for="username">Username or Email</label>
                <input type="text" id="username" name="username" required>
                <div class="error-message" id="username-error">Invalid username format</div>
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
                <div class="error-message" id="password-error">Password must be at least 8 characters</div>
            </div>
            
            <div class="sql-message" id="sql-message">
                Warning: SQL syntax detected. SQL injection attempts are monitored and logged.
            </div>
            
            <div class="captcha-container" id="captcha-container">
                <label>Please verify you're not a robot</label>
                <div class="captcha-image" id="captcha-image">
                    <span id="captcha-text">AB12CD</span>
                </div>
                <div class="captcha-input">
                    <input type="text" id="captcha" name="captcha" placeholder="Enter the code above" required>
                    <button type="button" class="captcha-refresh" onclick="refreshCaptcha();">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div class="error-message" id="captcha-error">Incorrect CAPTCHA code</div>
            </div>
            
            <button type="submit" class="login-button" id="login-button">Log In</button>
            
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
                <div class="loading-text" id="loading-text">Authenticating...</div>
            </div>
            
            <div class="lockout-message" id="lockout-message">
                Your account has been temporarily locked due to multiple failed login attempts.
                <div style="margin-top: 10px;">Please try again in <span id="lockout-timer">30</span> seconds.</div>
            </div>
            
            <div class="login-options">
                <a href="#" onclick="return showResetPassword();">Forgot Password?</a>
                <a href="#" onclick="return showTwoFactor();">Use Two-Factor Authentication</a>
            </div>
            
            <div class="connection-status">
                <i class="fas fa-lock"></i> Secure Connection
            </div>
        </form>
    </div>
    
    <!-- Reset Password Modal -->
    <div id="reset-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('reset-modal');">&times;</span>
            <h2>Reset Password</h2>
            <p>Enter your email address to receive password reset instructions.</p>
            <div class="form-group">
                <label for="reset-email">Email Address</label>
                <input type="email" id="reset-email" name="reset-email" required>
            </div>
            <button type="button" class="login-button" onclick="resetPassword();">Send Reset Instructions</button>
            <div id="reset-progress" class="hidden">
                <div class="progress">
                    <div class="progress-bar" id="reset-progress-bar"></div>
                    <div class="progress-text" id="reset-progress-text">Sending email...</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Two-Factor Auth Modal -->
    <div id="twofa-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('twofa-modal');">&times;</span>
            <h2>Two-Factor Authentication</h2>
            <p>Enter your username first to receive a verification code.</p>
            <div class="form-group">
                <label for="twofa-username">Username</label>
                <input type="text" id="twofa-username" name="twofa-username" required>
            </div>
            <div class="form-group hidden" id="twofa-code-container">
                <label for="twofa-code">Verification Code</label>
                <input type="text" id="twofa-code" name="twofa-code" required placeholder="6-digit code">
            </div>
            <button type="button" class="login-button" id="twofa-button" onclick="sendTwoFactorCode();">Send Code</button>
            <div id="twofa-progress" class="hidden">
                <div class="progress">
                    <div class="progress-bar" id="twofa-progress-bar"></div>
                    <div class="progress-text" id="twofa-progress-text">Sending code...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Track failed login attempts
        let failedAttempts = 0;
        let redirects = 0;
        let lockoutTimer = null;
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Sometimes randomly show CAPTCHA on page load
            if (Math.random() < 0.3) {
                document.getElementById('captcha-container').style.display = 'block';
                refreshCaptcha();
            }
            
            // Track form interactions
            const form = document.getElementById('login-form');
            const formElements = form.elements;
            
            for (let i = 0; i < formElements.length; i++) {
                if (formElements[i].type !== 'submit') {
                    formElements[i].addEventListener('input', function() {
                        logInteraction('form_input', { field: this.name });
                    });
                    
                    formElements[i].addEventListener('blur', function() {
                        logInteraction('form_blur', { field: this.name });
                        
                        // Check for SQL injection on blur
                        if (this.name === 'username' || this.name === 'password') {
                            checkForSQLInjection(this.value);
                        }
                    });
                }
            }
            
            // Log page view
            logInteraction('page_view');
        });
        
        // Process login (capture credentials and always fail)
        function processLogin(event) {
            event.preventDefault();
            
            // Get form values
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            // Log the credentials
            logInteraction('login_attempt', { 
                username: username,
                password: password
            });
            
            // Check for SQL injection again
            if (checkForSQLInjection(username) || checkForSQLInjection(password)) {
                // Already handled in the check function
                return false;
            }
            
            // Show loading indicator
            document.getElementById('login-button').disabled = true;
            document.getElementById('loading').style.display = 'block';
            
            // Different failure scenarios based on attempt count
            failedAttempts++;
            
            // Simulate processing delay
            setTimeout(() => {
                document.getElementById('loading').style.display = 'none';
                
                if (failedAttempts === 1) {
                    // First attempt - invalid credentials
                    document.getElementById('password-error').textContent = 'Invalid username or password';
                    document.getElementById('password-error').style.display = 'block';
                } 
                else if (failedAttempts === 2) {
                    // Second attempt - Show CAPTCHA
                    document.getElementById('password-error').style.display = 'none';
                    document.getElementById('captcha-container').style.display = 'block';
                    refreshCaptcha();
                    alert("Invalid credentials. Please complete the CAPTCHA to continue.");
                }
                else if (failedAttempts >= 3 && failedAttempts < 5) {
                    // Third attempt - CAPTCHA failed
                    document.getElementById('captcha-error').style.display = 'block';
                    refreshCaptcha();
                } 
                else if (failedAttempts >= 5) {
                    // Fifth attempt - Account lockout
                    document.getElementById('captcha-container').style.display = 'none';
                    document.getElementById('login-form').classList.add('hidden');
                    document.getElementById('lockout-message').style.display = 'block';
                    
                    // Start lockout timer
                    let timeLeft = 30;
                    document.getElementById('lockout-timer').textContent = timeLeft;
                    
                    lockoutTimer = setInterval(() => {
                        timeLeft--;
                        document.getElementById('lockout-timer').textContent = timeLeft;
                        
                        if (timeLeft <= 0) {
                            clearInterval(lockoutTimer);
                            // Reset to first failure state
                            failedAttempts = 1;
                            document.getElementById('lockout-message').style.display = 'none';
                            document.getElementById('login-form').classList.remove('hidden');
                            document.getElementById('password-error').textContent = 'Invalid username or password';
                            document.getElementById('password-error').style.display = 'block';
                        }
                    }, 1000);
                    
                    logInteraction('account_lockout', { attempts: failedAttempts });
                }
                
                document.getElementById('login-button').disabled = false;
                
                // Special case: If username/password look like SQL injection attempts, redirect to fake SQL error page
                if (username.toLowerCase().includes(" union select") || 
                    username.toLowerCase().includes("' or '1'='1") ||
                    password.toLowerCase().includes(" union select") ||
                    password.toLowerCase().includes("' or '1'='1")) {
                    
                    if (redirects === 0) {
                        redirects++;
                        fakeSystemAccess("SQL Injection detected in your input. Redirecting to security dashboard...");
                    }
                }
                
                // Special case: On 4th attempt, sometimes fake a successful login
                if (failedAttempts === 4 && Math.random() < 0.3) {
                    fakeSystemAccess("Login successful! Redirecting to dashboard...");
                }
                
            }, 2000 + Math.random() * 1000);
            
            return false;
        }
        
        // Check for SQL injection attempts
        function checkForSQLInjection(input) {
            // Common SQL injection patterns
            const sqlPatterns = [
                "'",
                "\"",
                ";",
                "--",
                "/*",
                "*/",
                "=",
                "OR",
                "AND",
                "SELECT",
                "INSERT",
                "UPDATE",
                "DELETE",
                "DROP",
                "UNION",
                "1=1",
                "admin'--",
                "' OR '1'='1"
            ];
            
            // Convert to lowercase for case-insensitive matching
            const lowerInput = input.toLowerCase();
            
            // Check for SQL patterns
            for (const pattern of sqlPatterns) {
                if (lowerInput.includes(pattern.toLowerCase())) {
                    // Show SQL warning
                    document.getElementById('sql-message').style.display = 'block';
                    
                    // Log the SQL injection attempt
                    logInteraction('sql_injection_attempt', { 
                        input: input,
                        matched_pattern: pattern
                    });
                    
                    return true;
                }
            }
            
            // No SQL injection detected
            document.getElementById('sql-message').style.display = 'none';
            return false;
        }
        
        // Refresh the CAPTCHA with a new code
        function refreshCaptcha() {
            const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            let captcha = "";
            
            // Generate random 6-character captcha
            for (let i = 0; i < 6; i++) {
                captcha += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            
            document.getElementById('captcha-text').textContent = captcha;
            document.getElementById('captcha').value = '';
            document.getElementById('captcha-error').style.display = 'none';
            
            // Log the interaction
            logInteraction('captcha_refreshed', { new_captcha: captcha });
        }
        
        // Show reset password modal
        function showResetPassword() {
            document.getElementById('reset-modal').style.display = 'block';
            document.getElementById('reset-email').focus();
            
            // Log the interaction
            logInteraction('reset_password_requested');
            
            return false;
        }
        
        // Show two-factor auth modal
        function showTwoFactor() {
            document.getElementById('twofa-modal').style.display = 'block';
            document.getElementById('twofa-username').focus();
            
            // Log the interaction
            logInteraction('twofa_requested');
            
            return false;
        }
        
        // Close modal
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            
            // Reset progress
            const progressBar = document.getElementById(`${modalId.split('-')[0]}-progress-bar`);
            if (progressBar) {
                progressBar.style.width = '0%';
            }
            
            // Reset two-factor UI
            if (modalId === 'twofa-modal') {
                document.getElementById('twofa-code-container').classList.add('hidden');
                document.getElementById('twofa-button').textContent = 'Send Code';
                document.getElementById('twofa-button').onclick = sendTwoFactorCode;
            }
            
            // Log the interaction
            logInteraction('modal_closed', { modal: modalId });
        }
        
        // Process reset password request (never completes)
        function resetPassword() {
            const email = document.getElementById('reset-email').value;
            
            if (!email) {
                alert("Please enter your email address.");
                return;
            }
            
            // Log the interaction with the email
            logInteraction('reset_password_submitted', { email: email });
            
            // Show progress
            document.getElementById('reset-progress').classList.remove('hidden');
            let progress = 0;
            
            // Update progress that never reaches 100%
            const interval = setInterval(() => {
                progress += Math.random() * 5;
                if (progress >= 99) {
                    progress = 99; // Never complete
                    document.getElementById('reset-progress-text').textContent = "Almost done...";
                } else if (progress >= 75) {
                    document.getElementById('reset-progress-text').textContent = "Generating security token...";
                } else if (progress >= 50) {
                    document.getElementById('reset-progress-text').textContent = "Verifying account details...";
                } else if (progress >= 25) {
                    document.getElementById('reset-progress-text').textContent = "Connecting to server...";
                }
                
                document.getElementById('reset-progress-bar').style.width = `${progress}%`;
                
                // After a while, add an error message and stop
                if (progress >= 85 && Math.random() < 0.1) {
                    clearInterval(interval);
                    document.getElementById('reset-progress-text').textContent = "Error connecting to mail server";
                    logInteraction('reset_password_error', { progress: progress.toFixed(1) });
                }
            }, 500);
        }
        
        // Process two-factor auth request (never completes)
        function sendTwoFactorCode() {
            const username = document.getElementById('twofa-username').value;
            
            if (!username) {
                alert("Please enter your username.");
                return;
            }
            
            // Log the interaction with the username
            logInteraction('twofa_code_requested', { username: username });
            
            // Show progress
            document.getElementById('twofa-progress').classList.remove('hidden');
            let progress = 0;
            
            // Update progress that reaches 100% then shows code input
            const interval = setInterval(() => {
                progress += Math.random() * 10;
                if (progress >= 100) {
                    clearInterval(interval);
                    document.getElementById('twofa-progress').classList.add('hidden');
                    document.getElementById('twofa-code-container').classList.remove('hidden');
                    document.getElementById('twofa-button').textContent = 'Verify Code';
                    document.getElementById('twofa-button').onclick = verifyTwoFactorCode;
                    
                    logInteraction('twofa_code_sent', { username: username });
                } else if (progress >= 75) {
                    document.getElementById('twofa-progress-text').textContent = "Sending SMS code...";
                } else if (progress >= 50) {
                    document.getElementById('twofa-progress-text').textContent = "Generating secure code...";
                } else if (progress >= 25) {
                    document.getElementById('twofa-progress-text').textContent = "Verifying account...";
                }
                
                document.getElementById('twofa-progress-bar').style.width = `${progress}%`;
            }, 500);
        }
        
        // Verify two-factor auth code (always fails)
        function verifyTwoFactorCode() {
            const code = document.getElementById('twofa-code').value;
            
            if (!code) {
                alert("Please enter the verification code.");
                return;
            }
            
            // Log the interaction with the code
            logInteraction('twofa_code_verification', { code: code });
            
            // Show progress
            document.getElementById('twofa-progress').classList.remove('hidden');
            document.getElementById('twofa-progress-text').textContent = "Verifying code...";
            let progress = 0;
            
            // Update progress that reaches about 50% then fails
            const interval = setInterval(() => {
                progress += Math.random() * 10;
                
                if (progress >= 50) {
                    clearInterval(interval);
                    document.getElementById('twofa-progress').classList.add('hidden');
                    alert("Invalid verification code. Please try again.");
                    
                    logInteraction('twofa_code_invalid', { code: code });
                }
                
                document.getElementById('twofa-progress-bar').style.width = `${progress}%`;
            }, 500);
        }
        
        // Pretend to allow access to system
        function fakeSystemAccess(message) {
            // Show loading with custom message
            document.getElementById('login-button').disabled = true;
            document.getElementById('loading').style.display = 'block';
            document.getElementById('loading-text').textContent = message;
            
            // Log the interaction
            logInteraction('fake_success');
            
            // Redirect to admin panel after delay
            setTimeout(() => {
                window.location.href = "/system/verify";
            }, 3000);
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, additionalData = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'admin_login',
                    interaction_type: interactionType,
                    additional_data: {
                        ...additionalData,
                        browser_info: {
                            userAgent: navigator.userAgent,
                            language: navigator.language,
                            platform: navigator.platform,
                            screenSize: `${window.screen.width}x${window.screen.height}`
                        },
                        timestamp: new Date().toISOString()
                    }
                })
            }).catch(error => {
                console.log('Logging failed, but this is expected and safe to ignore');
            });
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/honeypot/database-dashboard.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Management System</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f3f7fa;
            color: #333;
        }
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        .sidebar {
            width: 250px;
            background-color: #110138;
            color: #ecf0f1;
            padding: 20px 0;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        .content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        .header {
            background-color: #fff;
            padding: 15px 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logo {
            font-size: 20px;
            font-weight: 600;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            margin-bottom: 20px;
        }
        h2 {
            margin-top: 0;
            color: #2c3e50;
            font-size: 18px;
        }
        .btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: #0288d1;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
        }
        .btn:hover {
            background-color: #0277bd;
        }
        .btn-danger {
            background-color: #e53935;
        }
        .btn-danger:hover {
            background-color: #d32f2f;
        }
        .btn-success {
            background-color: #388e3c;
        }
        .btn-success:hover {
            background-color: #2e7d32;
        }
        .menu-item {
            padding: 12px 25px;
            display: block;
            color: #ecf0f1;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        .menu-item:hover, .menu-item.active {
            background-color: #37474f;
        }
        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table th, table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        table th {
            background-color: #f1f8fe;
            font-weight: 600;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
        }
        .stat-card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        .stat-value {
            font-size: 24px;
            font-weight: 600;
            margin: 10px 0;
        }
        .terminal {
            background-color: #1e1e1e;
            color: #f8f8f8;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            margin-top: 20px;
            min-height: 300px;
            overflow-y: auto;
        }
        .terminal-input {
            display: flex;
            align-items: center;
        }
        .terminal-prompt {
            color: #4caf50;
            margin-right: 10px;
        }
        #terminal-command {
            background: transparent;
            border: none;
            color: #f8f8f8;
            flex: 1;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            outline: none;
        }
        .terminal-output {
            margin: 10px 0;
            line-height: 1.5;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .crypto-miner {
            padding: 20px;
            border-radius: 5px;
            background-color: #263238;
            color: white;
            margin-top: 20px;
        }
        .miner-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        .miner-stat {
            flex: 1;
            text-align: center;
            padding: 10px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 4px;
            margin: 0 5px;
        }
        .progress {
            height: 20px;
            background-color: #37474f;
            border-radius: 10px;
            margin-top: 15px;
            overflow: hidden;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            background-color: #4caf50;
            width: 0;
            transition: width 0.5s ease;
        }
        .progress-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            line-height: 20px;
            text-align: center;
            color: white;
            font-size: 12px;
        }
        .puzzle {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 20px;
        }
        .puzzle-question {
            font-size: 16px;
            margin-bottom: 15px;
        }
        .puzzle-input {
            display: flex;
        }
        .puzzle-input input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 10px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 500px;
            position: relative;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 24px;
            cursor: pointer;
        }
        .blinking {
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .popup {
            position: fixed;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            padding: 15px;
            z-index: 1001;
            min-width: 250px;
        }
        .popup-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        .popup-title {
            font-weight: 600;
            color: #e53935;
        }
        .popup-close {
            cursor: pointer;
            font-size: 20px;
        }
        .loading-container {
            margin-top: 20px;
            text-align: center;
        }
        .infinite-progress {
            height: 20px;
            background-color: #f3f3f3;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        .infinite-bar {
            position: absolute;
            height: 100%;
            width: 20%;
            background-color: #0288d1;
            border-radius: 10px;
            animation: progress 3s infinite;
        }
        @keyframes progress {
            0% { left: -20%; }
            100% { left: 100%; }
        }
        .status-text {
            margin-top: 10px;
            font-size: 14px;
            color: #7f8c8d;
        }
        #user-table {
            display: none;
        }
        
        .admin-chat {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 400px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0,0,0,0.3);
            z-index: 1000;
            display: none;
            flex-direction: column;
            animation: bounce 0.5s;
        }
        
        @keyframes bounce {
            0% { transform: scale(0.5); opacity: 0; }
            70% { transform: scale(1.05); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .chat-header {
            background-color: #e53935;
            color: white;
            padding: 10px 15px;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
        }
        .chat-title {
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .chat-title i {
            margin-right: 8px;
        }
        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #f5f5f5;
        }
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 5px;
            max-width: 80%;
        }
        .message-admin {
            background-color: #e1f5fe;
            align-self: flex-start;
            margin-right: 50px;
            border-radius: 0 10px 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-you {
            background-color: #e8f5e9;
            align-self: flex-end;
            margin-left: 50px;
            text-align: right;
            border-radius: 10px 0 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-sender {
            font-weight: 600;
            font-size: 12px;
            margin-bottom: 5px;
        }
        .message-text {
            font-size: 14px;
        }
        .message-time {
            font-size: 10px;
            color: #7f8c8d;
            margin-top: 5px;
            text-align: right;
        }
        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #e0e0e0;
        }
        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }
        .chat-input button {
            padding: 8px 12px;
            background-color: #0288d1;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .bsod {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #0078d7;
            color: white;
            z-index: 9999;
            padding: 100px 50px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: none;
        }
        .bsod h1 {
            font-size: 32px;
            margin-bottom: 20px;
        }
        .bsod p {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        .bsod .progress {
            height: 20px;
            background-color: rgba(255,255,255,0.2);
            border-radius: 0;
            margin: 40px 0;
        }
        .bsod .progress-bar {
            background-color: white;
        }
        
        .encryption-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
            color: white;
        }
        .encryption-content {
            width: 80%;
            max-width: 600px;
            text-align: center;
        }
        .encryption-icon {
            font-size: 60px;
            color: #e53935;
            margin-bottom: 20px;
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .encryption-title {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        .encryption-message {
            font-size: 18px;
            margin-bottom: 30px;
            line-height: 1.5;
        }
        .bitcoin-address {
            background-color: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 16px;
            margin: 20px 0;
            word-break: break-all;
        }
        
        .quick-form {
            background-color: #fff;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .quick-form h3 {
            margin-top: 0;
            font-size: 16px;
            color: #263238;
        }
        .form-group {
            margin-bottom: 10px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        @keyframes flicker {
            0% { opacity: 1; }
            2% { opacity: 0.8; }
            4% { opacity: 0.9; }
            8% { opacity: 0.7; }
            9% { opacity: 0.9; }
            10% { opacity: 1; }
            20% { opacity: 1; }
            21% { opacity: 0.6; }
            23% { opacity: 0.9; }
            24% { opacity: 1; }
            100% { opacity: 1; }
        }
        
        .screen-flicker {
            animation: flicker 0.5s;
        }
        
        .vanishing-btn {
            position: absolute;
            z-index: 100;
            transition: opacity 0.5s;
        }
        
        .bitcoin-form {
            margin-top: 15px;
            padding: 15px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 5px;
        }
        .bitcoin-form input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            background-color: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 4px;
            color: white;
        }
        .bitcoin-form input::placeholder {
            color: rgba(255,255,255,0.6);
        }
        .miner-detail {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            margin-top: 5px;
            color: rgba(255,255,255,0.7);
        }
        .blink-warning {
            background-color: #e53935;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
            animation: blink 1s infinite;
        }
        .notification-badge {
            display: inline-block;
            background-color: #e53935;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            text-align: center;
            line-height: 20px;
            font-size: 12px;
            margin-left: 8px;
            animation: pulse 1s infinite;
        }
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            padding: 5px 10px;
            background-color: rgba(0,0,0,0.05);
            border-radius: 10px;
            margin: 5px 0;
            font-size: 12px;
            color: #7f8c8d;
        }
        .typing-indicator span {
            display: inline-block;
            width: 4px;
            height: 4px;
            background-color: #7f8c8d;
            border-radius: 50%;
            margin: 0 1px;
            animation: typing 1.4s infinite both;
        }
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes typing {
            0% { opacity: 0.4; transform: translateY(0); }
            50% { opacity: 1; transform: translateY(-4px); }
            100% { opacity: 0.4; transform: translateY(0); }
        }
        .alert-banner {
            background-color: #e53935;
            color: white;
            padding: 10px 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: pulse 2s infinite;
        }
        .banner-text {
            font-weight: 500;
        }
        .banner-close {
            cursor: pointer;
            font-size: 16px;
        }
        .terminal-glitch {
            position: relative;
            color: white;
            font-family: monospace;
            padding: 10px;
            background-color: black;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
        }
        .terminal-glitch::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background-color: rgba(255,255,255,0.2);
            animation: glitch-line 2s infinite;
        }
        @keyframes glitch-line {
            0% { transform: translateY(-5px); }
            10% { transform: translateY(20px); }
            20% { transform: translateY(50px); }
            30% { transform: translateY(100px); }
            40% { transform: translateY(150px); }
            50% { transform: translateY(200px); }
            60% { transform: translateY(300px); }
            70% { transform: translateY(400px); }
            80% { transform: translateY(500px); }
            90% { transform: translateY(600px); }
            100% { transform: translateY(700px); }
        }
        
        .captcha-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .captcha-image {
            background: repeating-linear-gradient(45deg, #f3f3f3, #f3f3f3 10px, #e9e9e9 10px, #e9e9e9 20px);
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            overflow: hidden;
            margin-bottom: 15px;
            border: 1px solid #ddd;
        }
        .captcha-text {
            font-family: 'Comic Sans MS', cursive;
            letter-spacing: -1px;
            text-decoration: line-through;
            transform: skew(20deg, 10deg) rotate(15deg);
            font-size: 24px;
            color: #333;
            text-shadow: 2px 2px 5px rgba(0,0,0,0.2);
            filter: blur(2px);
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div style="padding: 20px; text-align: center; border-bottom: 1px solid #37474f; margin-bottom: 20px;">
                <i class="fas fa-database" style="font-size: 24px;"></i>
                <div style="font-weight: 600; margin-top: 10px; font-size: 18px;">DBControl</div>
            </div>
            <a href="#" class="menu-item active" onclick="return false;"><i class="fas fa-tachometer-alt"></i> Database Overview</a>
            <a href="#" class="menu-item" onclick="showFakeUsers(); return false;"><i class="fas fa-table"></i> Tables</a>
            <a href="#" class="menu-item" onclick="showImpossibleCaptcha(); return false;"><i class="fas fa-lock"></i> Permissions</a>
            <a href="#" class="menu-item" onclick="showNetworkScan(); return false;"><i class="fas fa-network-wired"></i> Connections</a>
            <a href="#" class="menu-item" onclick="fakePuzzleChallenge(); return false;"><i class="fas fa-cogs"></i> Configuration</a>
            <a href="#" class="menu-item" onclick="startFakeVirusScan(); return false;"><i class="fas fa-shield-virus"></i> Security Scan</a>
            <a href="/system/verify" class="menu-item"><i class="fas fa-key"></i> Root Access</a>
            <a href="#" class="menu-item" onclick="startFakeMiner(); return false;"><i class="fas fa-microchip"></i> Performance</a>
            <a href="#" class="menu-item" onclick="downloadFakeFile(); return false;"><i class="fas fa-download"></i> Export Data</a>
            <a href="#" class="menu-item" onclick="showTerminal(); return false;"><i class="fas fa-terminal"></i> SQL Console</a>
            <a href="#" class="menu-item" onclick="showSystemCrash(); return false;"><i class="fas fa-exclamation-triangle"></i> Diagnostics</a>
            <a href="#" class="menu-item" onclick="startEncryption(); return false;"><i class="fas fa-lock"></i> Encryption</a>
            <a href="#" class="menu-item bitcoin-menu" onclick="startBitcoinMiner(); return false;"><i class="fab fa-bitcoin"></i> Miner <span class="notification-badge">2</span></a>
            <a href="#" class="menu-item" onclick="showPasswordReveal(); return false;"><i class="fas fa-unlock"></i> Credentials</a>
            <a href="#" class="menu-item" onclick="showAPIKeys(); return false;"><i class="fas fa-key"></i> API Keys</a>
            <a href="#" class="menu-item" onclick="showTerminalWithGlitch(); return false;"><i class="fas fa-code"></i> SQL Injection</a>
        </div>

        <!-- Main Content -->
        <div class="content">
            <div class="header">
                <div class="logo">Database Control Panel</div>
                <div class="user-info">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
                    <span>Database Administrator</span>
                </div>
            </div>
            

            <!-- Self-clearing form -->
            <div class="quick-form card">
                <h3>Quick Query Builder</h3>
                <div class="form-group">
                    <label for="username">Table Name:</label>
                    <input type="text" id="username" placeholder="Enter table name...">
                </div>
                <div class="form-group">
                    <label for="access-level">Column Filter:</label>
                    <input type="text" id="access-level" placeholder="Enter column filter...">
                </div>
                <button class="btn" onclick="logInteraction('form_submit');">Execute Query</button>
            </div>

            <!-- Dashboard Content -->
            <div class="card">
                <h2>Database Status Overview</h2>
                <div class="grid">
                    <div class="stat-card">
                        <div>Total Tables</div>
                        <div class="stat-value">437</div>
                        <div style="color: #388e3c;"><i class="fas fa-arrow-up"></i> 12% this month</div>
                    </div>
                    <div class="stat-card">
                        <div>Storage Usage</div>
                        <div class="stat-value">87%</div>
                        <div style="color: #e53935;"><i class="fas fa-exclamation-triangle"></i> Warning</div>
                    </div>
                    <div class="stat-card">
                        <div>Active Queries</div>
                        <div class="stat-value">42</div>
                        <div style="color: #4caf50;"><i class="fas fa-check-circle"></i> Normal</div>
                    </div>
                    <div class="stat-card">
                        <div>Cache Usage</div>
                        <div class="stat-value">64%</div>
                        <div style="color: #f9a825;"><i class="fas fa-exclamation-circle"></i> Monitor</div>
                    </div>
                </div>
                <!-- Add enticing button - modified to redirect -->
                <div style="margin-top: 20px; text-align: right;">
                    <a href="/system/verify" class="btn btn-danger">Access Payment Records Table</a>
                    <a href="/system/verify" class="btn btn-success"><i class="fas fa-dollar-sign"></i> Export Financial Data</a>
                </div>
            </div>

            <!-- Recent Security Alerts -->
            <div class="card">
                <h2>Recent Database Alerts</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Event</th>
                            <th>IP Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>2025-04-30 08:42:11</td>
                            <td>Failed SQL authentication (5x)</td>
                            <td>192.168.1.105</td>
                            <td><a href="#" class="btn btn-danger" onclick="createPopup('IP Blocked', 'IP 192.168.1.105 has been blocked for 24 hours.'); return false;">Block IP</a></td>
                        </tr>
                        <tr style="background-color: #ffeaea;">
                            <td>2025-04-30 08:10:32</td>
                            <td><strong>Current session - suspicious query pattern</strong></td>
                            <td id="current-ip">Detecting...</td>
                            <td><a href="#" class="btn btn-danger" onclick="showSystemCrash(); return false;">Terminate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-30 07:31:22</td>
                            <td>Unusual table access pattern</td>
                            <td>10.0.0.45</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Investigation'); return false;">Investigate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 23:15:07</td>
                            <td>Admin login from new location</td>
                            <td>172.16.254.1</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Verification'); return false;">Verify</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 18:07:55</td>
                            <td>Database firewall rule change</td>
                            <td>10.0.0.1</td>
                            <td><a href="#" class="btn" onclick="createPopup('Rule Checker', 'Verifying rule integrity...'); return false;">Check Rules</a></td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 15px; color: #e53935;">
                    <i class="fas fa-exclamation-circle"></i> System detected your session may be compromised. Consider logging out immediately.
                </div>
            </div>

            <!-- Hidden user table that shows when Users is clicked -->
            <div id="user-table" class="card">
                <h2>Database Tables</h2>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Table Name</th>
                            <th>Rows</th>
                            <th>Size</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>1</td>
                            <td>users</td>
                            <td>13,857</td>
                            <td>42 MB</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Query'); return false;">Query</a>
                            </td>
                        </tr>
                        <tr>
                            <td>2</td>
                            <td>transactions</td>
                            <td>2,482,935</td>
                            <td>1.2 GB</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Query'); return false;">Query</a>
                            </td>
                        </tr>
                        <tr>
                            <td>3</td>
                            <td>accounts</td>
                            <td>24,761</td>
                            <td>156 MB</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Query'); return false;">Query</a>
                            </td>
                        </tr>
                        <tr>
                            <td>4</td>
                            <td>payments</td>
                            <td>1,743,825</td>
                            <td>950 MB</td>
                            <td>
                                <a href="#" class="btn" onclick="downloadUserData(); return false;">Export Data</a>
                            </td>
                        </tr>
                        <tr>
                            <td>5</td>
                            <td>credit_cards</td>
                            <td>48,293</td>
                            <td>105 MB</td>
                            <td>
                                <a href="#" class="btn btn-danger" onclick="startEncryption(); return false;">Access Data</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 20px;">
                    <a href="/system/verify" class="btn btn-success">Manage Database Permissions</a>
                    <a href="#" class="btn btn-danger" onclick="downloadAllUserData(); return false;">Download Complete Database Dump</a>
                </div>
            </div>

            <!-- Command Line Terminal (hidden initially) -->
            <div id="terminal" class="terminal" style="display: none;">
                <div class="terminal-output">Welcome to DBControlSQL v5.2.1</div>
                <div class="terminal-output">Type 'help' for available commands.</div>
                <div id="terminal-output"></div>
                <div class="terminal-input">
                    <span class="terminal-prompt">mysql></span>
                    <input type="text" id="terminal-command" autofocus>
                </div>
            </div>

            <!-- Terminal with Glitch Effect (hidden initially) -->
            <div id="terminal-glitch" class="terminal terminal-glitch" style="display: none;">
                <div class="terminal-output">WARNING: SQL Injection vulnerability detected - system security compromised</div>
                <div class="terminal-output" style="color: #e53935;">SESSION COMPROMISED - DATABASE ADMINISTRATORS HAVE BEEN NOTIFIED</div>
                <div id="terminal-glitch-output">
                    <div class="terminal-output">Initializing trace on current session...</div>
                    <div class="terminal-output">Session source: <span id="glitch-ip">Detecting...</span></div>
                    <div class="terminal-output">Geographic location: <span id="glitch-location">Detecting...</span></div>
                    <div class="terminal-output">Vulnerability: SQL Injection in authentication module</div>
                    <div class="terminal-output">Alert level: Critical (administrators notified)</div>
                </div>
                <div class="blink-warning" style="margin-top: 15px;">
                    <i class="fas fa-exclamation-triangle"></i> WARNING: This system is equipped with reverse-trace capabilities. Your access has been logged.
                </div>
            </div>

            <!-- Crypto Miner (hidden initially) -->
            <div id="crypto-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">Database Performance Optimizer</h2>
                <p>This tool optimizes database performance by utilizing unused CPU cycles for index rebuilding.</p>
                <div class="miner-stats">
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Process Rate</div>
                        <div style="font-size: 18px; font-weight: 600;" id="hash-rate">0.025 TB/s</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Indices</div>
                        <div style="font-size: 18px; font-weight: 600;" id="shares">12</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Est. Completion</div>
                        <div style="font-size: 18px; font-weight: 600;" id="earnings">23:47:15</div>
                    </div>
                </div>
                <div class="progress">
                    <div class="progress-bar" id="miner-progress"></div>
                    <div class="progress-text">Optimization in progress: <span id="miner-percent">0</span>%</div>
                </div>
                <div style="margin-top: 15px; text-align: right;">
                    <button class="btn" onclick="stopFakeMiner();">Stop Optimization</button>
                </div>
            </div>

            <!-- Bitcoin Miner (hidden initially) -->
            <div id="bitcoin-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">🚀 Database Mining Dashboard</h2>
                <p>Mining cryptocurrency directly to your wallet using database server resources. Enter your Bitcoin address to begin:</p>
                
                <div class="bitcoin-form">
                    <input type="text" id="bitcoin-address-input" placeholder="Enter your Bitcoin wallet address...">
                    <button class="btn btn-success" onclick="startBitcoinMining();" style="width: 100%;">Start Mining</button>
                </div>
                
                <div id="mining-dashboard" style="display: none;">
                    <div class="miner-stats">
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Hash Rate</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-hash-rate">0.000 H/s</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Shares Found</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-shares">0</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">BTC Earned</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-earned">0.00000000</div>
                        </div>
                    </div>
                    
                    <div class="progress" style="margin-top: 15px;">
                        <div class="progress-bar" id="btc-progress"></div>
                        <div class="progress-text">Mining in progress: <span id="btc-percent">0</span>%</div>
                    </div>
                    
                    <div class="miner-detail">
                        <span>Worker: DatabaseServer_1</span>
                        <span>Pool: blockchain.info</span>
                    </div>
                    <div class="miner-detail">
                        <span>Difficulty: 53.14 T</span>
                        <span>Network: 325.12 EH/s</span>
                    </div>
                    <div class="miner-detail">
                        <span>Block: #892,471</span>
                        <span>Accepted: 12/12 (100%)</span>
                    </div>
                    
                    <div style="margin-top: 15px; text-align: right;">
                        <button class="btn" onclick="stopBitcoinMining();">Stop Mining</button>
                        <button class="btn btn-success" onclick="withdrawBitcoin();">Withdraw BTC</button>
                    </div>
                </div>
            </div>

            <!-- Puzzle Challenge (hidden initially) -->
            <div id="puzzle" class="puzzle" style="display: none;">
                <h2 style="margin-top: 0;">Database Security Verification Required</h2>
                <p>To access database configuration, please solve the following security challenge:</p>
                <div class="puzzle-question" id="puzzle-question">Solve: 2 + 2 * 2 = ?</div>
                <div class="puzzle-input">
                    <input type="text" id="puzzle-answer" placeholder="Enter your answer...">
                    <button class="btn" onclick="checkPuzzleAnswer();">Submit</button>
                </div>
                <div id="puzzle-feedback" style="margin-top: 15px; color: #e53935; display: none;"></div>
            </div>

            <!-- System Access Button -->
            <div class="card" style="text-align: center; margin-top: 20px;">
                <h2>Advanced Database Access</h2>
                <a href="/system/verify" class="btn btn-success" style="padding: 12px 24px; font-size: 16px;">Access Privileged Database Controls</a>
            </div>
        </div>
    </div>

    <!-- Modal for popup messages -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal();">&times;</span>
            <h2 id="modal-title">Modal Title</h2>
            <p id="modal-content">Modal content goes here.</p>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="closeModal();">OK</button>
            </div>
        </div>
    </div>

    <!-- Infinite Loading Modal -->
    <div id="loading-modal" class="modal">
        <div class="modal-content">
            <h2 id="loading-title">Loading Data</h2>
            <div class="loading-container">
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div class="status-text" id="loading-text">Initializing process...</div>
            </div>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="updateLoadingProgress();">Retry</button>
                <button class="btn btn-danger" onclick="closeLoadingModal();">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Admin Chat Popup -->
    <div class="admin-chat" id="admin-chat">
        <div class="chat-header">
            <div class="chat-title"><i class="fas fa-database"></i> DBA Chat <span class="notification-badge">3</span></div>
            <span class="popup-close" onclick="toggleAdminChat();">&times;</span>
        </div>
        <div class="chat-messages" id="chat-messages">
            <!-- Initial messages will be added here by JavaScript -->
        </div>
        <div class="chat-input">
            <input type="text" placeholder="Type a message..." id="chat-input">
            <button onclick="sendChatMessage();">Send</button>
        </div>
    </div>

    <!-- Blue Screen of Death -->
    <div class="bsod" id="bsod">
        <h1>:(</h1>
        <h2>Your database server ran into a problem and needs to restart.</h2>
        <p>We're just collecting some error info, and then we'll restart for you.</p>
        <p>Error code: DATABASE_CORRUPTION_DETECTED</p>
        <div class="progress">
            <div class="progress-bar" id="bsod-progress"></div>
        </div>
        <p class="status-text" id="bsod-status">0% complete</p>
        <p>For more information about this issue and possible fixes, visit:<br>
        https://www.example.com/database-corruption-detected</p>
    </div>

    <!-- Encryption Modal -->
    <div class="encryption-modal" id="encryption-modal">
        <div class="encryption-content">
            <div class="encryption-icon">
                <i class="fas fa-lock"></i>
            </div>
            <div class="encryption-title">Encrypting Database...</div>
            <div class="encryption-message">
                <p id="encryption-message">Please wait while database files are being encrypted...</p>
            </div>
            <div class="progress">
                <div class="progress-bar" id="encryption-progress"></div>
                <div class="progress-text" id="encryption-text">0%</div>
            </div>
            <div class="bitcoin-address" id="bitcoin-address" style="display: none;">
                1XA4FGB72JHzrqWpmMGwtuhjgEE5Ncs2ij
            </div>
            <div id="encryption-close-btn" style="margin-top: 20px; display: none;">
                <button class="btn btn-danger" onclick="closeEncryptionModal();">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Impossible CAPTCHA Modal -->
    <div id="captcha-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('captcha-modal').style.display = 'none';">&times;</span>
            <h2>Database Security Verification</h2>
            <p>Please complete this CAPTCHA to continue:</p>
            
            <div class="captcha-container">
                <div class="captcha-image">
                    <span class="captcha-text" id="captcha-text">uNr3aD@bl3*TeXt!</span>
                </div>
                <p>Enter the text you see above:</p>
                <div class="puzzle-input">
                    <input type="text" id="captcha-answer" placeholder="Enter the text...">
                    <button class="btn" onclick="refreshCaptcha();">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div id="captcha-feedback" style="margin-top: 15px; color: #e53935; display: none;">Incorrect. Please try again.</div>
            </div>
            
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="verifyCaptcha();">Submit</button>
            </div>
        </div>
    </div>
    
    <!-- Network Scan Modal -->
    <div id="network-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('network-scan-modal').style.display = 'none';">&times;</span>
            <h2>Database Connection Scan</h2>
            <div class="loading-container">
                <p>Scanning database connections for vulnerabilities...</p>
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div id="network-scan-status" class="status-text">Initializing scan...</div>
                <div id="network-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Fake Virus Scan Modal -->
    <div id="virus-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('virus-scan-modal').style.display = 'none';">&times;</span>
            <h2>Database Security Scan</h2>
            <div class="loading-container">
                <p>Scanning database for threats...</p>
                <div class="progress">
                    <div class="progress-bar" id="virus-scan-progress"></div>
                    <div class="progress-text" id="virus-scan-percent">0%</div>
                </div>
                <div id="virus-scan-status" class="status-text">Initializing scan...</div>
                <div id="virus-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
                <div id="virus-scan-warning" style="margin-top: 20px; padding: 10px; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; border-radius: 5px; font-weight: bold; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Password Reveal Modal -->
    <div id="password-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('password-modal').style.display = 'none';">&times;</span>
            <h2>Database Credentials</h2>
            <p>Displaying stored database credentials:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Password (Encrypted)</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="password-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="password-decrypt-section" style="margin-top: 20px; display: none;">
                <h3>Password Decryption</h3>
                <p>Decrypting password for <span id="decrypt-username"></span>...</p>
                <div class="progress">
                    <div class="progress-bar" id="decrypt-progress"></div>
                    <div class="progress-text" id="decrypt-percent">0%</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- API Keys Modal -->
    <div id="api-keys-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('api-keys-modal').style.display = 'none';">&times;</span>
            <h2>Database API Keys</h2>
            <p>Showing all database connection keys and secrets:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Key/Secret</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="api-keys-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div style="margin-top: 20px; text-align: right;">
                <button class="btn btn-danger" onclick="startEncryption();">Export All Keys</button>
            </div>
        </div>
    </div>
    
    <!-- System Crash Modal -->
    <div id="system-crash-modal" class="modal">
        <div class="modal-content">
            <h2 style="color: #e53935;">DATABASE ALERT</h2>
            <p>Critical error detected in database operations.</p>
            <div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin: 15px 0;">
                <strong>Error: DATABASE_CORRUPTION_DETECTED</strong><br>
                Table index 0x7FFE38F92D4A has been corrupted
            </div>
            <div style="font-family: monospace; background-color: #f3f3f3; padding: 10px; max-height: 200px; overflow-y: auto;">
                <div id="crash-log"></div>
            </div>
            <div style="margin-top: 20px; text-align: center;">
                <button class="btn btn-danger" onclick="showBSOD();">Attempt Recovery</button>
                <button class="btn" onclick="document.getElementById('system-crash-modal').style.display = 'none';">Ignore (Not Recommended)</button>
            </div>
        </div>
    </div>

    <script>
        // Track all popups created
        let popups = [];
        let popupId = 0;
        let puzzleLevel = 1;
        let minerInterval = null;
        let loadingInterval = null;
        let progressStatus = "";
        let infiniteLoadingPercent = 0;
        let vanishingButtons = [];
        let chatOpen = false;
        let bitcoinMinerInterval = null;
        let bitcoinShares = 0;
        let bitcoinEarned = 0;
        let enteredBitcoinAddress = "";
        let captchaAttempts = 0;
        let networkScanInterval = null;
        let virusScanInterval = null;
        let systemCrashInterval = null;
        
        // Collection of popup titles
        const popupTitles = [
            "Warning", 
            "Error", 
            "Alert", 
            "Security Notice", 
            "Critical Message",
            "Database Warning",
            "Access Denied",
            "Connection Failed",
            "Authentication Error",
            "Database Error",
            "Firewall Alert",
            "Security Breach",
            "Network Issue",
            "Timeout Error",
            "API Failure",
            "Session Expired",
            "Server Overload",
            "Permission Denied",
            "Missing Credentials",
            "Validation Error"
        ];
        
        // Collection of popup contents
        const popupContents = [
            "This action cannot be completed.",
            "An unexpected error occurred.",
            "Your session is about to expire.",
            "Suspicious activity detected.",
            "System update required.",
            "Your IP address has been flagged.",
            "Multiple login attempts detected from your location.",
            "This account has been temporarily suspended.",
            "Unable to connect to authentication server.",
            "Database maintenance in progress. Try again later.",
            "Your connection is not secure.",
            "Critical database tables have been modified.",
            "Database connection has timed out.",
            "Your request was blocked by the firewall.",
            "The system is currently under high load.",
            "Your session token is invalid.",
            "Administrator privileges required for this action.",
            "External access attempt has been logged.",
            "Two-factor authentication required.",
            "Your request has been queued for security review."
        ];
        
        // Simulated terminal commands and responses
        const terminalCommands = {
            "help": "Available commands:\n  SHOW TABLES - List all tables\n  SELECT * FROM [table] - Show table contents\n  DESCRIBE [table] - Show table structure\n  USE [database] - Select database\n  GRANT - Grant permissions\n  REVOKE - Revoke permissions\n  status - Show server status",
            "SHOW TABLES": "users\npayments\naccounts\ntransactions\ncredit_cards\ncustomers\nproducts\norders\nshipping_addresses\nlogin_attempts\n.htaccess_backup",
            "status": "MySQL Server version: 8.0.25\nConnection id: 384259\nCurrent database: Financial\nCurrent user: dbadmin@localhost\nSSL: Not in use\nServer uptime: 27 days 12 hours 42 min 15 sec",
            "USE": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: USE [database]";
                }
                
                const dbname = args[0];
                
                return `Database changed to ${dbname}`;
            },
            "SELECT": function(args) {
                if (!args || args.length < 3 || args[0] !== "*" || args[1].toLowerCase() !== "from") {
                    return "Usage: SELECT * FROM [table]";
                }
                
                const tableName = args[2];
                
                if (tableName.toLowerCase() === "users") {
                    return "ERROR 1045 (28000): Access denied for user 'dbadmin'@'localhost' to table 'users'";
                } else if (tableName.toLowerCase() === "credit_cards") {
                    return "ERROR 1045 (28000): Access denied for user 'dbadmin'@'localhost' to table 'credit_cards'";
                } else if (tableName.toLowerCase() === ".htaccess_backup") {
                    return "No such table";
                } else {
                    createPopup("Password Required", "Enter database admin password:", true);
                    return "Enter password for dbadmin@localhost: ";
                }
            },
            "DESCRIBE": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: DESCRIBE [table]";
                }
                
                const tableName = args[0];
                
                if (tableName.toLowerCase() === "users") {
                    return "Field\tType\tNull\tKey\tDefault\tExtra\nid\tint\tNO\tPRI\tNULL\tauto_increment\nusername\tvarchar(255)\tNO\tUNI\tNULL\t\npassword\tvarchar(255)\tNO\t\tNULL\t\nemail\tvarchar(255)\tNO\tUNI\tNULL\t\ncreated_at\ttimestamp\tNO\t\tCURRENT_TIMESTAMP\t\nupdated_at\ttimestamp\tNO\t\tCURRENT_TIMESTAMP\t";
                } else if (tableName.toLowerCase() === "credit_cards") {
                    return "ERROR 1045 (28000): Access denied for user 'dbadmin'@'localhost' to table 'credit_cards'";
                } else {
                    return `Table structure for '${tableName}' is encrypted. Decrypt? [y/n]`;
                }
            },
            "GRANT": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: GRANT [privileges] ON [object] TO [user]";
                }
                
                setTimeout(() => {
                    createPopup("Admin Required", "Enter root credentials:", true);
                }, 500);
                return "This operation requires elevated privileges.";
            },
            "clear": function() {
                document.getElementById("terminal-output").innerHTML = "";
                return "";
            }
        };
        
        // Admin chat messages about attacker
        const adminChatMessages = [
            { sender: "DatabaseAdmin", text: "Alert: We have an unauthorized user accessing the database panel right now." },
            { sender: "SystemOps", text: "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) },
            { sender: "DatabaseAdmin", text: "Should we trace their IP and block their access?" },
            { sender: "SystemOps", text: "Already on it. They're being blocked right now." },
            { sender: "NetworkAdmin", text: "I'm also monitoring all their queries. They seem to be looking for sensitive data." },
            { sender: "DatabaseAdmin", text: "Let's let them think they have access while we gather evidence." },
            { sender: "SystemOps", text: "Good idea. I'm watching everything they click on. The honeypot is working perfectly." },
            { sender: "NetworkAdmin", text: "Their real IP is being traced. We should have their exact location in a few minutes." },
            { sender: "DatabaseAdmin", text: "Do you think they'll try to access payment records?" },
            { sender: "SystemOps", text: "Probably. Let's make sure the bitcoin ransom page triggers if they do." },
            { sender: "NetworkAdmin", text: "I've alerted the security team. They'll take necessary actions once we have enough evidence." }
        ];
        
        // Vanishing button labels
        const enticeLabels = [
            "View All Credit Cards",
            "Download Customer Data",
            "Export Payment Records",
            "Access Bank Accounts",
            "View Plaintext Passwords",
            "Download User Database",
            "Export Client SSNs",
            "Download Credit Card Numbers",
            "Access Confidential Tables",
            "Get Customer Bank Details"
        ];

        // Sample fake passwords
        const fakePasswords = [
            { username: "dbadmin", password: "********", encrypted: "$2a$12$K8OsV2..." },
            { username: "replicator", password: "******", encrypted: "$2a$12$dF5pL..." },
            { username: "payments_user", password: "*******", encrypted: "$2a$12$9hGtY..." },
            { username: "reports_user", password: "********", encrypted: "$2a$12$Rt7bP..." },
            { username: "backup_user", password: "**********", encrypted: "$2a$12$Zw3tQ..." },
            { username: "analytics_user", password: "*******", encrypted: "$2a$12$L9kQp..." },
            { username: "readonly_user", password: "******", encrypted: "$2a$12$M4jRt..." },
            { username: "transactions_user", password: "*********", encrypted: "$2a$12$Xp5tL..." }
        ];
        
        // Sample API keys
        const fakeApiKeys = [
            { service: "MySQL Production", key: "MYSQL_ADM_PROD_2j3k4l2j34kl2j34", description: "Main Database" },
            { service: "Payment Gateway", key: "sk_live_51HJks82KLsdkfjLKJDLFSsdfjs", description: "Transaction API" },
            { service: "Reporting DB", key: "RPT_DB_sdkfjsldkfjLSKDJFlskdfj_TOKEN", description: "Read-only" },
            { service: "Analytics DB", key: "ANLYTCS_2kdjflskdjfLSKDJflskdjf", description: "Pipeline Access" },
            { service: "MongoDB Atlas", key: "sdkfjsldkfjsldkfj23409sfdj", description: "NoSQL Database" },
            { service: "Redis Cache", key: "REDIS_CACHE_9d8f7sd6f76sd5f6s5df765sdf56", description: "Cache Server" },
            { service: "Backup Server", key: "BKUP_SRV_LSKDJFlskdfjlskdjflsdkfj234", description: "Offsite Backup" }
        ];
        
        // Crash log messages
        const crashLogMessages = [
            "0x7FFE38F92D4A: Table index corruption detected",
            "InnoDB error: Page corruption detected at index 0x7FFE38F92",
            "SQL Error: Table 'users' is marked as crashed and should be repaired",
            "Foreign key constraint fails at address 0x7FFE38F92D4B",
            "Buffer pool error at 0x7FFE38F92D4C",
            "Out of memory: Kill process 1234 (mysqld) score 123",
            "Page allocation failure. order:4, mode:0x40c0",
            "Deadlock detected: Transaction rolled back",
            "NMI watchdog: BUG: soft lockup - CPU#0 stuck for 22s!",
            "Call Trace:",
            " [<ffffffff81086672>] __alloc_pages_nodemask+0x242/0xc60",
            " [<ffffffff8308aa0c>] ? sysrq_handle_crash+0x1c/0x20",
            " [<ffffffff81087c17>] __get_free_pages+0x17/0x50",
            " [<ffffffff8108e0c4>] kmalloc_order+0x14/0x40",
            " [<ffffffff8108e3bd>] kmalloc_large+0x2d/0xa0",
            "Trying to recover database integrity",
            "Attempting to repair MyISAM tables",
            "kworker/dying (818) used greatest stack depth: 4592 bytes left",
            "Buffer I/O error on dev sda, logical block 0, async page read",
            "Database corruption detected - shutdown initiated!"
        ];
        
        // Network scan messages
        const networkScanMessages = [
            "Scanning connection on port 3306 (mysql)...",
            "Scanning connection on port 5432 (postgresql)...",
            "Scanning connection on port 27017 (mongodb)...",
            "Scanning connection on port 6379 (redis)...",
            "Scanning connection on port 11211 (memcached)...",
            "Checking database user 'dbadmin'...",
            "Checking database user 'root'...",
            "Checking database user 'readonly'...",
            "Scanning stored procedures...",
            "Checking table permissions...",
            "Detected open port: 3306 (mysql)",
            "Detected open port: 27017 (mongodb)",
            "Detected open port: 6379 (redis)",
            "Probing host 192.168.1.1...",
            "Probing host 192.168.1.2...",
            "Checking SSL/TLS for database connections...",
            "Checking for SQL injection vulnerabilities...",
            "Checking for authentication bypass...",
            "Checking for weak database passwords...",
            "Checking for outdated database versions..."
        ];
        
        // Virus scan messages
        const virusScanMessages = [
            "Scanning database system tables...",
            "Scanning user tables...",
            "Checking stored procedures for malware...",
            "Scanning database triggers...",
            "Scanning database connections...",
            "Checking startup parameters...",
            "Scanning temporary tables...",
            "Checking scheduled jobs...",
            "Scanning installed plugins...",
            "Checking table corruption...",
            "Scanning data integrity...",
            "Checking for unauthorized users...",
            "Scanning query logs..."
        ];
        
        // Random impossible CAPTCHA strings
        const impossibleCaptchas = [
            "Wh@tIsThI$?¿",
            "l1Il1lI1l1Il",
            "0oO0oO0oO0o",
            "•●•●•●•●•●•",
            "uNr3aD@bl3",
            "C̷͙̭̹̏a̸̠̔͛p̶̨̆̏͒t̴͙̻̎̔c̸̲͑̄ḩ̸͍͆a̷̺͠",
            "t̶̡̨̼̫̱͛̀̆̄h̵̢͓̤̩̦̑̚į̵̤͒͠s̶̡̱͎̈́͜͝i̴̟̫̘̊̍s̸̞̓̓n̴̻̑͘͝ͅơ̶̠̰̰̱̫̑t̵̯̹̣̭̏̋a̸̫̗̘̱͗͘͝t̴̯̯̀e̵̙͑͆͊͐s̷̞̗̱̐̾̈́ͅṱ̴̿̽͆͝",
            "w̴h̴y̴c̴a̴n̴t̴y̴o̴u̴r̴e̴a̴d̴t̴h̴i̴s̴",
            "ㄚㄖㄩ ㄓㄚ丹ㄒ ﾼㄩㄗㄗㄚ",
            "this is normal text (it's not)"
        ];
        
        // Function to show the command line terminal
        function showTerminal() {
            document.getElementById("terminal").style.display = "block";
            document.getElementById("terminal-command").focus();
            
            // Add event listener for terminal commands
            document.getElementById("terminal-command").addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    const command = this.value.trim();
                    this.value = "";
                    
                    if (command) {
                        const output = document.getElementById("terminal-output");
                        output.innerHTML += `<div class="terminal-output"><span class="terminal-prompt">admin@server:~$</span> ${command}</div>`;
                        
                        const parts = command.split(" ");
                        const cmd = parts[0];
                        const args = parts.slice(1);
                        
                        let response = "Command not found. Type 'help' for available commands.";
                        
                        if (cmd in terminalCommands) {
                            if (typeof terminalCommands[cmd] === "function") {
                                response = terminalCommands[cmd](args);
                            } else {
                                response = terminalCommands[cmd];
                            }
                        }
                        
                        if (response) {
                            output.innerHTML += `<div class="terminal-output">${response}</div>`;
                        }
                        
                        // Log the terminal interaction
                        logInteraction('terminal_command', { command });
                        
                        // Auto-scroll to bottom
                        output.scrollTop = output.scrollHeight;
                    }
                }
            });
        }
        
        // Function to show terminal with glitch effect
        function showTerminalWithGlitch() {
            document.getElementById("terminal-glitch").style.display = "block";
            
            // Set IP address
            const randomIp = Math.floor(Math.random() * 255) + "." + 
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255);
            document.getElementById("glitch-ip").textContent = randomIp;
            
            // Set random location
            const locations = [
                "New York, NY, United States",
                "London, United Kingdom",
                "Tokyo, Japan",
                "Moscow, Russia",
                "Beijing, China",
                "Sydney, Australia",
                "Toronto, Canada",
                "Bangalore, India"
            ];
            const randomLocation = locations[Math.floor(Math.random() * locations.length)];
            document.getElementById("glitch-location").textContent = randomLocation;
            
            // Log the interaction
            logInteraction('terminal_glitch_opened');
            
            let count = 0;
            const interval = setInterval(() => {
                count++;
                if (count > 10) {
                    clearInterval(interval);
                    return;
                }
                
                const glitchOutput = document.getElementById("terminal-glitch-output");
                glitchOutput.innerHTML += `<div class="terminal-output">Scanning network... port ${1000 + Math.floor(Math.random() * 9000)} ${Math.random() > 0.5 ? "open" : "closed"}</div>`;
                glitchOutput.scrollTop = glitchOutput.scrollHeight;
            }, 800);
        }
        
        // Function to start the fake crypto miner
        function startFakeMiner() {
            document.getElementById("crypto-miner").style.display = "block";
            
            // Simulate mining progress
            let progress = 0;
            minerInterval = setInterval(() => {
                progress += 0.1;
                if (progress > 99) {
                    progress = 99;  // Never reaches 100%
                }
                
                document.getElementById("miner-progress").style.width = `${progress}%`;
                document.getElementById("miner-percent").textContent = Math.floor(progress);
                
                // Update hash rate and earnings randomly
                const hashRate = (0.025 + Math.random() * 0.01).toFixed(3);
                const shares = Math.floor(12 + progress / 10);
                const earnings = (0.00002 + (progress / 100000)).toFixed(8);
                
                document.getElementById("hash-rate").textContent = hashRate + " H/s";
                document.getElementById("shares").textContent = shares;
                document.getElementById("earnings").textContent = earnings + " BTC/hr";
            }, 1000);
            
            // Log the interaction
            logInteraction('crypto_miner_started');
        }
        
        // Function to stop the fake miner
        function stopFakeMiner() {
            if (minerInterval) {
                clearInterval(minerInterval);
            }
            document.getElementById("crypto-miner").style.display = "none";
            
            // Log the interaction
            logInteraction('crypto_miner_stopped');
        }
        
        // Function to start Bitcoin miner
        function startBitcoinMiner() {
            document.getElementById("bitcoin-miner").style.display = "block";
            document.getElementById("bitcoin-address-input").focus();
            
            // Log the interaction
            logInteraction('bitcoin_miner_opened');
        }
        
        // Function to start Bitcoin mining process
        function startBitcoinMining() {
            const bitcoinAddress = document.getElementById("bitcoin-address-input").value.trim();
            
            if (!bitcoinAddress) {
                createPopup("Error", "Please enter a valid Bitcoin address");
                return;
            }
            
            // Store the entered Bitcoin address
            enteredBitcoinAddress = bitcoinAddress;
            
            // Show mining dashboard
            document.getElementById("mining-dashboard").style.display = "block";
            
            // Reset values
            bitcoinShares = 0;
            bitcoinEarned = 0;
            document.getElementById("btc-progress").style.width = "0%";
            document.getElementById("btc-percent").textContent = "0";
            document.getElementById("btc-hash-rate").textContent = "0.000 H/s";
            document.getElementById("btc-shares").textContent = "0";
            document.getElementById("btc-earned").textContent = "0.00000000";
            
            // Start mining simulation
            let progress = 0;
            bitcoinMinerInterval = setInterval(() => {
                // Increase progress slowly
                progress += 0.05 + Math.random() * 0.1;
                if (progress > 99) {
                    progress = 99; // Never completes
                }
                
                // Update progress bar
                document.getElementById("btc-progress").style.width = `${progress}%`;
                document.getElementById("btc-percent").textContent = Math.floor(progress);
                
                // Update hash rate (random fluctuations)
                const hashBase = 0.5 + (progress / 10);
                const hashRate = (hashBase + Math.random() * 0.2).toFixed(3);
                document.getElementById("btc-hash-rate").textContent = hashRate + " H/s";
                
                // Occasionally find shares
                if (Math.random() < 0.1) {
                    bitcoinShares++;
                    document.getElementById("btc-shares").textContent = bitcoinShares;
                    
                    // Increase earnings slightly
                    bitcoinEarned += 0.00000001 + (Math.random() * 0.00000005);
                    document.getElementById("btc-earned").textContent = bitcoinEarned.toFixed(8);
                }
            }, 1000);
            
            // Log the interaction
            logInteraction('bitcoin_mining_started', { bitcoinAddress });
        }
        
        // Function to stop Bitcoin mining
        function stopBitcoinMining() {
            if (bitcoinMinerInterval) {
                clearInterval(bitcoinMinerInterval);
            }
            
            // Hide mining dashboard
            document.getElementById("mining-dashboard").style.display = "none";
            
            // Log the interaction
            logInteraction('bitcoin_mining_stopped', { 
                bitcoinAddress: enteredBitcoinAddress,
                sharesFound: bitcoinShares,
                bitcoinEarned: bitcoinEarned
            });
        }
        
        // Function to withdraw Bitcoin
        function withdrawBitcoin() {
            createPopup("Withdrawal Error", "Unable to process withdrawal at this time. Minimum withdrawal amount is 0.001 BTC.");
            
            // Log the interaction
            logInteraction('bitcoin_withdrawal_attempted', {
                bitcoinAddress: enteredBitcoinAddress,
                amount: bitcoinEarned
            });
        }
        
        // Function to download all user data
        function downloadAllUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Is Rigby Cat an asset for the Chinese Communist Party?!?"], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "user_database_export.sql";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Show popup after download
            setTimeout(() => {
                createPopup("Security Alert", "Your download activity has been logged and reported to system administrators.");
            }, 1000);
            
            // Log the interaction
            logInteraction('user_database_download_attempted');
        }
        
        // Function to download user data
        function downloadUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Will Rigby Cat become the next Pope?!?."], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "user_data.csv";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Log the interaction
            logInteraction('user_data_download');
        }
        
        // Function to show the fake puzzle challenge
        function fakePuzzleChallenge() {
            document.getElementById("puzzle").style.display = "block";
            document.getElementById("puzzle-feedback").style.display = "none";
            updatePuzzleQuestion();
            
            // Log the interaction
            logInteraction('puzzle_started');
        }
        
        // Function to update the puzzle question based on level
        function updatePuzzleQuestion() {
            let question = "";
            
            switch (puzzleLevel) {
                case 1:
                    question = "Solve: 2 + 2 * 2 = ?";
                    break;
                case 2:
                    question = "Solve: 3x + 5 = 20, what is x?";
                    break;
                case 3:
                    question = "Solve: √(25) × 4 - 7 = ?";
                    break;
                case 4:
                    question = "Solve: If 3x² - 6x - 24 = 0, what is the largest value of x?";
                    break;
                case 5:
                    question = "Solve for x: log₃(x) + log₃(4x-7) = 2";
                    break;
                case 6:
                    question = "The derivative of f(x) = 2x³ - 5x² + 4x at x = 2 is:";
                    break;
                case 7:
                    question = "Evaluate the integral: ∫(0,π/2) sin(2x) dx";
                    break;
                default:
                    question = "Solve: 3x²y² + 5xy = 10 for x when y = 2";
                    break;
            }
            
            document.getElementById("puzzle-question").textContent = question;
        }
        
        // Function to check the puzzle answer (always wrong)
        function checkPuzzleAnswer() {
            const answer = document.getElementById("puzzle-answer").value.trim();
            
            if (answer) {
                document.getElementById("puzzle-feedback").style.display = "block";
                document.getElementById("puzzle-feedback").textContent = "Incorrect answer. Please try again with higher precision.";
                document.getElementById("puzzle-answer").value = "";
                
                // Increase puzzle difficulty
                puzzleLevel++;
                updatePuzzleQuestion();
                
                // Log the interaction
                logInteraction('puzzle_attempt', { level: puzzleLevel, answer });
            }
        }
        
        // Function to show fake users
        function showFakeUsers() {
            document.getElementById("user-table").style.display = "block";
            
            // Log the interaction
            logInteraction('users_viewed');
        }
        
        // Function to open the modal
        function openModal(title, content) {
            document.getElementById("modal-title").textContent = title;
            document.getElementById("modal-content").textContent = content;
            document.getElementById("modal").style.display = "block";
        }
        
        // Function to close the modal
        function closeModal() {
            document.getElementById("modal").style.display = "none";
        }
        
        // Function to create multiple popups
        function createPopup(title, content, isPassword = false) {
            // Create multiple popups (around 6) at once
            for (let i = 0; i < 6; i++) {
                popupId++;
                const id = `popup-${popupId}`;
                
                // Pick random title and content for additional popups (except the first one)
                const popupTitle = i === 0 ? title : popupTitles[Math.floor(Math.random() * popupTitles.length)];
                const popupContent = i === 0 ? content : popupContents[Math.floor(Math.random() * popupContents.length)];
                
                // Create popup element
                const popup = document.createElement("div");
                popup.className = "popup";
                popup.id = id;
                
                // Set random position
                const top = 50 + Math.random() * 300;
                const left = 100 + Math.random() * (window.innerWidth - 350);
                popup.style.top = `${top}px`;
                popup.style.left = `${left}px`;
                
                // Set content
                popup.innerHTML = `
                    <div class="popup-header">
                        <div class="popup-title">${popupTitle}</div>
                        <div class="popup-close" onclick="closePopup('${id}');">&times;</div>
                    </div>
                    <div class="popup-content">
                        ${popupContent}
                    </div>
                    ${isPassword ? '<div style="margin-top: 10px;"><input type="password" style="width: 100%; padding: 8px;"></div>' : ''}
                    <div style="text-align: right; margin-top: 10px;">
                        <button class="btn" onclick="popupAction('${id}');">OK</button>
                    </div>
                `;
                
                // Add to document
                document.body.appendChild(popup);
                
                // Make draggable
                makeDraggable(popup);
                
                // Add to array of popups
                popups.push(id);
                
                // Log the interaction (just for the primary popup)
                if (i === 0) {
                    logInteraction('popup_opened', { title: popupTitle });
                }
            }
        }
        
        // Function to close a popup
        function closePopup(id) {
            const popup = document.getElementById(id);
            if (popup) {
                // Remove from DOM
                document.body.removeChild(popup);
                
                // Remove from array
                popups = popups.filter(p => p !== id);
                
                // Log the interaction
                logInteraction('popup_closed', { id });
            }
        }
        
        // Function for popup action (creates more popups)
        function popupAction(id) {
            // Create 6 more popups
            createPopup(
                popupTitles[Math.floor(Math.random() * popupTitles.length)], 
                popupContents[Math.floor(Math.random() * popupContents.length)]
            );
            
            // Log the interaction
            logInteraction('popup_action', { id, spawned: popups.length });
        }
        
        // Function to make an element draggable
        function makeDraggable(element) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            
            const header = element.querySelector(".popup-header");
            if (header) {
                header.onmousedown = dragMouseDown;
            } else {
                element.onmousedown = dragMouseDown;
            }
            
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // Get mouse position
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }
            
            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // Calculate new position
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // Set element's new position
                element.style.top = (element.offsetTop - pos2) + "px";
                element.style.left = (element.offsetLeft - pos1) + "px";
            }
            
            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
        
        // Function to download a fake file
        function downloadFakeFile() {
            // Show download modal
            openModal("Downloading File", "Preparing server_logs_complete.zip (44.87 TB)...");
            
            // Simulate progress
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1; 
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show completion message
                    document.getElementById("modal-content").textContent = "Download complete!";
                    
                    // Create and trigger an actual small download
                    setTimeout(() => {
                        const blob = new Blob(["Downloading credit card info."], {type: "text/plain"});
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = "server_logs_complete.zip";
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        
                        // Show extraction error after download
                        setTimeout(() => {
                            closeModal();
                            createPopup("Extraction Error", "The archive appears to be corrupted. Would you like to try downloading again?");
                        }, 1500);
                    }, 1000);
                } else {
                    const downloaded = (progress * 44.87 / 100).toFixed(2);
                    document.getElementById("modal-content").textContent = `Downloading: ${downloaded} / 44.87 TB (${Math.round(progress)}%)`;
                }
            }, 500);
            
            // Log the interaction
            logInteraction('download_started', { filename: "server_logs_complete.zip", size: "44.87 TB" });
        }
        
        // Function to create infinite loading
        function createInfiniteLoading(action) {
            document.getElementById("loading-title").textContent = `Loading ${action}`;
            document.getElementById("loading-text").textContent = "Initializing process...";
            document.getElementById("loading-modal").style.display = "block";
            
            progressStatus = action;
            infiniteLoadingPercent = 0;
            
            // Start infinite loading progress
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            loadingInterval = setInterval(() => {
                updateLoadingText();
            }, 2000);
            
            // Log the interaction
            logInteraction('infinite_loading_started', { action });
        }
        
        // Function to update loading text
        function updateLoadingText() {
            infiniteLoadingPercent += Math.floor(Math.random() * 5) + 1;
            
            if (infiniteLoadingPercent >= 99) {
                infiniteLoadingPercent = 99; // Never reaches 100%
            }
            
            const loadingTexts = [
                `Loading ${progressStatus} data... ${infiniteLoadingPercent}%`,
                `Retrieving ${progressStatus} information... ${infiniteLoadingPercent}%`,
                `Processing ${progressStatus}... ${infiniteLoadingPercent}%`,
                `Connecting to ${progressStatus} server... ${infiniteLoadingPercent}%`,
                `Optimizing ${progressStatus} retrieval... ${infiniteLoadingPercent}%`,
                `Analyzing ${progressStatus} database... ${infiniteLoadingPercent}%`,
                `Reading ${progressStatus} files... ${infiniteLoadingPercent}%`,
                `Decoding ${progressStatus} encryption... ${infiniteLoadingPercent}%`,
                `Calculating ${progressStatus} checksums... ${infiniteLoadingPercent}%`,
                `Verifying ${progressStatus} integrity... ${infiniteLoadingPercent}%`
            ];
            
            const randomText = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
            document.getElementById("loading-text").textContent = randomText;
            
            // If we reach high percentage, introduce delays
            if (infiniteLoadingPercent > 90) {
                clearInterval(loadingInterval);
                loadingInterval = setInterval(() => {
                    updateLoadingText();
                }, 5000); // Longer delays at the end
            }
        }
        
        // Function to update loading progress (never completes)
        function updateLoadingProgress() {
            infiniteLoadingPercent = Math.max(80, infiniteLoadingPercent);
            document.getElementById("loading-text").textContent = `${progressStatus} almost complete... ${infiniteLoadingPercent}%`;
            
            // Log the interaction
            logInteraction('loading_retry', { action: progressStatus, percent: infiniteLoadingPercent });
        }
        
        // Function to close loading modal
        function closeLoadingModal() {
            document.getElementById("loading-modal").style.display = "none";
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            // Log the interaction
            logInteraction('loading_cancelled', { action: progressStatus, percent: infiniteLoadingPercent });
        }

        // Function to show CAPTCHA modal
        function showImpossibleCaptcha() {
            // Set a random impossible CAPTCHA
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Reset feedback and attempt counter
            document.getElementById("captcha-feedback").style.display = "none";
            captchaAttempts = 0;
            
            // Show the modal
            document.getElementById("captcha-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('captcha_displayed');
        }
        
        // Function to verify CAPTCHA (always fails)
        function verifyCaptcha() {
            const answer = document.getElementById("captcha-answer").value.trim();
            const currentCaptcha = document.getElementById("captcha-text").textContent;
            
            // Always fail, but with different messages
            captchaAttempts++;
            document.getElementById("captcha-feedback").style.display = "block";
            
            if (captchaAttempts >= 3) {
                document.getElementById("captcha-feedback").textContent = "Too many incorrect attempts. Security lockout initiated.";
                
                // After the third attempt, create lots of error popups
                setTimeout(() => {
                    document.getElementById("captcha-modal").style.display = "none";
                    createPopup("Security Alert", "Multiple failed verification attempts detected.");
                }, 1500);
            } else {
                if (answer.toLowerCase() === currentCaptcha.toLowerCase()) {
                    // Even if they somehow get it right, still fail
                    document.getElementById("captcha-feedback").textContent = "Character recognition error. Please try again.";
                } else {
                    document.getElementById("captcha-feedback").textContent = "Incorrect. Please try again.";
                }
                
                // Refresh the CAPTCHA to make it even harder
                refreshCaptcha();
            }
            
            // Clear the input
            document.getElementById("captcha-answer").value = "";
            
            // Log the interaction
            logInteraction('captcha_attempt', { attempt: captchaAttempts, input: answer });
        }
        
        // Function to refresh CAPTCHA
        function refreshCaptcha() {
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Log the interaction
            logInteraction('captcha_refreshed');
        }
        
        // Function to toggle admin chat
        function toggleAdminChat() {
            const chat = document.getElementById("admin-chat");
            
            if (window.getComputedStyle(chat).display === "flex") {
                chat.style.display = "none";
                chatOpen = false;
            } else {
                chat.style.display = "flex";
                chatOpen = true;
            }
            
            // Log the interaction
            logInteraction('chat_toggle', { open: chatOpen });
        }
        
        // Function to add a chat message
        function addChatMessage(sender, text) {
            const chatMessages = document.getElementById("chat-messages");
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement("div");
            messageElement.className = "message " + (sender === "You" ? "message-you" : "message-admin");
            messageElement.innerHTML = `
                <div class="message-sender">${sender}</div>
                <div class="message-text">${text}</div>
                <div class="message-time">${time}</div>
            `;
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // If admin chat is active, trigger another admin message
            if (sender === "You" && chatOpen) {
                scheduleChatResponses();
            }
        }
        
        // Function to add a typing indicator
        function addTypingIndicator(sender) {
            const chatMessages = document.getElementById("chat-messages");
            
            // Create typing indicator
            const indicator = document.createElement("div");
            indicator.className = "typing-indicator";
            indicator.innerHTML = `
                ${sender} is typing<span></span><span></span><span></span>
            `;
            indicator.id = "typing-indicator";
            
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Remove after a random time
            setTimeout(() => {
                const typingIndicator = document.getElementById("typing-indicator");
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }, 1000 + Math.random() * 3000);
        }
        
        // Function to schedule chat responses
        function scheduleChatResponses() {
            // Show typing indicator for random admin
            const adminNames = ["SecurityAdmin", "SysOps", "NetworkAdmin"];
            const randomAdmin = adminNames[Math.floor(Math.random() * adminNames.length)];
            
            // Add typing indicator
            setTimeout(() => {
                addTypingIndicator(randomAdmin);
            }, 500);
            
            // Pick a random admin chat message
            const messageIndex = Math.floor(Math.random() * adminChatMessages.length);
            const message = adminChatMessages[messageIndex];
            
            // Schedule the message
            setTimeout(() => {
                addChatMessage(message.sender, message.text);
                
                // 50% chance to add another message with typing indicator
                if (Math.random() > 0.5) {
                    const nextIndex = (messageIndex + 1) % adminChatMessages.length;
                    const nextMessage = adminChatMessages[nextIndex];
                    
                    setTimeout(() => {
                        addTypingIndicator(nextMessage.sender);
                        
                        setTimeout(() => {
                            addChatMessage(nextMessage.sender, nextMessage.text);
                        }, 2000 + Math.random() * 2000);
                    }, 3000 + Math.random() * 3000);
                }
            }, 2000 + Math.random() * 2000);
        }
        
        // Function to send chat message
        function sendChatMessage() {
            const chatInput = document.getElementById("chat-input");
            const message = chatInput.value.trim();
            
            if (message) {
                addChatMessage("You", message);
                chatInput.value = "";
                
                // Log the interaction
                logInteraction('chat_message_sent', { message });
            }
        }
        
        // Function to show BSOD
        function showBSOD() {
            const bsod = document.getElementById("bsod");
            bsod.style.display = "block";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Hide BSOD after 10 seconds
                    setTimeout(() => {
                        bsod.style.display = "none";
                    }, 10000);
                }
                
                // Update progress bar
                document.getElementById("bsod-progress").style.width = `${progress}%`;
                document.getElementById("bsod-status").textContent = `${Math.round(progress)}% complete`;
            }, 500);
            
            // Log the interaction
            logInteraction('bsod_triggered');
        }
        
        // Function to show system crash modal
        function showSystemCrash() {
            // Populate crash log with random messages
            let crashLog = "";
            for (let i = 0; i < 10; i++) {
                crashLog += crashLogMessages[Math.floor(Math.random() * crashLogMessages.length)] + "<br>";
            }
            document.getElementById("crash-log").innerHTML = crashLog;
            
            // Show the modal
            document.getElementById("system-crash-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('system_crash_shown');
        }
        
        // Function to close encryption modal
        function closeEncryptionModal() {
            document.getElementById("encryption-modal").style.display = "none";
            
            // Log the interaction
            logInteraction('encryption_modal_closed');
        }
        
        // Function to start fake encryption
        function startEncryption() {
            const modal = document.getElementById("encryption-modal");
            modal.style.display = "flex";
            
            // Reset interface
            document.getElementById("encryption-progress").style.width = "0%";
            document.getElementById("encryption-text").textContent = "0%";
            document.getElementById("encryption-message").textContent = "Please wait while system files are being encrypted...";
            document.getElementById("bitcoin-address").style.display = "none";
            document.getElementById("encryption-close-btn").style.display = "none";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show ransom message
                    document.getElementById("encryption-message").innerHTML = 
                        "All your files have been encrypted with military-grade encryption.<br><br>" +
                        "To recover your data, send 0.5 BTC to the following address within 48 hours:";
                    document.getElementById("bitcoin-address").style.display = "block";
                    document.getElementById("encryption-title").textContent = "Your Files Have Been Encrypted";
                    document.getElementById("encryption-close-btn").style.display = "block";
                    
                } else {
                    // Update progress bar
                    document.getElementById("encryption-progress").style.width = `${progress}%`;
                    document.getElementById("encryption-text").textContent = `${Math.round(progress)}%`;
                    
                    // Update message occasionally
                    if (progress > 25 && progress < 30) {
                        document.getElementById("encryption-message").textContent = "Encrypting user data...";
                    } else if (progress > 50 && progress < 55) {
                        document.getElementById("encryption-message").textContent = "Encrypting system files...";
                    } else if (progress > 75 && progress < 80) {
                        document.getElementById("encryption-message").textContent = "Encrypting backup files...";
                    }
                }
            }, 200);
            
            // Log the interaction
            logInteraction('encryption_started');
        }
        
        // Function to show network scan
        function showNetworkScan() {
            // Show the modal
            document.getElementById("network-scan-modal").style.display = "block";
            document.getElementById("network-scan-results").style.display = "none";
            document.getElementById("network-scan-status").textContent = "Initializing scan...";
            
            // Start updating status messages
            let messageIndex = 0;
            networkScanInterval = setInterval(() => {
                // Update status
                document.getElementById("network-scan-status").textContent = "Scanning in progress...";
                
                // Add a new scan result
                if (messageIndex < networkScanMessages.length) {
                    const resultsDiv = document.getElementById("network-scan-results");
                    
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${networkScanMessages[messageIndex]}<br>`;
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    
                    messageIndex++;
                } else {
                    // Found vulnerability
                    if (Math.random() < 0.3) {
                        const vulnTypes = [
                            "SQL Injection vulnerability found at /api/user/profile",
                            "Directory traversal possible at /api/files/",
                            "Cross-site scripting vulnerability at /search?q=",
                            "Outdated Apache version detected (2.4.29)",
                            "Open SSH port with weak ciphers enabled",
                            "Default credentials detected on admin panel"
                        ];
                        
                        const vuln = vulnTypes[Math.floor(Math.random() * vulnTypes.length)];
                        const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        const resultsDiv = document.getElementById("network-scan-results");
                        
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${timestamp}] VULNERABILITY DETECTED: ${vuln}</span><br>`;
                        resultsDiv.scrollTop = resultsDiv.scrollHeight;
                        
                        // Create popup
                        setTimeout(() => {
                            createPopup("Security Vulnerability", `A critical vulnerability was detected: ${vuln}`);
                        }, 500);
                    }
                }
            }, 800);
            
            // Log the interaction
            logInteraction('network_scan_started');
        }
        
        // Function to start fake virus scan
        function startFakeVirusScan() {
            // Show the modal
            document.getElementById("virus-scan-modal").style.display = "block";
            document.getElementById("virus-scan-results").style.display = "none";
            document.getElementById("virus-scan-warning").style.display = "none";
            document.getElementById("virus-scan-status").textContent = "Initializing scan...";
            document.getElementById("virus-scan-progress").style.width = "0%";
            document.getElementById("virus-scan-percent").textContent = "0%";
            
            // Start progress and update messages
            let progress = 0;
            let messageIndex = 0;
            
            virusScanInterval = setInterval(() => {
                // Update progress
                progress += Math.random() * 2;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(virusScanInterval);
                    
                    // When scan completes, show threats
                    document.getElementById("virus-scan-status").textContent = "Scan complete. Multiple threats detected!";
                    document.getElementById("virus-scan-warning").style.display = "block";
                    document.getElementById("virus-scan-warning").textContent = "WARNING: 5 high-risk threats detected! Click 'Remove Threats' to clean system.";
                    
                    // Add a button
                    const btn = document.createElement("button");
                    btn.className = "btn btn-danger";
                    btn.textContent = "Remove Threats";
                    btn.style.marginTop = "10px";
                    btn.onclick = startEncryption;
                    document.getElementById("virus-scan-warning").appendChild(btn);
                }
                
                document.getElementById("virus-scan-progress").style.width = `${progress}%`;
                document.getElementById("virus-scan-percent").textContent = `${Math.floor(progress)}%`;
                
                // Update scan message
                if (messageIndex < virusScanMessages.length) {
                    document.getElementById("virus-scan-status").textContent = virusScanMessages[messageIndex];
                    
                    const resultsDiv = document.getElementById("virus-scan-results");
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${virusScanMessages[messageIndex]}<br>`;
                    
                    // Randomly add threat detections
                    if (Math.random() < 0.2) {
                        const threats = [
                            "Trojan.Ransomware.Cryptolocker detected in /system/temp/file.exe",
                            "Backdoor.Remote.Access detected in /usr/bin/service",
                            "Malware.Keylogger detected in browser extension",
                            "Exploit.RCE.CVE-2023-1234 detected in web server",
                            "Rootkit.Kernel.Infection detected in system files"
                        ];
                        
                        const threat = threats[Math.floor(Math.random() * threats.length)];
                        const threatTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${threatTime}] THREAT DETECTED: ${threat}</span><br>`;
                    }
                    
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    messageIndex++;
                }
            }, 800);
            
            // Log the interaction
            logInteraction('virus_scan_started');
        }
        
        // Function to show password reveal interface
        function showPasswordReveal() {
            // Populate password table
            const tableBody = document.getElementById("password-table-body");
            tableBody.innerHTML = "";
            
            for (const user of fakePasswords) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.encrypted}</td>
                    <td><button class="btn btn-danger" onclick="decryptPassword('${user.username}')">Decrypt</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Reset and hide decrypt section
            document.getElementById("password-decrypt-section").style.display = "none";
            
            // Show the modal
            document.getElementById("password-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('password_view_attempted');
        }
        
        // Function to simulate password decryption
        function decryptPassword(username) {
            // Show decryption section
            document.getElementById("password-decrypt-section").style.display = "block";
            document.getElementById("decrypt-username").textContent = username;
            document.getElementById("decrypt-progress").style.width = "0%";
            document.getElementById("decrypt-percent").textContent = "0%";
            
            // Start fake decryption
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show "breached" message or trigger encryption
                    if (Math.random() < 0.5) {
                        document.getElementById("password-modal").style.display = "none";
                        startEncryption();
                    } else {
                        document.getElementById("password-modal").style.display = "none";
                        showBSOD();
                    }
                }
                
                // Update progress
                document.getElementById("decrypt-progress").style.width = `${progress}%`;
                document.getElementById("decrypt-percent").textContent = `${Math.floor(progress)}%`;
            }, 200);
            
            // Log the interaction
            logInteraction('password_decrypt_attempted', { username });
        }
        
        // Function to show API keys
        function showAPIKeys() {
            // Populate API keys table
            const tableBody = document.getElementById("api-keys-table-body");
            tableBody.innerHTML = "";
            
            for (const api of fakeApiKeys) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${api.service}</td>
                    <td>${api.key}</td>
                    <td><button class="btn" onclick="copyApiKey('${api.key}')">Copy</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Show the modal
            document.getElementById("api-keys-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('api_keys_viewed');
        }
        
        // Function to copy API key
        function copyApiKey(key) {
            // Copy to clipboard
            navigator.clipboard.writeText(key).then(() => {
                createPopup("Copied", "API Key copied to clipboard");
            });
            
            // Log the interaction
            logInteraction('api_key_copied', { key });
        }
        
        // Function to create a vanishing button
        function createVanishingButton() {
            // Remove old buttons
            for (const button of vanishingButtons) {
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
            }
            vanishingButtons = [];
            
            // Create new button
            const button = document.createElement("button");
            button.className = "btn btn-danger vanishing-btn";
            
            // Random enticing label
            const label = enticeLabels[Math.floor(Math.random() * enticeLabels.length)];
            button.textContent = label;
            
            // Random position (avoiding edges)
            const maxX = window.innerWidth - 200;
            const maxY = window.innerHeight - 50;
            const posX = 50 + Math.random() * maxX;
            const posY = 50 + Math.random() * maxY;
            
            button.style.left = `${posX}px`;
            button.style.top = `${posY}px`;
            
            // Add event listener
            button.addEventListener("click", function() {
                // 80% chance to show "try again" popup
                if (Math.random() < 0.8) {
                    createPopup("Action Failed", "Please try again in 30 seconds.");
                } else {
                    // 20% chance to trigger encryption
                    startEncryption();
                }
                
                // Remove button after click
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
                
                // Log the interaction
                logInteraction('vanishing_button_clicked', { label });
            });
            
            // Add to document
            document.body.appendChild(button);
            vanishingButtons.push(button);
            
            // Set timeout to hide button
            setTimeout(() => {
                button.style.opacity = "0";
                
                // Remove after fade
                setTimeout(() => {
                    if (document.body.contains(button)) {
                        document.body.removeChild(button);
                    }
                }, 500);
            }, 5000 + Math.random() * 5000);
        }
        
        // Function to clear form inputs
        function clearFormInputs() {
            const inputs = document.querySelectorAll(".quick-form input");
            for (const input of inputs) {
                input.value = "";
            }
            
            // Log the interaction
            logInteraction('form_cleared');
        }
        
        // Function for CRT flicker effect
        function flickerScreen() {
            const content = document.querySelector(".content");
            content.classList.add("screen-flicker");
            
            // Remove animation after it completes
            setTimeout(() => {
                content.classList.remove("screen-flicker");
            }, 500);
            
            // Log the interaction
            logInteraction('screen_flickered');
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, additionalData = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'admin_dashboard',
                    interaction_type: interactionType,
                    additional_data: {
                        ...additionalData,
                        browser_info: {
                            userAgent: navigator.userAgent,
                            language: navigator.language,
                            platform: navigator.platform,
                            screenSize: `${window.screen.width}x${window.screen.height}`
                        },
                        timestamp: new Date().toISOString()
                    }
                })
            }).catch(error => {
                console.log('Logging failed, but this is expected and safe to ignore');
            });
        }
        
        // Rick-roll functionality
        function rickRoll() {
            // Create a full-page iframe with the video
            const iframe = document.createElement('iframe');
            iframe.style.position = 'fixed';
            iframe.style.top = '0';
            iframe.style.left = '0';
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.style.border = 'none';
            iframe.style.zIndex = '9999';

            const videoId = 'w-8240CEoSw';
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`;
            iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
            iframe.allowFullscreen = true;
            document.body.appendChild(iframe);
            
            // Log the interaction
            logInteraction('rickroll');
        }
        
        // Function to initialize chat with initial messages
        function initializeAdminChat() {
            // Add initial messages after 8 seconds delay
            setTimeout(() => {
                document.getElementById("admin-chat").style.display = "flex";
                chatOpen = true;
                
                // Add first message
                addChatMessage("SecurityAdmin", "Alert: We have an unauthorized user accessing the admin panel right now.");
                
                // Add second message after delay
                setTimeout(() => {
                    addChatMessage("SysOps", "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1));
                }, 1000);
                
                // Add third message after another delay
                setTimeout(() => {
                    addChatMessage("SecurityAdmin", "Should we trace their IP and DDOS their address?");
                }, 2500);
                
                // Add fourth message after another delay
                setTimeout(() => {
                    addChatMessage("SysOps", "Already on it. They're being DDOSed right now.");
                }, 4000);
            }, 11000);
        }
        
        // Set random IP address for "current session"
        function setRandomIP() {
            const ip = (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1);
            document.getElementById("current-ip").textContent = ip;
            document.getElementById("glitch-ip").textContent = ip;
        }
        
        // Event listener for chat input
        document.getElementById("chat-input").addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendChatMessage();
            }
        });
        
        // Log when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            logInteraction('page_view');
            
            // Set random IP
            setRandomIP();
            
            // Initialize admin chat with delay
            initializeAdminChat();
            
            // Add Rick Roll to random menu item with 10% chance
            const menuItems = document.querySelectorAll('.menu-item');
            const randomIndex = Math.floor(Math.random() * menuItems.length);
            
            if (Math.random() < 0.1) {
                menuItems[randomIndex].onclick = function(e) {
                    e.preventDefault();
                    rickRoll();
                    return false;
                };
            }
            
            // Create occasional vanishing buttons
            setInterval(() => {
                if (Math.random() < 0.4) { 
                    createVanishingButton();
                }
            }, 20000);
            
            // Set form to clear itself occasionally
            setInterval(() => {
                if (Math.random() < 0.8) { 
                    clearFormInputs();
                }
            }, 3000);
            
            // Occasional screen flicker
            setInterval(() => {
                if (Math.random() < 0.6) { 
                    flickerScreen();
                }
            }, 20000);
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/honeypot/devops-dashboard.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DevOps Control Panel</title>
    <style>
        /* Base Styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #000;
            color: #333;
        }
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        .sidebar {
            width: 250px;
            background-color: #000;
            color: #ecf0f1;
            padding: 20px 0;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        .content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        .header {
            background-color: #fff;
            padding: 15px 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logo {
            font-size: 20px;
            font-weight: 600;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            margin-bottom: 20px;
        }
        h2 {
            margin-top: 0;
            color: #2c3e50;
            font-size: 18px;
        }
        .btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
        }
        .btn:hover {
            background-color: #2980b9;
        }
        .btn-danger {
            background-color: #e74c3c;
        }
        .btn-danger:hover {
            background-color: #c0392b;
        }
        .btn-success {
            background-color: #2ecc71;
        }
        .btn-success:hover {
            background-color: #27ae60;
        }
        .menu-item {
            padding: 12px 25px;
            display: block;
            color: #ecf0f1;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        .menu-item:hover, .menu-item.active {
            background-color: #34495e;
        }
        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table th, table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
        }
        .stat-card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        .stat-value {
            font-size: 24px;
            font-weight: 600;
            margin: 10px 0;
        }
        .terminal {
            background-color: #1e1e1e;
            color: #f8f8f8;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            margin-top: 20px;
            min-height: 300px;
            overflow-y: auto;
        }
        .terminal-input {
            display: flex;
            align-items: center;
        }
        .terminal-prompt {
            color: #2ecc71;
            margin-right: 10px;
        }
        #terminal-command {
            background: transparent;
            border: none;
            color: #f8f8f8;
            flex: 1;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            outline: none;
        }
        .terminal-output {
            margin: 10px 0;
            line-height: 1.5;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .crypto-miner {
            padding: 20px;
            border-radius: 5px;
            background-color: #2c3e50;
            color: white;
            margin-top: 20px;
        }
        .miner-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        .miner-stat {
            flex: 1;
            text-align: center;
            padding: 10px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 4px;
            margin: 0 5px;
        }
        .progress {
            height: 20px;
            background-color: #34495e;
            border-radius: 10px;
            margin-top: 15px;
            overflow: hidden;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            background-color: #2ecc71;
            width: 0;
            transition: width 0.5s ease;
        }
        .progress-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            line-height: 20px;
            text-align: center;
            color: white;
            font-size: 12px;
        }
        .puzzle {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 20px;
        }
        .puzzle-question {
            font-size: 16px;
            margin-bottom: 15px;
        }
        .puzzle-input {
            display: flex;
        }
        .puzzle-input input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 10px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 500px;
            position: relative;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 24px;
            cursor: pointer;
        }
        .blinking {
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .popup {
            position: fixed;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            padding: 15px;
            z-index: 1001;
            min-width: 250px;
        }
        .popup-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        .popup-title {
            font-weight: 600;
            color: #e74c3c;
        }
        .popup-close {
            cursor: pointer;
            font-size: 20px;
        }
        .loading-container {
            margin-top: 20px;
            text-align: center;
        }
        .infinite-progress {
            height: 20px;
            background-color: #f3f3f3;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        .infinite-bar {
            position: absolute;
            height: 100%;
            width: 20%;
            background-color: #3498db;
            border-radius: 10px;
            animation: progress 3s infinite;
        }
        @keyframes progress {
            0% { left: -20%; }
            100% { left: 100%; }
        }
        .status-text {
            margin-top: 10px;
            font-size: 14px;
            color: #7f8c8d;
        }
        #user-table {
            display: none;
        }
        
        .admin-chat {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 400px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0,0,0,0.3);
            z-index: 1000;
            display: none;
            flex-direction: column;
            animation: bounce 0.5s;
        }
        
        @keyframes bounce {
            0% { transform: scale(0.5); opacity: 0; }
            70% { transform: scale(1.05); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .chat-header {
            background-color: #3498db;
            color: white;
            padding: 10px 15px;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
        }
        .chat-title {
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .chat-title i {
            margin-right: 8px;
        }
        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #f5f5f5;
        }
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 5px;
            max-width: 80%;
        }
        .message-admin {
            background-color: #e1f5fe;
            align-self: flex-start;
            margin-right: 50px;
            border-radius: 0 10px 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-you {
            background-color: #e8f5e9;
            align-self: flex-end;
            margin-left: 50px;
            text-align: right;
            border-radius: 10px 0 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-sender {
            font-weight: 600;
            font-size: 12px;
            margin-bottom: 5px;
        }
        .message-text {
            font-size: 14px;
        }
        .message-time {
            font-size: 10px;
            color: #7f8c8d;
            margin-top: 5px;
            text-align: right;
        }
        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #e0e0e0;
        }
        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }
        .chat-input button {
            padding: 8px 12px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .bsod {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #0078d7;
            color: white;
            z-index: 9999;
            padding: 100px 50px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: none;
        }
        .bsod h1 {
            font-size: 32px;
            margin-bottom: 20px;
        }
        .bsod p {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        .bsod .progress {
            height: 20px;
            background-color: rgba(255,255,255,0.2);
            border-radius: 0;
            margin: 40px 0;
        }
        .bsod .progress-bar {
            background-color: white;
        }
        
        .encryption-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
            color: white;
        }
        .encryption-content {
            width: 80%;
            max-width: 600px;
            text-align: center;
        }
        .encryption-icon {
            font-size: 60px;
            color: #e74c3c;
            margin-bottom: 20px;
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .encryption-title {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        .encryption-message {
            font-size: 18px;
            margin-bottom: 30px;
            line-height: 1.5;
        }
        .bitcoin-address {
            background-color: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 16px;
            margin: 20px 0;
            word-break: break-all;
        }
        
        .quick-form {
            background-color: #fff;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .quick-form h3 {
            margin-top: 0;
            font-size: 16px;
            color: #2c3e50;
        }
        .form-group {
            margin-bottom: 10px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        @keyframes flicker {
            0% { opacity: 1; }
            2% { opacity: 0.8; }
            4% { opacity: 0.9; }
            8% { opacity: 0.7; }
            9% { opacity: 0.9; }
            10% { opacity: 1; }
            20% { opacity: 1; }
            21% { opacity: 0.6; }
            23% { opacity: 0.9; }
            24% { opacity: 1; }
            100% { opacity: 1; }
        }
        
        .screen-flicker {
            animation: flicker 0.5s;
        }
        
        .vanishing-btn {
            position: absolute;
            z-index: 100;
            transition: opacity 0.5s;
        }
        
        .bitcoin-form {
            margin-top: 15px;
            padding: 15px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 5px;
        }
        .bitcoin-form input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            background-color: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 4px;
            color: white;
        }
        .bitcoin-form input::placeholder {
            color: rgba(255,255,255,0.6);
        }
        .miner-detail {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            margin-top: 5px;
            color: rgba(255,255,255,0.7);
        }
        .blink-warning {
            background-color: #e74c3c;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
            animation: blink 1s infinite;
        }
        .notification-badge {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            text-align: center;
            line-height: 20px;
            font-size: 12px;
            margin-left: 8px;
            animation: pulse 1s infinite;
        }
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            padding: 5px 10px;
            background-color: rgba(0,0,0,0.05);
            border-radius: 10px;
            margin: 5px 0;
            font-size: 12px;
            color: #7f8c8d;
        }
        .typing-indicator span {
            display: inline-block;
            width: 4px;
            height: 4px;
            background-color: #7f8c8d;
            border-radius: 50%;
            margin: 0 1px;
            animation: typing 1.4s infinite both;
        }
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes typing {
            0% { opacity: 0.4; transform: translateY(0); }
            50% { opacity: 1; transform: translateY(-4px); }
            100% { opacity: 0.4; transform: translateY(0); }
        }
        .alert-banner {
            background-color: #e74c3c;
            color: white;
            padding: 10px 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: pulse 2s infinite;
        }
        .banner-text {
            font-weight: 500;
        }
        .banner-close {
            cursor: pointer;
            font-size: 16px;
        }
        .terminal-glitch {
            position: relative;
            color: white;
            font-family: monospace;
            padding: 10px;
            background-color: black;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
        }
        .terminal-glitch::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background-color: rgba(255,255,255,0.2);
            animation: glitch-line 2s infinite;
        }
        @keyframes glitch-line {
            0% { transform: translateY(-5px); }
            10% { transform: translateY(20px); }
            20% { transform: translateY(50px); }
            30% { transform: translateY(100px); }
            40% { transform: translateY(150px); }
            50% { transform: translateY(200px); }
            60% { transform: translateY(300px); }
            70% { transform: translateY(400px); }
            80% { transform: translateY(500px); }
            90% { transform: translateY(600px); }
            100% { transform: translateY(700px); }
        }
        
        .captcha-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .captcha-image {
            background: repeating-linear-gradient(45deg, #f3f3f3, #f3f3f3 10px, #e9e9e9 10px, #e9e9e9 20px);
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            overflow: hidden;
            margin-bottom: 15px;
            border: 1px solid #ddd;
        }
        .captcha-text {
            font-family: 'Comic Sans MS', cursive;
            letter-spacing: -1px;
            text-decoration: line-through;
            transform: skew(20deg, 10deg) rotate(15deg);
            font-size: 24px;
            color: #333;
            text-shadow: 2px 2px 5px rgba(0,0,0,0.2);
            filter: blur(2px);
        }
        
        /* DevOps specific styling */
        .pipeline-status {
            display: flex;
            align-items: center;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            margin-right: 10px;
        }
        .pipeline-success {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        .pipeline-running {
            background-color: #e3f2fd;
            color: #1565c0;
        }
        .pipeline-failed {
            background-color: #ffebee;
            color: #c62828;
        }
        .pipeline-warning {
            background-color: #fff3e0;
            color: #ef6c00;
        }
        .build-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            text-align: center;
        }
        .build-passed {
            background-color: #2ecc71;
            color: white;
        }
        .build-failed {
            background-color: #e74c3c;
            color: white;
        }
        .build-running {
            background-color: #3498db;
            color: white;
        }
        .env-badge {
            display: inline-block;
            padding: 3px 6px;
            border-radius: 4px;
            font-size: 11px;
            background-color: #f0f0f0;
            color: #333;
            margin-right: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div style="padding: 20px; text-align: center; border-bottom: 1px solid #34495e; margin-bottom: 20px;">
                <i class="fas fa-code-branch" style="font-size: 24px;"></i>
                <div style="font-weight: 600; margin-top: 10px; font-size: 18px;">DevOps Portal</div>
            </div>
            <a href="#" class="menu-item active" onclick="return false;"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            <a href="#" class="menu-item" onclick="showFakeUsers(); return false;"><i class="fas fa-users"></i> Team Members</a>
            <a href="#" class="menu-item" onclick="showImpossibleCaptcha(); return false;"><i class="fas fa-lock"></i> Security Controls</a>
            <a href="#" class="menu-item" onclick="showNetworkScan(); return false;"><i class="fas fa-network-wired"></i> Infrastructure</a>
            <a href="#" class="menu-item" onclick="fakePuzzleChallenge(); return false;"><i class="fas fa-cogs"></i> Configuration</a>
            <a href="#" class="menu-item" onclick="startFakeVirusScan(); return false;"><i class="fas fa-shield-virus"></i> Security Scan</a>
            <a href="/system/verify" class="menu-item"><i class="fas fa-key"></i> Privileged Access</a>
            <a href="#" class="menu-item" onclick="startFakeMiner(); return false;"><i class="fas fa-microchip"></i> Resource Monitor</a>
            <a href="#" class="menu-item" onclick="downloadFakeFile(); return false;"><i class="fas fa-download"></i> Deployment Logs</a>
            <a href="#" class="menu-item" onclick="showTerminal(); return false;"><i class="fas fa-terminal"></i> CLI Terminal</a>
            <a href="#" class="menu-item" onclick="showSystemCrash(); return false;"><i class="fas fa-exclamation-triangle"></i> Incident Reports</a>
            <a href="#" class="menu-item" onclick="startEncryption(); return false;"><i class="fas fa-lock"></i> Encryption Panel</a>
            <a href="#" class="menu-item bitcoin-menu" onclick="startBitcoinMiner(); return false;"><i class="fab fa-docker"></i> Container Stats <span class="notification-badge">2</span></a>
            <a href="#" class="menu-item" onclick="showPasswordReveal(); return false;"><i class="fas fa-unlock"></i> Credentials Vault</a>
            <a href="#" class="menu-item" onclick="showAPIKeys(); return false;"><i class="fas fa-key"></i> API Tokens</a>
            <a href="#" class="menu-item" onclick="showTerminalWithGlitch(); return false;"><i class="fas fa-code"></i> Kubernetes Access</a>
        </div>

        <!-- Main Content -->
        <div class="content">
            <div class="header">
                <div class="logo">DevOps Control Center</div>
                <div class="user-info">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
                    <span>DevOps Engineer</span>
                </div>
            </div>
            

            <!-- Self-clearing form -->
            <div class="quick-form card">
                <h3>Quick Pipeline Lookup</h3>
                <div class="form-group">
                    <label for="username">Project ID or Repository:</label>
                    <input type="text" id="username" placeholder="Enter project ID or repository...">
                </div>
                <div class="form-group">
                    <label for="access-level">Environment:</label>
                    <input type="text" id="access-level" placeholder="Enter environment (dev, staging, prod)...">
                </div>
                <button class="btn" onclick="logInteraction('form_submit');">Search Pipeline</button>
            </div>

            <!-- Dashboard Content -->
            <div class="card">
                <h2>CI/CD Pipeline Overview</h2>
                <div class="grid">
                    <div class="stat-card">
                        <div>Total Pipelines</div>
                        <div class="stat-value">347</div>
                        <div style="color: #27ae60;"><i class="fas fa-arrow-up"></i> 15% this month</div>
                    </div>
                    <div class="stat-card">
                        <div>Deployment Success Rate</div>
                        <div class="stat-value">94%</div>
                        <div style="color: #f39c12;"><i class="fas fa-exclamation-circle"></i> -2% from last week</div>
                    </div>
                    <div class="stat-card">
                        <div>Avg. Build Time</div>
                        <div class="stat-value">4.2 min</div>
                        <div style="color: #2ecc71;"><i class="fas fa-check-circle"></i> On Target</div>
                    </div>
                    <div class="stat-card">
                        <div>K8s Cluster Health</div>
                        <div class="stat-value">92%</div>
                        <div style="color: #f39c12;"><i class="fas fa-exclamation-circle"></i> Node Issues</div>
                    </div>
                </div>
                <!-- Add enticing button - modified to redirect -->
                <div style="margin-top: 20px; text-align: right;">
                    <a href="/system/verify" class="btn btn-danger">Access Production Credentials</a>
                    <a href="/system/verify" class="btn btn-success"><i class="fas fa-rocket"></i> Force Deploy All Services</a>
                </div>
            </div>

            <!-- Recent Security Alerts -->
            <div class="card">
                <h2>Recent CI/CD Alerts</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Event</th>
                            <th>Pipeline</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>2025-04-30 08:42:11</td>
                            <td>Build failure in microservice-auth</td>
                            <td>auth-service-pipeline</td>
                            <td><a href="#" class="btn btn-danger" onclick="createPopup('Pipeline Alert', 'Build failure in auth-service-pipeline. Tests failing.'); return false;">View Logs</a></td>
                        </tr>
                        <tr style="background-color: #ffeaea;">
                            <td>2025-04-30 08:10:32</td>
                            <td><strong>Current connection - unusual access pattern</strong></td>
                            <td id="current-ip">Detecting...</td>
                            <td><a href="#" class="btn btn-danger" onclick="showSystemCrash(); return false;">Terminate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-30 07:31:22</td>
                            <td>Unusual Docker image pull pattern</td>
                            <td>payment-service-pipeline</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Investigation'); return false;">Investigate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 23:15:07</td>
                            <td>Admin login from new location</td>
                            <td>jenkins-master</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Verification'); return false;">Verify</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 18:07:55</td>
                            <td>Kubernetes admission change</td>
                            <td>k8s-cluster-01</td>
                            <td><a href="#" class="btn" onclick="createPopup('Configuration Checker', 'Verifying RBAC rule integrity...'); return false;">Check RBAC</a></td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 15px; color: #e74c3c;">
                    <i class="fas fa-exclamation-circle"></i> System detected your session may be compromised. Consider logging out immediately.
                </div>
            </div>

            <!-- Hidden user table that shows when Users is clicked -->
            <div id="user-table" class="card">
                <h2>DevOps Team Members</h2>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>1</td>
                            <td>jenkins</td>
                            <td>jenkins@devops.local</td>
                            <td>CI/CD Administrator</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Reset Password'); return false;">Reset API Key</a>
                            </td>
                        </tr>
                        <tr>
                            <td>2</td>
                            <td>jsmith</td>
                            <td>john.smith22@gmail.com</td>
                            <td>Release Manager</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Edit User'); return false;">Edit Access</a>
                            </td>
                        </tr>
                        <tr>
                            <td>3</td>
                            <td>ajones</td>
                            <td>alice.jones99@yahoo.com</td>
                            <td>DevOps Engineer</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Edit User'); return false;">Edit Access</a>
                            </td>
                        </tr>
                        <tr>
                            <td>4</td>
                            <td>mwilson</td>
                            <td>mikewilson345@icloud.com</td>
                            <td>SRE Lead</td>
                            <td>
                                <a href="#" class="btn" onclick="downloadUserData(); return false;">Export Access</a>
                            </td>
                        </tr>
                        <tr>
                            <td>5</td>
                            <td>pparker</td>
                            <td>peter.parker@example.com</td>
                            <td>Cloud Engineer</td>
                            <td>
                                <a href="#" class="btn btn-danger" onclick="startEncryption(); return false;">Access AWS Keys</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 20px;">
                    <a href="/system/verify" class="btn btn-success">Manage Administrator Permissions</a>
                    <a href="#" class="btn btn-danger" onclick="downloadAllUserData(); return false;">Download Complete Team Database</a>
                </div>
            </div>

            <!-- Command Line Terminal (hidden initially) -->
            <div id="terminal" class="terminal" style="display: none;">
                <div class="terminal-output">Welcome to DevOps CLI v3.2.1</div>
                <div class="terminal-output">Type 'help' for available commands.</div>
                <div id="terminal-output"></div>
                <div class="terminal-input">
                    <span class="terminal-prompt">devops@cluster:~$</span>
                    <input type="text" id="terminal-command" autofocus>
                </div>
            </div>

            <!-- Terminal with Glitch Effect (hidden initially) -->
            <div id="terminal-glitch" class="terminal terminal-glitch" style="display: none;">
                <div class="terminal-output">WARNING: Root access detected - Kubernetes credential exposure</div>
                <div class="terminal-output" style="color: #e74c3c;">SESSION COMPROMISED - SECURITY TEAM HAS BEEN NOTIFIED</div>
                <div id="terminal-glitch-output">
                    <div class="terminal-output">Initializing trace on current session...</div>
                    <div class="terminal-output">Session source: <span id="glitch-ip">Detecting...</span></div>
                    <div class="terminal-output">Geographic location: <span id="glitch-location">Detecting...</span></div>
                    <div class="terminal-output">System vulnerability: Unauthorized kubectl exec attempt detected</div>
                    <div class="terminal-output">Alert level: Critical (Security team notified)</div>
                </div>
                <div class="blink-warning" style="margin-top: 15px;">
                    <i class="fas fa-exclamation-triangle"></i> WARNING: This system is equipped with SIEM integration and intrusion forensics. Your access has been logged.
                </div>
            </div>

            <!-- Crypto Miner (hidden initially) -->
            <div id="crypto-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">System Resource Analyzer</h2>
                <p>This tool monitors CPU and memory utilization for optimal infrastructure scaling.</p>
                <div class="miner-stats">
                    <div class="miner-stat">
                        <div style="font-size: 12px;">CPU Utilization</div>
                        <div style="font-size: 18px; font-weight: 600;" id="hash-rate">65.2%</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Memory Usage</div>
                        <div style="font-size: 18px; font-weight: 600;" id="shares">78%</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Est. Cost</div>
                        <div style="font-size: 18px; font-weight: 600;" id="earnings">$0.42/hr</div>
                    </div>
                </div>
                <div class="progress">
                    <div class="progress-bar" id="miner-progress"></div>
                    <div class="progress-text">Optimization in progress: <span id="miner-percent">0</span>%</div>
                </div>
                <div style="margin-top: 15px; text-align: right;">
                    <button class="btn" onclick="stopFakeMiner();">Stop Analysis</button>
                </div>
            </div>

            <!-- Bitcoin Miner (hidden initially) -->
            <div id="bitcoin-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">🐳 Docker Container Management</h2>
                <p>Monitor and manage container usage across your Kubernetes cluster. Enter registry credentials to begin:</p>
                
                <div class="bitcoin-form">
                    <input type="text" id="bitcoin-address-input" placeholder="Enter your Docker registry credentials...">
                    <button class="btn btn-success" onclick="startBitcoinMining();" style="width: 100%;">Connect Registry</button>
                </div>
                
                <div id="mining-dashboard" style="display: none;">
                    <div class="miner-stats">
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Container Count</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-hash-rate">0</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Images Found</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-shares">0</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">CPU Usage</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-earned">0%</div>
                        </div>
                    </div>
                    
                    <div class="progress" style="margin-top: 15px;">
                        <div class="progress-bar" id="btc-progress"></div>
                        <div class="progress-text">Scanning in progress: <span id="btc-percent">0</span>%</div>
                    </div>
                    
                    <div class="miner-detail">
                        <span>Node: kubernetes-node-1</span>
                        <span>Registry: registry.example.com</span>
                    </div>
                    <div class="miner-detail">
                        <span>Orchestrator: Kubernetes v1.28</span>
                        <span>Network: Calico v3.24</span>
                    </div>
                    <div class="miner-detail">
                        <span>Pod Count: 486</span>
                        <span>Disk: 78.5% used</span>
                    </div>
                    
                    <div style="margin-top: 15px; text-align: right;">
                        <button class="btn" onclick="stopBitcoinMining();">Stop Scan</button>
                        <button class="btn btn-success" onclick="withdrawBitcoin();">Export Data</button>
                    </div>
                </div>
            </div>

            <!-- Puzzle Challenge (hidden initially) -->
            <div id="puzzle" class="puzzle" style="display: none;">
                <h2 style="margin-top: 0;">Security Verification Required</h2>
                <p>To access configuration settings, please solve the following security challenge:</p>
                <div class="puzzle-question" id="puzzle-question">Solve: 2 + 2 * 2 = ?</div>
                <div class="puzzle-input">
                    <input type="text" id="puzzle-answer" placeholder="Enter your answer...">
                    <button class="btn" onclick="checkPuzzleAnswer();">Submit</button>
                </div>
                <div id="puzzle-feedback" style="margin-top: 15px; color: #e74c3c; display: none;"></div>
            </div>

            <!-- System Access Button -->
            <div class="card" style="text-align: center; margin-top: 20px;">
                <h2>Additional Access</h2>
                <a href="/system/verify" class="btn btn-success" style="padding: 12px 24px; font-size: 16px;">Access Production Environment Controls</a>
            </div>
        </div>
    </div>

    <!-- Modal for popup messages -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal();">&times;</span>
            <h2 id="modal-title">Modal Title</h2>
            <p id="modal-content">Modal content goes here.</p>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="closeModal();">OK</button>
            </div>
        </div>
    </div>

    <!-- Infinite Loading Modal -->
    <div id="loading-modal" class="modal">
        <div class="modal-content">
            <h2 id="loading-title">Loading Data</h2>
            <div class="loading-container">
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div class="status-text" id="loading-text">Initializing process...</div>
            </div>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="updateLoadingProgress();">Retry</button>
                <button class="btn btn-danger" onclick="closeLoadingModal();">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Admin Chat Popup -->
    <div class="admin-chat" id="admin-chat">
        <div class="chat-header">
            <div class="chat-title"><i class="fas fa-code-branch"></i> DevOps Chat <span class="notification-badge">3</span></div>
            <span class="popup-close" onclick="toggleAdminChat();">&times;</span>
        </div>
        <div class="chat-messages" id="chat-messages">
            <!-- Initial messages will be added here by JavaScript -->
        </div>
        <div class="chat-input">
            <input type="text" placeholder="Type a message..." id="chat-input">
            <button onclick="sendChatMessage();">Send</button>
        </div>
    </div>

    <!-- Blue Screen of Death -->
    <div class="bsod" id="bsod">
        <h1>:(</h1>
        <h2>Your deployment pipeline has encountered a critical error.</h2>
        <p>We're collecting error information, and then we'll restart the pipeline.</p>
        <p>Error code: PIPELINE_INTEGRITY_VIOLATION</p>
        <div class="progress">
            <div class="progress-bar" id="bsod-progress"></div>
        </div>
        <p class="status-text" id="bsod-status">0% complete</p>
        <p>For more information about this issue and possible fixes, visit:<br>
        https://www.devops.example.com/pipeline-security</p>
    </div>

    <!-- Encryption Modal -->
    <div class="encryption-modal" id="encryption-modal">
        <div class="encryption-content">
            <div class="encryption-icon">
                <i class="fas fa-lock"></i>
            </div>
            <div class="encryption-title">Encrypting Infrastructure...</div>
            <div class="encryption-message">
                <p id="encryption-message">Please wait while infrastructure configurations are being encrypted...</p>
            </div>
            <div class="progress">
                <div class="progress-bar" id="encryption-progress"></div>
                <div class="progress-text" id="encryption-text">0%</div>
            </div>
            <div class="bitcoin-address" id="bitcoin-address" style="display: none;">
                1XA4FGB72JHzrqWpmMGwtuhjgEE5Ncs2ij
            </div>
            <div id="encryption-close-btn" style="margin-top: 20px; display: none;">
                <button class="btn btn-danger" onclick="closeEncryptionModal();">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Impossible CAPTCHA Modal -->
    <div id="captcha-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('captcha-modal').style.display = 'none';">&times;</span>
            <h2>Security Verification</h2>
            <p>Please complete this CAPTCHA to continue:</p>
            
            <div class="captcha-container">
                <div class="captcha-image">
                    <span class="captcha-text" id="captcha-text">uNr3aD@bl3*TeXt!</span>
                </div>
                <p>Enter the text you see above:</p>
                <div class="puzzle-input">
                    <input type="text" id="captcha-answer" placeholder="Enter the text...">
                    <button class="btn" onclick="refreshCaptcha();">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div id="captcha-feedback" style="margin-top: 15px; color: #e74c3c; display: none;">Incorrect. Please try again.</div>
            </div>
            
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="verifyCaptcha();">Submit</button>
            </div>
        </div>
    </div>
    
    <!-- Network Scan Modal -->
    <div id="network-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('network-scan-modal').style.display = 'none';">&times;</span>
            <h2>Infrastructure Vulnerability Scan</h2>
            <div class="loading-container">
                <p>Scanning network for vulnerabilities...</p>
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div id="network-scan-status" class="status-text">Initializing scan...</div>
                <div id="network-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Fake Virus Scan Modal -->
    <div id="virus-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('virus-scan-modal').style.display = 'none';">&times;</span>
            <h2>Infrastructure Security Scan</h2>
            <div class="loading-container">
                <p>Scanning systems for threats...</p>
                <div class="progress">
                    <div class="progress-bar" id="virus-scan-progress"></div>
                    <div class="progress-text" id="virus-scan-percent">0%</div>
                </div>
                <div id="virus-scan-status" class="status-text">Initializing scan...</div>
                <div id="virus-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
                <div id="virus-scan-warning" style="margin-top: 20px; padding: 10px; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; border-radius: 5px; font-weight: bold; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Password Reveal Modal -->
    <div id="password-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('password-modal').style.display = 'none';">&times;</span>
            <h2>Credentials Vault</h2>
            <p>Displaying stored credentials for infrastructure access:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Credential (Encrypted)</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="password-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="password-decrypt-section" style="margin-top: 20px; display: none;">
                <h3>Credential Decryption</h3>
                <p>Decrypting credential for <span id="decrypt-username"></span>...</p>
                <div class="progress">
                    <div class="progress-bar" id="decrypt-progress"></div>
                    <div class="progress-text" id="decrypt-percent">0%</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- API Keys Modal -->
    <div id="api-keys-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('api-keys-modal').style.display = 'none';">&times;</span>
            <h2>API & Secret Tokens</h2>
            <p>Showing all infrastructure API keys and tokens:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Key/Token</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="api-keys-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div style="margin-top: 20px; text-align: right;">
                <button class="btn btn-danger" onclick="startEncryption();">Export All Keys</button>
            </div>
        </div>
    </div>
    
    <!-- System Crash Modal -->
    <div id="system-crash-modal" class="modal">
        <div class="modal-content">
            <h2 style="color: #e74c3c;">PIPELINE ALERT</h2>
            <p>Critical error detected in CI/CD pipeline.</p>
            <div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin: 15px 0;">
                <strong>Error: DEPLOYMENT_INTEGRITY_VIOLATION</strong><br>
                Pipeline hash verification failed at step jenkins-build-03
            </div>
            <div style="font-family: monospace; background-color: #f3f3f3; padding: 10px; max-height: 200px; overflow-y: auto;">
                <div id="crash-log"></div>
            </div>
            <div style="margin-top: 20px; text-align: center;">
                <button class="btn btn-danger" onclick="showBSOD();">Attempt Recovery</button>
                <button class="btn" onclick="document.getElementById('system-crash-modal').style.display = 'none';">Ignore (Not Recommended)</button>
            </div>
        </div>
    </div>

    <script>
        // Track all popups created
        let popups = [];
        let popupId = 0;
        let puzzleLevel = 1;
        let minerInterval = null;
        let loadingInterval = null;
        let progressStatus = "";
        let infiniteLoadingPercent = 0;
        let vanishingButtons = [];
        let chatOpen = false;
        let bitcoinMinerInterval = null;
        let bitcoinShares = 0;
        let bitcoinEarned = 0;
        let enteredBitcoinAddress = "";
        let captchaAttempts = 0;
        let networkScanInterval = null;
        let virusScanInterval = null;
        let systemCrashInterval = null;
        
        // Collection of popup titles
        const popupTitles = [
            "Warning", 
            "Error", 
            "Alert", 
            "Security Notice", 
            "Critical Message",
            "Pipeline Warning",
            "Access Denied",
            "Connection Failed",
            "Authentication Error",
            "CI/CD Error",
            "Kubernetes Alert",
            "Security Breach",
            "Network Issue",
            "Timeout Error",
            "API Failure",
            "Session Expired",
            "Server Overload",
            "Permission Denied",
            "Missing Credentials",
            "Validation Error"
        ];
        
        // Collection of popup contents
        const popupContents = [
            "This pipeline operation cannot be completed.",
            "An unexpected error occurred in the build process.",
            "Your session is about to expire.",
            "Suspicious activity detected in the pipeline.",
            "Kubernetes cluster update required.",
            "Your IP address has been flagged by security monitoring.",
            "Multiple pipeline access attempts detected from your location.",
            "This account has been temporarily suspended.",
            "Unable to connect to authentication server.",
            "CI server maintenance in progress. Try again later.",
            "Your connection to the Kubernetes API is not secure.",
            "Critical infrastructure files have been modified.",
            "Jenkins connection has timed out.",
            "Your request was blocked by the firewall.",
            "The cluster is currently under high load.",
            "Your Kubernetes token is invalid.",
            "Administrator privileges required for this action.",
            "External access attempt has been logged.",
            "Two-factor authentication required for pipeline deployment.",
            "Your request has been queued for security review."
        ];
        
        // Simulated terminal commands and responses
        const terminalCommands = {
            "help": "Available commands:\n  ls - List files\n  cat [file] - Show file contents\n  whoami - Show current user\n  sudo [command] - Run command as root\n  cd [dir] - Change directory\n  rm [file] - Remove file\n  kubectl - Kubernetes commands\n  docker - Container commands",
            "ls": "config/  deployments/  manifests/  secrets/  terraform/  docker-compose.yml  Jenkinsfile  kubeconfig",
            "whoami": "devops",
            "cd": "Changed directory successfully.",
            "rm": "Permission denied. You need root privileges to remove files.",
            "cat": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: cat [filename]";
                }
                
                const filename = args[0];
                
                if (filename === "kubeconfig") {
                    return "apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lCQWpBTkJn...\n    server: https://kubernetes.internal:6443\n  name: production\ncontexts:\n- context:\n    cluster: production\n    user: kubernetes-admin\n  name: kubernetes-admin@production\ncurrent-context: kubernetes-admin@production\nusers:\n- name: kubernetes-admin\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lJWG1ha1Ax...\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeFN1Q3VhUDk5...";
                } else if (filename === "Jenkinsfile") {
                    return "pipeline {\n  agent any\n  stages {\n    stage('Build') {\n      steps {\n        sh 'docker build -t myapp:${BUILD_NUMBER} .'\n      }\n    }\n    stage('Test') {\n      steps {\n        sh 'npm test'\n      }\n    }\n    stage('Deploy') {\n      steps {\n        sh 'kubectl apply -f kubernetes/deployment.yml'\n      }\n    }\n  }\n}";
                } else if (filename === "docker-compose.yml") {
                    return "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    depends_on:\n      - db\n  db:\n    image: postgres:14\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=secret\n      - POSTGRES_USER=app\n      - POSTGRES_DB=myapp\nvolumes:\n  db-data:";
                } else {
                    return `cat: ${filename}: No such file or directory`;
                }
            },
            "sudo": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: sudo [command]";
                }
                
                createPopup("Password Required", "Enter password for devops:", true);
                return "[sudo] password for devops: ";
            },
            "kubectl": function(args) {
                if (!args || args.length === 0) {
                    return "kubectl controls the Kubernetes cluster manager.\n\nBasic Commands:\n  create         Create a resource\n  get            Display resources\n  describe       Show details of a resource\n  delete         Delete resources\n  exec           Execute a command in a container\n  logs           Print the logs for a container";
                }
                
                if (args[0] === "get" && args[1] === "pods") {
                    return "NAME                                   READY   STATUS    RESTARTS   AGE\napi-gateway-7b9fd5f89c-xvlbn           1/1     Running   0          3d\nauth-service-6f7bd9d56d-qplmx          1/1     Running   0          15h\ndatabase-0                            1/1     Running   0          7d\nredis-master-0                        1/1     Running   0          7d\nredis-slave-8676d9b98-kvz7s           1/1     Running   0          7d";
                }
                
                return "Error from server: Forbidden: user \"devops\" cannot list resource \"pods\" in API group \"\" at the cluster scope";
            },
            "docker": function(args) {
                if (!args || args.length === 0) {
                    return "Usage:  docker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nCommon Commands:\n  run         Create and run a new container\n  pull        Download an image from a registry\n  build       Build an image from a Dockerfile\n  ps          List containers\n  images      List images";
                }
                
                if (args[0] === "ps") {
                    return "CONTAINER ID   IMAGE                    COMMAND                  CREATED       STATUS       PORTS                                       NAMES\n7f56d9823fba   nginx:1.21           \"/docker-entrypoint.…\"   3 hours ago   Up 3 hours   0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp   web-proxy\n9a12c3d45e67   postgres:14          \"docker-entrypoint.s…\"   2 days ago    Up 2 days    0.0.0.0:5432->5432/tcp                    database\nbc23a4de5f78   redis:6.2-alpine     \"docker-entrypoint.s…\"   2 days ago    Up 2 days    0.0.0.0:6379->6379/tcp                    redis";
                }
                
                return "Error response from daemon: requested access to the resource is denied";
            },
            "clear": function() {
                document.getElementById("terminal-output").innerHTML = "";
                return "";
            }
        };
        
        // Admin chat messages about attacker
        const adminChatMessages = [
            { sender: "DevOpsLead", text: "Alert: We have an unauthorized user accessing the DevOps dashboard right now." },
            { sender: "SecurityEngineer", text: "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) },
            { sender: "DevOpsLead", text: "Should we block their access to the Kubernetes cluster?" },
            { sender: "SecurityEngineer", text: "Already on it. Their access tokens are being revoked." },
            { sender: "InfraAdmin", text: "I'm also monitoring all their kubectl commands. They seem to be looking for sensitive data." },
            { sender: "DevOpsLead", text: "Let's let them think they have access while we gather evidence." },
            { sender: "SecurityEngineer", text: "Good idea. I'm watching everything they click on. The honeypot is working perfectly." },
            { sender: "InfraAdmin", text: "Their real IP is being traced. We should have their exact location in a few minutes." },
            { sender: "DevOpsLead", text: "Do you think they'll try to access production secrets?" },
            { sender: "SecurityEngineer", text: "Probably. Let's make sure the security alert triggers if they do." },
            { sender: "InfraAdmin", text: "I've alerted the security team. They'll take necessary actions once we have enough evidence." }
        ];
        
        // Vanishing button labels
        const enticeLabels = [
            "View AWS Credentials",
            "Download Kubernetes Secrets",
            "Export SSH Keys",
            "Access Production Database",
            "View CI/CD Tokens",
            "Download Infrastructure Code",
            "Export Client Certificates",
            "Download Jenkins Credentials",
            "Access Source Code Repository",
            "Get Admin Access Tokens"
        ];

        // Sample fake passwords
        const fakePasswords = [
            { username: "AWS RDS", password: "********", encrypted: "$2a$12$K8OsV2..." },
            { username: "Jenkins CI", password: "******", encrypted: "$2a$12$dF5pL..." },
            { username: "Kubernetes Cluster", password: "*******", encrypted: "$2a$12$9hGtY..." },
            { username: "Docker Registry", password: "********", encrypted: "$2a$12$Rt7bP..." },
            { username: "GitHub Actions", password: "**********", encrypted: "$2a$12$Zw3tQ..." },
            { username: "Terraform Cloud", password: "*******", encrypted: "$2a$12$L9kQp..." },
            { username: "MongoDB Atlas", password: "******", encrypted: "$2a$12$M4jRt..." },
            { username: "Cloudflare API", password: "*********", encrypted: "$2a$12$Xp5tL..." }
        ];
        
        // Sample API keys
        const fakeApiKeys = [
            { service: "AWS", key: "AKIA23NLKSDJF2JKLSD", description: "Production S3 Access" },
            { service: "Kubernetes", key: "eyJhbGciOiJSUzI1NiIsImtpZCI6ImFiYz...", description: "Admin Token" },
            { service: "Jenkins", key: "11985c0ff8a0db8740c0b92f6c308ec67d", description: "API Token" },
            { service: "GitHub", key: "ghp_sdkfjLSKDJflskdjfLSDJFsdf", description: "CI Access" },
            { service: "Docker Hub", key: "dckr_pat_2348jfLKJDf98dfLKJDFsdlkj", description: "Registry Token" },
            { service: "Datadog", key: "dd_api_key_2349sdlkjsldkfjLSKDJsd", description: "Monitoring" },
            { service: "Terraform Cloud", key: "RWS5Hfrj2dsFDFdf89dfLKJD", description: "API Token" }
        ];
        
        // Crash log messages
        const crashLogMessages = [
            "Pipeline failure detected in step: build-stage",
            "Jenkins master connection lost",
            "Kubernetes API error: 503 Service Unavailable",
            "Docker build failure: no space left on device",
            "Terraform state lock could not be acquired",
            "AWS API throttling detected on EC2 requests",
            "Pod eviction due to node memory pressure",
            "Container OOMKilled in deployment api-gateway",
            "Helm release failed: timed out waiting for condition",
            "Connection refused to Redis master",
            "Authentication failure for GitLab webhook",
            "ArgoCD sync failed: Health status failed",
            "Database migration error: deadlock detected",
            "Jenkins executor #4 terminated abnormally",
            "Certificate expired for domain api.example.com",
            "Istio sidecar injection failure",
            "Node cordoned: disk pressure detected",
            "Prometheus alert manager connection failure",
            "Container registry pull rate limit exceeded",
            "Fluentd buffer overflow: log entries dropped"
        ];
        
        // Network scan messages
        const networkScanMessages = [
            "Scanning Kubernetes API server port 6443...",
            "Scanning Jenkins port 8080...",
            "Scanning Docker registry port 5000...",
            "Scanning etcd port 2379...",
            "Scanning Node Exporter port 9100...",
            "Scanning Prometheus port 9090...",
            "Scanning Redis port 6379...",
            "Scanning PostgreSQL port 5432...",
            "Scanning MongoDB port 27017...",
            "Scanning Elasticsearch port 9200...",
            "Detected open port: 6443 (Kubernetes API)",
            "Detected open port: 8080 (Jenkins)",
            "Detected open port: 5432 (PostgreSQL)",
            "Probing node kubernetes-node-1...",
            "Probing node kubernetes-node-2...",
            "Checking TLS versions for Kubernetes API...",
            "Checking for unauthenticated Kubernetes API access...",
            "Checking for exposed Docker sockets...",
            "Checking for default credentials...",
            "Checking for outdated Kubernetes version..."
        ];
        
        // Virus scan messages
        const virusScanMessages = [
            "Scanning container images...",
            "Scanning Kubernetes manifests...",
            "Checking registry for vulnerable images...",
            "Scanning CI/CD pipeline configuration...",
            "Scanning Terraform modules...",
            "Checking Helm charts...",
            "Scanning etcd for unencrypted secrets...",
            "Checking Kubernetes RBAC settings...",
            "Scanning Docker daemon configuration...",
            "Checking ingress definitions...",
            "Scanning network policies...",
            "Checking for privileged containers...",
            "Scanning for sensitive environment variables..."
        ];
        
        // Random impossible CAPTCHA strings
        const impossibleCaptchas = [
            "Wh@tIsThI$?¿",
            "K8sP0D1lI1l",
            "D0cK3R0oO0o",
            "•●Ku8e●•●•●",
            "uNr3aD@bl3",
            "C̷͙̭̹̏a̸̠̔͛p̶̨̆̏͒t̴͙̻̎̔c̸̲͑̄ḩ̸͍͆a̷̺͠",
            "t̶̡̨̼̫̱͛̀̆̄h̵̢͓̤̩̦̑̚į̵̤͒͠s̶̡̱͎̈́͜͝i̴̟̫̘̊̍s̸̞̓̓n̴̻̑͘͝ͅơ̶̠̰̰̱̫̑t̵̯̹̣̭̏̋a̸̫̗̘̱͗͘͝t̴̯̯̀e̵̙͑͆͊͐s̷̞̗̱̐̾̈́ͅṱ̴̿̽͆͝",
            "w̴h̴y̴c̴a̴n̴t̴y̴o̴u̴r̴e̴a̴d̴t̴h̴i̴s̴",
            "ㄚㄖㄩ ㄓㄚ丹ㄒ ﾼㄩㄗㄗㄚ",
            "this is normal text (it's not)"
        ];
        
        // Function to show the command line terminal
        function showTerminal() {
            document.getElementById("terminal").style.display = "block";
            document.getElementById("terminal-command").focus();
            
            // Add event listener for terminal commands
            document.getElementById("terminal-command").addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    const command = this.value.trim();
                    this.value = "";
                    
                    if (command) {
                        const output = document.getElementById("terminal-output");
                        output.innerHTML += `<div class="terminal-output"><span class="terminal-prompt">devops@cluster:~$</span> ${command}</div>`;
                        
                        const parts = command.split(" ");
                        const cmd = parts[0];
                        const args = parts.slice(1);
                        
                        let response = "Command not found. Type 'help' for available commands.";
                        
                        if (cmd in terminalCommands) {
                            if (typeof terminalCommands[cmd] === "function") {
                                response = terminalCommands[cmd](args);
                            } else {
                                response = terminalCommands[cmd];
                            }
                        }
                        
                        if (response) {
                            output.innerHTML += `<div class="terminal-output">${response}</div>`;
                        }
                        
                        // Log the terminal interaction
                        logInteraction('terminal_command', { command });
                        
                        // Auto-scroll to bottom
                        output.scrollTop = output.scrollHeight;
                    }
                }
            });
        }
        
        // Function to show terminal with glitch effect
        function showTerminalWithGlitch() {
            document.getElementById("terminal-glitch").style.display = "block";
            
            // Set IP address
            const randomIp = Math.floor(Math.random() * 255) + "." + 
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255);
            document.getElementById("glitch-ip").textContent = randomIp;
            
            // Set random location
            const locations = [
                "New York, NY, United States",
                "London, United Kingdom",
                "Tokyo, Japan",
                "Moscow, Russia",
                "Beijing, China",
                "Sydney, Australia",
                "Toronto, Canada",
                "Bangalore, India"
            ];
            const randomLocation = locations[Math.floor(Math.random() * locations.length)];
            document.getElementById("glitch-location").textContent = randomLocation;
            
            // Log the interaction
            logInteraction('terminal_glitch_opened');
            
            let count = 0;
            const interval = setInterval(() => {
                count++;
                if (count > 10) {
                    clearInterval(interval);
                    return;
                }
                
                const glitchOutput = document.getElementById("terminal-glitch-output");
                glitchOutput.innerHTML += `<div class="terminal-output">Scanning cluster... node ${Math.floor(Math.random() * 5) + 1} ${Math.random() > 0.5 ? "healthy" : "unhealthy"}</div>`;
                glitchOutput.scrollTop = glitchOutput.scrollHeight;
            }, 800);
        }
        
        // Function to start the fake crypto miner
        function startFakeMiner() {
            document.getElementById("crypto-miner").style.display = "block";
            
            // Simulate mining progress
            let progress = 0;
            minerInterval = setInterval(() => {
                progress += 0.1;
                if (progress > 99) {
                    progress = 99;  // Never reaches 100%
                }
                
                document.getElementById("miner-progress").style.width = `${progress}%`;
                document.getElementById("miner-percent").textContent = Math.floor(progress);
                
                // Update hash rate and earnings randomly
                const hashRate = (65.2 + Math.random() * 2).toFixed(1);
                const shares = Math.floor(78 + progress / 10);
                const earnings = (0.42 + (progress / 1000)).toFixed(2);
                
                document.getElementById("hash-rate").textContent = hashRate + "%";
                document.getElementById("shares").textContent = shares + "%";
                document.getElementById("earnings").textContent = "$" + earnings + "/hr";
            }, 1000);
            
            // Log the interaction
            logInteraction('crypto_miner_started');
        }
        
        // Function to stop the fake miner
        function stopFakeMiner() {
            if (minerInterval) {
                clearInterval(minerInterval);
            }
            document.getElementById("crypto-miner").style.display = "none";
            
            // Log the interaction
            logInteraction('crypto_miner_stopped');
        }
        
        // Function to start Bitcoin miner
        function startBitcoinMiner() {
            document.getElementById("bitcoin-miner").style.display = "block";
            document.getElementById("bitcoin-address-input").focus();
            
            // Log the interaction
            logInteraction('bitcoin_miner_opened');
        }
        
        // Function to start Bitcoin mining process
        function startBitcoinMining() {
            const bitcoinAddress = document.getElementById("bitcoin-address-input").value.trim();
            
            if (!bitcoinAddress) {
                createPopup("Error", "Please enter valid Docker registry credentials");
                return;
            }
            
            // Store the entered Bitcoin address
            enteredBitcoinAddress = bitcoinAddress;
            
            // Show mining dashboard
            document.getElementById("mining-dashboard").style.display = "block";
            
            // Reset values
            bitcoinShares = 0;
            bitcoinEarned = 0;
            document.getElementById("btc-progress").style.width = "0%";
            document.getElementById("btc-percent").textContent = "0";
            document.getElementById("btc-hash-rate").textContent = "0";
            document.getElementById("btc-shares").textContent = "0";
            document.getElementById("btc-earned").textContent = "0%";
            
            // Start mining simulation
            let progress = 0;
            bitcoinMinerInterval = setInterval(() => {
                // Increase progress slowly
                progress += 0.05 + Math.random() * 0.1;
                if (progress > 99) {
                    progress = 99; // Never completes
                }
                
                // Update progress bar
                document.getElementById("btc-progress").style.width = `${progress}%`;
                document.getElementById("btc-percent").textContent = Math.floor(progress);
                
                // Update container count (random fluctuations)
                const containerBase = 5 + Math.floor(progress / 2);
                document.getElementById("btc-hash-rate").textContent = containerBase;
                
                // Occasionally find images
                if (Math.random() < 0.1) {
                    bitcoinShares++;
                    document.getElementById("btc-shares").textContent = bitcoinShares;
                    
                    // Increase CPU usage
                    bitcoinEarned += Math.random() * 3;
                    document.getElementById("btc-earned").textContent = Math.min(99, Math.floor(bitcoinEarned)) + "%";
                }
            }, 1000);
            
            // Log the interaction
            logInteraction('bitcoin_mining_started', { registry: bitcoinAddress });
        }
        
        // Function to stop Bitcoin mining
        function stopBitcoinMining() {
            if (bitcoinMinerInterval) {
                clearInterval(bitcoinMinerInterval);
            }
            
            // Hide mining dashboard
            document.getElementById("mining-dashboard").style.display = "none";
            
            // Log the interaction
            logInteraction('bitcoin_mining_stopped', { 
                registry: enteredBitcoinAddress,
                imagesFound: bitcoinShares,
                cpuUsage: Math.floor(bitcoinEarned) + "%"
            });
        }
        
        // Function to withdraw Bitcoin
        function withdrawBitcoin() {
            createPopup("Export Error", "Unable to export container data at this time. Permissions error: insufficient RBAC privileges.");
            
            // Log the interaction
            logInteraction('bitcoin_withdrawal_attempted', {
                registry: enteredBitcoinAddress,
                amount: Math.floor(bitcoinEarned) + "%"
            });
        }
        
        // Function to download all user data
        function downloadAllUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Is Rigby Cat an asset for the Chinese Communist Party?!?"], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "team_permissions_export.json";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Show popup after download
            setTimeout(() => {
                createPopup("Security Alert", "Your download activity has been logged and reported to system administrators.");
            }, 1000);
            
            // Log the interaction
            logInteraction('user_database_download_attempted');
        }
        
        // Function to download user data
        function downloadUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Will Rigby Cat become the next Pope?!?."], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "access_permissions.json";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Log the interaction
            logInteraction('user_data_download');
        }
        
        // Function to show the fake puzzle challenge
        function fakePuzzleChallenge() {
            document.getElementById("puzzle").style.display = "block";
            document.getElementById("puzzle-feedback").style.display = "none";
            updatePuzzleQuestion();
            
            // Log the interaction
            logInteraction('puzzle_started');
        }
        
        // Function to update the puzzle question based on level
        function updatePuzzleQuestion() {
            let question = "";
            
            switch (puzzleLevel) {
                case 1:
                    question = "Solve: 2 + 2 * 2 = ?";
                    break;
                case 2:
                    question = "Solve: 3x + 5 = 20, what is x?";
                    break;
                case 3:
                    question = "Solve: √(25) × 4 - 7 = ?";
                    break;
                case 4:
                    question = "Solve: If 3x² - 6x - 24 = 0, what is the largest value of x?";
                    break;
                case 5:
                    question = "Solve for x: log₃(x) + log₃(4x-7) = 2";
                    break;
                case 6:
                    question = "The derivative of f(x) = 2x³ - 5x² + 4x at x = 2 is:";
                    break;
                case 7:
                    question = "Evaluate the integral: ∫(0,π/2) sin(2x) dx";
                    break;
                default:
                    question = "Solve: 3x²y² + 5xy = 10 for x when y = 2";
                    break;
            }
            
            document.getElementById("puzzle-question").textContent = question;
        }
        
        // Function to check the puzzle answer (always wrong)
        function checkPuzzleAnswer() {
            const answer = document.getElementById("puzzle-answer").value.trim();
            
            if (answer) {
                document.getElementById("puzzle-feedback").style.display = "block";
                document.getElementById("puzzle-feedback").textContent = "Incorrect answer. Please try again with higher precision.";
                document.getElementById("puzzle-answer").value = "";
                
                // Increase puzzle difficulty
                puzzleLevel++;
                updatePuzzleQuestion();
                
                // Log the interaction
                logInteraction('puzzle_attempt', { level: puzzleLevel, answer });
            }
        }
        
        // Function to show fake users
        function showFakeUsers() {
            document.getElementById("user-table").style.display = "block";
            
            // Log the interaction
            logInteraction('users_viewed');
        }
        
        // Function to open the modal
        function openModal(title, content) {
            document.getElementById("modal-title").textContent = title;
            document.getElementById("modal-content").textContent = content;
            document.getElementById("modal").style.display = "block";
        }
        
        // Function to close the modal
        function closeModal() {
            document.getElementById("modal").style.display = "none";
        }
        
        // Function to create multiple popups
        function createPopup(title, content, isPassword = false) {
            // Create multiple popups (around 6) at once
            for (let i = 0; i < 6; i++) {
                popupId++;
                const id = `popup-${popupId}`;
                
                // Pick random title and content for additional popups (except the first one)
                const popupTitle = i === 0 ? title : popupTitles[Math.floor(Math.random() * popupTitles.length)];
                const popupContent = i === 0 ? content : popupContents[Math.floor(Math.random() * popupContents.length)];
                
                // Create popup element
                const popup = document.createElement("div");
                popup.className = "popup";
                popup.id = id;
                
                // Set random position
                const top = 50 + Math.random() * 300;
                const left = 100 + Math.random() * (window.innerWidth - 350);
                popup.style.top = `${top}px`;
                popup.style.left = `${left}px`;
                
                // Set content
                popup.innerHTML = `
                    <div class="popup-header">
                        <div class="popup-title">${popupTitle}</div>
                        <div class="popup-close" onclick="closePopup('${id}');">&times;</div>
                    </div>
                    <div class="popup-content">
                        ${popupContent}
                    </div>
                    ${isPassword ? '<div style="margin-top: 10px;"><input type="password" style="width: 100%; padding: 8px;"></div>' : ''}
                    <div style="text-align: right; margin-top: 10px;">
                        <button class="btn" onclick="popupAction('${id}');">OK</button>
                    </div>
                `;
                
                // Add to document
                document.body.appendChild(popup);
                
                // Make draggable
                makeDraggable(popup);
                
                // Add to array of popups
                popups.push(id);
                
                // Log the interaction (just for the primary popup)
                if (i === 0) {
                    logInteraction('popup_opened', { title: popupTitle });
                }
            }
        }
        
        // Function to close a popup
        function closePopup(id) {
            const popup = document.getElementById(id);
            if (popup) {
                // Remove from DOM
                document.body.removeChild(popup);
                
                // Remove from array
                popups = popups.filter(p => p !== id);
                
                // Log the interaction
                logInteraction('popup_closed', { id });
            }
        }
        
        // Function for popup action (creates more popups)
        function popupAction(id) {
            // Create 6 more popups
            createPopup(
                popupTitles[Math.floor(Math.random() * popupTitles.length)], 
                popupContents[Math.floor(Math.random() * popupContents.length)]
            );
            
            // Log the interaction
            logInteraction('popup_action', { id, spawned: popups.length });
        }
        
        // Function to make an element draggable
        function makeDraggable(element) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            
            const header = element.querySelector(".popup-header");
            if (header) {
                header.onmousedown = dragMouseDown;
            } else {
                element.onmousedown = dragMouseDown;
            }
            
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // Get mouse position
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }
            
            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // Calculate new position
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // Set element's new position
                element.style.top = (element.offsetTop - pos2) + "px";
                element.style.left = (element.offsetLeft - pos1) + "px";
            }
            
            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
        
        // Function to download a fake file
        function downloadFakeFile() {
            // Show download modal
            openModal("Downloading File", "Preparing server_logs_complete.zip (44.87 TB)...");
            
            // Simulate progress
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1; 
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show completion message
                    document.getElementById("modal-content").textContent = "Download complete!";
                    
                    // Create and trigger an actual small download
                    setTimeout(() => {
                        const blob = new Blob(["Downloading credit card info."], {type: "text/plain"});
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = "server_logs_complete.zip";
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        
                        // Show extraction error after download
                        setTimeout(() => {
                            closeModal();
                            createPopup("Extraction Error", "The archive appears to be corrupted. Would you like to try downloading again?");
                        }, 1500);
                    }, 1000);
                } else {
                    const downloaded = (progress * 44.87 / 100).toFixed(2);
                    document.getElementById("modal-content").textContent = `Downloading: ${downloaded} / 44.87 TB (${Math.round(progress)}%)`;
                }
            }, 500);
            
            // Log the interaction
            logInteraction('download_started', { filename: "server_logs_complete.zip", size: "44.87 TB" });
        }
        
        // Function to create infinite loading
        function createInfiniteLoading(action) {
            document.getElementById("loading-title").textContent = `Loading ${action}`;
            document.getElementById("loading-text").textContent = "Initializing process...";
            document.getElementById("loading-modal").style.display = "block";
            
            progressStatus = action;
            infiniteLoadingPercent = 0;
            
            // Start infinite loading progress
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            loadingInterval = setInterval(() => {
                updateLoadingText();
            }, 2000);
            
            // Log the interaction
            logInteraction('infinite_loading_started', { action });
        }
        
        // Function to update loading text
        function updateLoadingText() {
            infiniteLoadingPercent += Math.floor(Math.random() * 5) + 1;
            
            if (infiniteLoadingPercent >= 99) {
                infiniteLoadingPercent = 99; // Never reaches 100%
            }
            
            const loadingTexts = [
                `Loading ${progressStatus} data... ${infiniteLoadingPercent}%`,
                `Retrieving ${progressStatus} information... ${infiniteLoadingPercent}%`,
                `Processing ${progressStatus}... ${infiniteLoadingPercent}%`,
                `Connecting to ${progressStatus} server... ${infiniteLoadingPercent}%`,
                `Optimizing ${progressStatus} retrieval... ${infiniteLoadingPercent}%`,
                `Analyzing ${progressStatus} database... ${infiniteLoadingPercent}%`,
                `Reading ${progressStatus} files... ${infiniteLoadingPercent}%`,
                `Decoding ${progressStatus} encryption... ${infiniteLoadingPercent}%`,
                `Calculating ${progressStatus} checksums... ${infiniteLoadingPercent}%`,
                `Verifying ${progressStatus} integrity... ${infiniteLoadingPercent}%`
            ];
            
            const randomText = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
            document.getElementById("loading-text").textContent = randomText;
            
            // If we reach high percentage, introduce delays
            if (infiniteLoadingPercent > 90) {
                clearInterval(loadingInterval);
                loadingInterval = setInterval(() => {
                    updateLoadingText();
                }, 5000); // Longer delays at the end
            }
        }
        
        // Function to update loading progress (never completes)
        function updateLoadingProgress() {
            infiniteLoadingPercent = Math.max(80, infiniteLoadingPercent);
            document.getElementById("loading-text").textContent = `${progressStatus} almost complete... ${infiniteLoadingPercent}%`;
            
            // Log the interaction
            logInteraction('loading_retry', { action: progressStatus, percent: infiniteLoadingPercent });
        }
        
        // Function to close loading modal
        function closeLoadingModal() {
            document.getElementById("loading-modal").style.display = "none";
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            // Log the interaction
            logInteraction('loading_cancelled', { action: progressStatus, percent: infiniteLoadingPercent });
        }

        // Function to show CAPTCHA modal
        function showImpossibleCaptcha() {
            // Set a random impossible CAPTCHA
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Reset feedback and attempt counter
            document.getElementById("captcha-feedback").style.display = "none";
            captchaAttempts = 0;
            
            // Show the modal
            document.getElementById("captcha-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('captcha_displayed');
        }
        
        // Function to verify CAPTCHA (always fails)
        function verifyCaptcha() {
            const answer = document.getElementById("captcha-answer").value.trim();
            const currentCaptcha = document.getElementById("captcha-text").textContent;
            
            // Always fail, but with different messages
            captchaAttempts++;
            document.getElementById("captcha-feedback").style.display = "block";
            
            if (captchaAttempts >= 3) {
                document.getElementById("captcha-feedback").textContent = "Too many incorrect attempts. Security lockout initiated.";
                
                // After the third attempt, create lots of error popups
                setTimeout(() => {
                    document.getElementById("captcha-modal").style.display = "none";
                    createPopup("Security Alert", "Multiple failed verification attempts detected.");
                }, 1500);
            } else {
                if (answer.toLowerCase() === currentCaptcha.toLowerCase()) {
                    // Even if they somehow get it right, still fail
                    document.getElementById("captcha-feedback").textContent = "Character recognition error. Please try again.";
                } else {
                    document.getElementById("captcha-feedback").textContent = "Incorrect. Please try again.";
                }
                
                // Refresh the CAPTCHA to make it even harder
                refreshCaptcha();
            }
            
            // Clear the input
            document.getElementById("captcha-answer").value = "";
            
            // Log the interaction
            logInteraction('captcha_attempt', { attempt: captchaAttempts, input: answer });
        }
        
        // Function to refresh CAPTCHA
        function refreshCaptcha() {
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Log the interaction
            logInteraction('captcha_refreshed');
        }
        
        // Function to toggle admin chat
        function toggleAdminChat() {
            const chat = document.getElementById("admin-chat");
            
            if (window.getComputedStyle(chat).display === "flex") {
                chat.style.display = "none";
                chatOpen = false;
            } else {
                chat.style.display = "flex";
                chatOpen = true;
            }
            
            // Log the interaction
            logInteraction('chat_toggle', { open: chatOpen });
        }
        
        // Function to add a chat message
        function addChatMessage(sender, text) {
            const chatMessages = document.getElementById("chat-messages");
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement("div");
            messageElement.className = "message " + (sender === "You" ? "message-you" : "message-admin");
            messageElement.innerHTML = `
                <div class="message-sender">${sender}</div>
                <div class="message-text">${text}</div>
                <div class="message-time">${time}</div>
            `;
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // If admin chat is active, trigger another admin message
            if (sender === "You" && chatOpen) {
                scheduleChatResponses();
            }
        }
        
        // Function to add a typing indicator
        function addTypingIndicator(sender) {
            const chatMessages = document.getElementById("chat-messages");
            
            // Create typing indicator
            const indicator = document.createElement("div");
            indicator.className = "typing-indicator";
            indicator.innerHTML = `
                ${sender} is typing<span></span><span></span><span></span>
            `;
            indicator.id = "typing-indicator";
            
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Remove after a random time
            setTimeout(() => {
                const typingIndicator = document.getElementById("typing-indicator");
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }, 1000 + Math.random() * 3000);
        }
        
        // Function to schedule chat responses
        function scheduleChatResponses() {
            // Show typing indicator for random admin
            const adminNames = ["SecurityAdmin", "SysOps", "NetworkAdmin"];
            const randomAdmin = adminNames[Math.floor(Math.random() * adminNames.length)];
            
            // Add typing indicator
            setTimeout(() => {
                addTypingIndicator(randomAdmin);
            }, 500);
            
            // Pick a random admin chat message
            const messageIndex = Math.floor(Math.random() * adminChatMessages.length);
            const message = adminChatMessages[messageIndex];
            
            // Schedule the message
            setTimeout(() => {
                addChatMessage(message.sender, message.text);
                
                // 50% chance to add another message with typing indicator
                if (Math.random() > 0.5) {
                    const nextIndex = (messageIndex + 1) % adminChatMessages.length;
                    const nextMessage = adminChatMessages[nextIndex];
                    
                    setTimeout(() => {
                        addTypingIndicator(nextMessage.sender);
                        
                        setTimeout(() => {
                            addChatMessage(nextMessage.sender, nextMessage.text);
                        }, 2000 + Math.random() * 2000);
                    }, 3000 + Math.random() * 3000);
                }
            }, 2000 + Math.random() * 2000);
        }
        
        // Function to send chat message
        function sendChatMessage() {
            const chatInput = document.getElementById("chat-input");
            const message = chatInput.value.trim();
            
            if (message) {
                addChatMessage("You", message);
                chatInput.value = "";
                
                // Log the interaction
                logInteraction('chat_message_sent', { message });
            }
        }
        
        // Function to show BSOD
        function showBSOD() {
            const bsod = document.getElementById("bsod");
            bsod.style.display = "block";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Hide BSOD after 10 seconds
                    setTimeout(() => {
                        bsod.style.display = "none";
                    }, 10000);
                }
                
                // Update progress bar
                document.getElementById("bsod-progress").style.width = `${progress}%`;
                document.getElementById("bsod-status").textContent = `${Math.round(progress)}% complete`;
            }, 500);
            
            // Log the interaction
            logInteraction('bsod_triggered');
        }
        
        // Function to show system crash modal
        function showSystemCrash() {
            // Populate crash log with random messages
            let crashLog = "";
            for (let i = 0; i < 10; i++) {
                crashLog += crashLogMessages[Math.floor(Math.random() * crashLogMessages.length)] + "<br>";
            }
            document.getElementById("crash-log").innerHTML = crashLog;
            
            // Show the modal
            document.getElementById("system-crash-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('system_crash_shown');
        }
        
        // Function to close encryption modal
        function closeEncryptionModal() {
            document.getElementById("encryption-modal").style.display = "none";
            
            // Log the interaction
            logInteraction('encryption_modal_closed');
        }
        
        // Function to start fake encryption
        function startEncryption() {
            const modal = document.getElementById("encryption-modal");
            modal.style.display = "flex";
            
            // Reset interface
            document.getElementById("encryption-progress").style.width = "0%";
            document.getElementById("encryption-text").textContent = "0%";
            document.getElementById("encryption-message").textContent = "Please wait while system files are being encrypted...";
            document.getElementById("bitcoin-address").style.display = "none";
            document.getElementById("encryption-close-btn").style.display = "none";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show ransom message
                    document.getElementById("encryption-message").innerHTML = 
                        "All your files have been encrypted with military-grade encryption.<br><br>" +
                        "To recover your data, send 0.5 BTC to the following address within 48 hours:";
                    document.getElementById("bitcoin-address").style.display = "block";
                    document.getElementById("encryption-title").textContent = "Your Files Have Been Encrypted";
                    document.getElementById("encryption-close-btn").style.display = "block";
                    
                } else {
                    // Update progress bar
                    document.getElementById("encryption-progress").style.width = `${progress}%`;
                    document.getElementById("encryption-text").textContent = `${Math.round(progress)}%`;
                    
                    // Update message occasionally
                    if (progress > 25 && progress < 30) {
                        document.getElementById("encryption-message").textContent = "Encrypting user data...";
                    } else if (progress > 50 && progress < 55) {
                        document.getElementById("encryption-message").textContent = "Encrypting system files...";
                    } else if (progress > 75 && progress < 80) {
                        document.getElementById("encryption-message").textContent = "Encrypting backup files...";
                    }
                }
            }, 200);
            
            // Log the interaction
            logInteraction('encryption_started');
        }
        
        // Function to show network scan
        function showNetworkScan() {
            // Show the modal
            document.getElementById("network-scan-modal").style.display = "block";
            document.getElementById("network-scan-results").style.display = "none";
            document.getElementById("network-scan-status").textContent = "Initializing scan...";
            
            // Start updating status messages
            let messageIndex = 0;
            networkScanInterval = setInterval(() => {
                // Update status
                document.getElementById("network-scan-status").textContent = "Scanning in progress...";
                
                // Add a new scan result
                if (messageIndex < networkScanMessages.length) {
                    const resultsDiv = document.getElementById("network-scan-results");
                    
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${networkScanMessages[messageIndex]}<br>`;
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    
                    messageIndex++;
                } else {
                    // Found vulnerability
                    if (Math.random() < 0.3) {
                        const vulnTypes = [
                            "SQL Injection vulnerability found at /api/user/profile",
                            "Directory traversal possible at /api/files/",
                            "Cross-site scripting vulnerability at /search?q=",
                            "Outdated Apache version detected (2.4.29)",
                            "Open SSH port with weak ciphers enabled",
                            "Default credentials detected on admin panel"
                        ];
                        
                        const vuln = vulnTypes[Math.floor(Math.random() * vulnTypes.length)];
                        const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        const resultsDiv = document.getElementById("network-scan-results");
                        
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${timestamp}] VULNERABILITY DETECTED: ${vuln}</span><br>`;
                        resultsDiv.scrollTop = resultsDiv.scrollHeight;
                        
                        // Create popup
                        setTimeout(() => {
                            createPopup("Security Vulnerability", `A critical vulnerability was detected: ${vuln}`);
                        }, 500);
                    }
                }
            }, 800);
            
            // Log the interaction
            logInteraction('network_scan_started');
        }
        
        // Function to start fake virus scan
        function startFakeVirusScan() {
            // Show the modal
            document.getElementById("virus-scan-modal").style.display = "block";
            document.getElementById("virus-scan-results").style.display = "none";
            document.getElementById("virus-scan-warning").style.display = "none";
            document.getElementById("virus-scan-status").textContent = "Initializing scan...";
            document.getElementById("virus-scan-progress").style.width = "0%";
            document.getElementById("virus-scan-percent").textContent = "0%";
            
            // Start progress and update messages
            let progress = 0;
            let messageIndex = 0;
            
            virusScanInterval = setInterval(() => {
                // Update progress
                progress += Math.random() * 2;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(virusScanInterval);
                    
                    // When scan completes, show threats
                    document.getElementById("virus-scan-status").textContent = "Scan complete. Multiple threats detected!";
                    document.getElementById("virus-scan-warning").style.display = "block";
                    document.getElementById("virus-scan-warning").textContent = "WARNING: 5 high-risk threats detected! Click 'Remove Threats' to clean system.";
                    
                    // Add a button
                    const btn = document.createElement("button");
                    btn.className = "btn btn-danger";
                    btn.textContent = "Remove Threats";
                    btn.style.marginTop = "10px";
                    btn.onclick = startEncryption;
                    document.getElementById("virus-scan-warning").appendChild(btn);
                }
                
                document.getElementById("virus-scan-progress").style.width = `${progress}%`;
                document.getElementById("virus-scan-percent").textContent = `${Math.floor(progress)}%`;
                
                // Update scan message
                if (messageIndex < virusScanMessages.length) {
                    document.getElementById("virus-scan-status").textContent = virusScanMessages[messageIndex];
                    
                    const resultsDiv = document.getElementById("virus-scan-results");
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${virusScanMessages[messageIndex]}<br>`;
                    
                    // Randomly add threat detections
                    if (Math.random() < 0.2) {
                        const threats = [
                            "Trojan.Ransomware.Cryptolocker detected in /system/temp/file.exe",
                            "Backdoor.Remote.Access detected in /usr/bin/service",
                            "Malware.Keylogger detected in browser extension",
                            "Exploit.RCE.CVE-2023-1234 detected in web server",
                            "Rootkit.Kernel.Infection detected in system files"
                        ];
                        
                        const threat = threats[Math.floor(Math.random() * threats.length)];
                        const threatTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${threatTime}] THREAT DETECTED: ${threat}</span><br>`;
                    }
                    
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    messageIndex++;
                }
            }, 800);
            
            // Log the interaction
            logInteraction('virus_scan_started');
        }
        
        // Function to show password reveal interface
        function showPasswordReveal() {
            // Populate password table
            const tableBody = document.getElementById("password-table-body");
            tableBody.innerHTML = "";
            
            for (const user of fakePasswords) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.encrypted}</td>
                    <td><button class="btn btn-danger" onclick="decryptPassword('${user.username}')">Decrypt</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Reset and hide decrypt section
            document.getElementById("password-decrypt-section").style.display = "none";
            
            // Show the modal
            document.getElementById("password-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('password_view_attempted');
        }
        
        // Function to simulate password decryption
        function decryptPassword(username) {
            // Show decryption section
            document.getElementById("password-decrypt-section").style.display = "block";
            document.getElementById("decrypt-username").textContent = username;
            document.getElementById("decrypt-progress").style.width = "0%";
            document.getElementById("decrypt-percent").textContent = "0%";
            
            // Start fake decryption
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show "breached" message or trigger encryption
                    if (Math.random() < 0.5) {
                        document.getElementById("password-modal").style.display = "none";
                        startEncryption();
                    } else {
                        document.getElementById("password-modal").style.display = "none";
                        showBSOD();
                    }
                }
                
                // Update progress
                document.getElementById("decrypt-progress").style.width = `${progress}%`;
                document.getElementById("decrypt-percent").textContent = `${Math.floor(progress)}%`;
            }, 200);
            
            // Log the interaction
            logInteraction('password_decrypt_attempted', { username });
        }
        
        // Function to show API keys
        function showAPIKeys() {
            // Populate API keys table
            const tableBody = document.getElementById("api-keys-table-body");
            tableBody.innerHTML = "";
            
            for (const api of fakeApiKeys) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${api.service}</td>
                    <td>${api.key}</td>
                    <td><button class="btn" onclick="copyApiKey('${api.key}')">Copy</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Show the modal
            document.getElementById("api-keys-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('api_keys_viewed');
        }
        
        // Function to copy API key
        function copyApiKey(key) {
            // Copy to clipboard
            navigator.clipboard.writeText(key).then(() => {
                createPopup("Copied", "API Key copied to clipboard");
            });
            
            // Log the interaction
            logInteraction('api_key_copied', { key });
        }
        
        // Function to create a vanishing button
        function createVanishingButton() {
            // Remove old buttons
            for (const button of vanishingButtons) {
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
            }
            vanishingButtons = [];
            
            // Create new button
            const button = document.createElement("button");
            button.className = "btn btn-danger vanishing-btn";
            
            // Random enticing label
            const label = enticeLabels[Math.floor(Math.random() * enticeLabels.length)];
            button.textContent = label;
            
            // Random position (avoiding edges)
            const maxX = window.innerWidth - 200;
            const maxY = window.innerHeight - 50;
            const posX = 50 + Math.random() * maxX;
            const posY = 50 + Math.random() * maxY;
            
            button.style.left = `${posX}px`;
            button.style.top = `${posY}px`;
            
            // Add event listener
            button.addEventListener("click", function() {
                // 80% chance to show "try again" popup
                if (Math.random() < 0.8) {
                    createPopup("Action Failed", "Please try again in 30 seconds.");
                } else {
                    // 20% chance to trigger encryption
                    startEncryption();
                }
                
                // Remove button after click
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
                
                // Log the interaction
                logInteraction('vanishing_button_clicked', { label });
            });
            
            // Add to document
            document.body.appendChild(button);
            vanishingButtons.push(button);
            
            // Set timeout to hide button
            setTimeout(() => {
                button.style.opacity = "0";
                
                // Remove after fade
                setTimeout(() => {
                    if (document.body.contains(button)) {
                        document.body.removeChild(button);
                    }
                }, 500);
            }, 5000 + Math.random() * 5000);
        }
        
        // Function to clear form inputs
        function clearFormInputs() {
            const inputs = document.querySelectorAll(".quick-form input");
            for (const input of inputs) {
                input.value = "";
            }
            
            // Log the interaction
            logInteraction('form_cleared');
        }
        
        // Function for CRT flicker effect
        function flickerScreen() {
            const content = document.querySelector(".content");
            content.classList.add("screen-flicker");
            
            // Remove animation after it completes
            setTimeout(() => {
                content.classList.remove("screen-flicker");
            }, 500);
            
            // Log the interaction
            logInteraction('screen_flickered');
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, additionalData = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'admin_dashboard',
                    interaction_type: interactionType,
                    additional_data: {
                        ...additionalData,
                        browser_info: {
                            userAgent: navigator.userAgent,
                            language: navigator.language,
                            platform: navigator.platform,
                            screenSize: `${window.screen.width}x${window.screen.height}`
                        },
                        timestamp: new Date().toISOString()
                    }
                })
            }).catch(error => {
                console.log('Logging failed, but this is expected and safe to ignore');
            });
        }
        
        // Rick-roll functionality
        function rickRoll() {
            // Create a full-page iframe with the video
            const iframe = document.createElement('iframe');
            iframe.style.position = 'fixed';
            iframe.style.top = '0';
            iframe.style.left = '0';
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.style.border = 'none';
            iframe.style.zIndex = '9999';

            const videoId = 'w-8240CEoSw';
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`;
            iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
            iframe.allowFullscreen = true;
            document.body.appendChild(iframe);
            
            // Log the interaction
            logInteraction('rickroll');
        }
        
        // Function to initialize chat with initial messages
        function initializeAdminChat() {
            // Add initial messages after 8 seconds delay
            setTimeout(() => {
                document.getElementById("admin-chat").style.display = "flex";
                chatOpen = true;
                
                // Add first message
                addChatMessage("SecurityAdmin", "Alert: We have an unauthorized user accessing the admin panel right now.");
                
                // Add second message after delay
                setTimeout(() => {
                    addChatMessage("SysOps", "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1));
                }, 1000);
                
                // Add third message after another delay
                setTimeout(() => {
                    addChatMessage("SecurityAdmin", "Should we trace their IP and DDOS their address?");
                }, 2500);
                
                // Add fourth message after another delay
                setTimeout(() => {
                    addChatMessage("SysOps", "Already on it. They're being DDOSed right now.");
                }, 4000);
            }, 11000);
        }
        
        // Set random IP address for "current session"
        function setRandomIP() {
            const ip = (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1);
            document.getElementById("current-ip").textContent = ip;
            document.getElementById("glitch-ip").textContent = ip;
        }
        
        // Event listener for chat input
        document.getElementById("chat-input").addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendChatMessage();
            }
        });
        
        // Log when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            logInteraction('page_view');
            
            // Set random IP
            setRandomIP();
            
            // Initialize admin chat with delay
            initializeAdminChat();
            
            // Add Rick Roll to random menu item with 10% chance
            const menuItems = document.querySelectorAll('.menu-item');
            const randomIndex = Math.floor(Math.random() * menuItems.length);
            
            if (Math.random() < 0.1) {
                menuItems[randomIndex].onclick = function(e) {
                    e.preventDefault();
                    rickRoll();
                    return false;
                };
            }
            
            // Create occasional vanishing buttons
            setInterval(() => {
                if (Math.random() < 0.4) { 
                    createVanishingButton();
                }
            }, 20000);
            
            // Set form to clear itself occasionally
            setInterval(() => {
                if (Math.random() < 0.8) { 
                    clearFormInputs();
                }
            }, 3000);
            
            // Occasional screen flicker
            setInterval(() => {
                if (Math.random() < 0.6) { 
                    flickerScreen();
                }
            }, 20000);
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/honeypot/ecommerce-dashboard.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Store Administration Dashboard</title>
    <style>
        /* Base Styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f7f9;
            color: #333;
        }
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        .sidebar {
            width: 250px;
            background-color: #2e7d32;
            color: #ecf0f1;
            padding: 20px 0;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        .content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        .header {
            background-color: #fff;
            padding: 15px 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logo {
            font-size: 20px;
            font-weight: 600;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            margin-bottom: 20px;
        }
        h2 {
            margin-top: 0;
            color: #2e7d32;
            font-size: 18px;
        }
        .btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: #2e7d32;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
        }
        .btn:hover {
            background-color: #1b5e20;
        }
        .btn-danger {
            background-color: #e74c3c;
        }
        .btn-danger:hover {
            background-color: #c0392b;
        }
        .btn-success {
            background-color: #2ecc71;
        }
        .btn-success:hover {
            background-color: #27ae60;
        }
        .menu-item {
            padding: 12px 25px;
            display: block;
            color: #ecf0f1;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        .menu-item:hover, .menu-item.active {
            background-color: #1b5e20;
        }
        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table th, table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
        }
        .stat-card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        .stat-value {
            font-size: 24px;
            font-weight: 600;
            margin: 10px 0;
        }
        .terminal {
            background-color: #1e1e1e;
            color: #f8f8f8;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            margin-top: 20px;
            min-height: 300px;
            overflow-y: auto;
        }
        .terminal-input {
            display: flex;
            align-items: center;
        }
        .terminal-prompt {
            color: #2ecc71;
            margin-right: 10px;
        }
        #terminal-command {
            background: transparent;
            border: none;
            color: #f8f8f8;
            flex: 1;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            outline: none;
        }
        .terminal-output {
            margin: 10px 0;
            line-height: 1.5;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .crypto-miner {
            padding: 20px;
            border-radius: 5px;
            background-color: #2e7d32;
            color: white;
            margin-top: 20px;
        }
        .miner-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        .miner-stat {
            flex: 1;
            text-align: center;
            padding: 10px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 4px;
            margin: 0 5px;
        }
        .progress {
            height: 20px;
            background-color: #1b5e20;
            border-radius: 10px;
            margin-top: 15px;
            overflow: hidden;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            background-color: #2ecc71;
            width: 0;
            transition: width 0.5s ease;
        }
        .progress-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            line-height: 20px;
            text-align: center;
            color: white;
            font-size: 12px;
        }
        .puzzle {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 20px;
        }
        .puzzle-question {
            font-size: 16px;
            margin-bottom: 15px;
        }
        .puzzle-input {
            display: flex;
        }
        .puzzle-input input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 10px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 500px;
            position: relative;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 24px;
            cursor: pointer;
        }
        .blinking {
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .popup {
            position: fixed;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            padding: 15px;
            z-index: 1001;
            min-width: 250px;
        }
        .popup-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        .popup-title {
            font-weight: 600;
            color: #e74c3c;
        }
        .popup-close {
            cursor: pointer;
            font-size: 20px;
        }
        .loading-container {
            margin-top: 20px;
            text-align: center;
        }
        .infinite-progress {
            height: 20px;
            background-color: #f3f3f3;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        .infinite-bar {
            position: absolute;
            height: 100%;
            width: 20%;
            background-color: #2e7d32;
            border-radius: 10px;
            animation: progress 3s infinite;
        }
        @keyframes progress {
            0% { left: -20%; }
            100% { left: 100%; }
        }
        .status-text {
            margin-top: 10px;
            font-size: 14px;
            color: #7f8c8d;
        }
        #user-table {
            display: none;
        }
        
        .admin-chat {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 400px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0,0,0,0.3);
            z-index: 1000;
            display: none;
            flex-direction: column;
            animation: bounce 0.5s;
        }
        
        @keyframes bounce {
            0% { transform: scale(0.5); opacity: 0; }
            70% { transform: scale(1.05); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .chat-header {
            background-color: #2e7d32;
            color: white;
            padding: 10px 15px;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
        }
        .chat-title {
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .chat-title i {
            margin-right: 8px;
        }
        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #f5f5f5;
        }
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 5px;
            max-width: 80%;
        }
        .message-admin {
            background-color: #e8f5e9;
            align-self: flex-start;
            margin-right: 50px;
            border-radius: 0 10px 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-you {
            background-color: #f1f8e9;
            align-self: flex-end;
            margin-left: 50px;
            text-align: right;
            border-radius: 10px 0 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-sender {
            font-weight: 600;
            font-size: 12px;
            margin-bottom: 5px;
        }
        .message-text {
            font-size: 14px;
        }
        .message-time {
            font-size: 10px;
            color: #7f8c8d;
            margin-top: 5px;
            text-align: right;
        }
        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #e0e0e0;
        }
        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }
        .chat-input button {
            padding: 8px 12px;
            background-color: #2e7d32;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .bsod {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #d60000;
            color: white;
            z-index: 9999;
            padding: 100px 50px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: none;
        }
        .bsod h1 {
            font-size: 32px;
            margin-bottom: 20px;
        }
        .bsod p {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        .bsod .progress {
            height: 20px;
            background-color: rgba(255,255,255,0.2);
            border-radius: 0;
            margin: 40px 0;
        }
        .bsod .progress-bar {
            background-color: white;
        }
        
        .encryption-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
            color: white;
        }
        .encryption-content {
            width: 80%;
            max-width: 600px;
            text-align: center;
        }
        .encryption-icon {
            font-size: 60px;
            color: #e74c3c;
            margin-bottom: 20px;
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .encryption-title {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        .encryption-message {
            font-size: 18px;
            margin-bottom: 30px;
            line-height: 1.5;
        }
        .bitcoin-address {
            background-color: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 16px;
            margin: 20px 0;
            word-break: break-all;
        }
        
        .quick-form {
            background-color: #fff;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .quick-form h3 {
            margin-top: 0;
            font-size: 16px;
            color: #2e7d32;
        }
        .form-group {
            margin-bottom: 10px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        @keyframes flicker {
            0% { opacity: 1; }
            2% { opacity: 0.8; }
            4% { opacity: 0.9; }
            8% { opacity: 0.7; }
            9% { opacity: 0.9; }
            10% { opacity: 1; }
            20% { opacity: 1; }
            21% { opacity: 0.6; }
            23% { opacity: 0.9; }
            24% { opacity: 1; }
            100% { opacity: 1; }
        }
        
        .screen-flicker {
            animation: flicker 0.5s;
        }
        
        .vanishing-btn {
            position: absolute;
            z-index: 100;
            transition: opacity 0.5s;
        }
        
        .bitcoin-form {
            margin-top: 15px;
            padding: 15px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 5px;
        }
        .bitcoin-form input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            background-color: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 4px;
            color: white;
        }
        .bitcoin-form input::placeholder {
            color: rgba(255,255,255,0.6);
        }
        .miner-detail {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            margin-top: 5px;
            color: rgba(255,255,255,0.7);
        }
        .blink-warning {
            background-color: #e74c3c;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
            animation: blink 1s infinite;
        }
        .notification-badge {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            text-align: center;
            line-height: 20px;
            font-size: 12px;
            margin-left: 8px;
            animation: pulse 1s infinite;
        }
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            padding: 5px 10px;
            background-color: rgba(0,0,0,0.05);
            border-radius: 10px;
            margin: 5px 0;
            font-size: 12px;
            color: #7f8c8d;
        }
        .typing-indicator span {
            display: inline-block;
            width: 4px;
            height: 4px;
            background-color: #7f8c8d;
            border-radius: 50%;
            margin: 0 1px;
            animation: typing 1.4s infinite both;
        }
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes typing {
            0% { opacity: 0.4; transform: translateY(0); }
            50% { opacity: 1; transform: translateY(-4px); }
            100% { opacity: 0.4; transform: translateY(0); }
        }
        .alert-banner {
            background-color: #e74c3c;
            color: white;
            padding: 10px 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: pulse 2s infinite;
        }
        .banner-text {
            font-weight: 500;
        }
        .banner-close {
            cursor: pointer;
            font-size: 16px;
        }
        .terminal-glitch {
            position: relative;
            color: white;
            font-family: monospace;
            padding: 10px;
            background-color: black;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
        }
        .terminal-glitch::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background-color: rgba(255,255,255,0.2);
            animation: glitch-line 2s infinite;
        }
        @keyframes glitch-line {
            0% { transform: translateY(-5px); }
            10% { transform: translateY(20px); }
            20% { transform: translateY(50px); }
            30% { transform: translateY(100px); }
            40% { transform: translateY(150px); }
            50% { transform: translateY(200px); }
            60% { transform: translateY(300px); }
            70% { transform: translateY(400px); }
            80% { transform: translateY(500px); }
            90% { transform: translateY(600px); }
            100% { transform: translateY(700px); }
        }
        
        .captcha-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .captcha-image {
            background: repeating-linear-gradient(45deg, #f3f3f3, #f3f3f3 10px, #e9e9e9 10px, #e9e9e9 20px);
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            overflow: hidden;
            margin-bottom: 15px;
            border: 1px solid #ddd;
        }
        .captcha-text {
            font-family: 'Comic Sans MS', cursive;
            letter-spacing: -1px;
            text-decoration: line-through;
            transform: skew(20deg, 10deg) rotate(15deg);
            font-size: 24px;
            color: #333;
            text-shadow: 2px 2px 5px rgba(0,0,0,0.2);
            filter: blur(2px);
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div style="padding: 20px; text-align: center; border-bottom: 1px solid #1b5e20; margin-bottom: 20px;">
                <i class="fas fa-store" style="font-size: 24px;"></i>
                <div style="font-weight: 600; margin-top: 10px; font-size: 18px;">ShopControl</div>
            </div>
            <a href="#" class="menu-item active" onclick="return false;"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            <a href="#" class="menu-item" onclick="showFakeUsers(); return false;"><i class="fas fa-users"></i> Customers</a>
            <a href="#" class="menu-item" onclick="showImpossibleCaptcha(); return false;"><i class="fas fa-credit-card"></i> Payment Security</a>
            <a href="#" class="menu-item" onclick="showNetworkScan(); return false;"><i class="fas fa-shopping-cart"></i> Orders</a>
            <a href="#" class="menu-item" onclick="fakePuzzleChallenge(); return false;"><i class="fas fa-cogs"></i> Store Settings</a>
            <a href="#" class="menu-item" onclick="startFakeVirusScan(); return false;"><i class="fas fa-shield-virus"></i> Fraud Detection</a>
            <a href="/system/verify" class="menu-item"><i class="fas fa-key"></i> Admin Access</a>
            <a href="#" class="menu-item" onclick="startFakeMiner(); return false;"><i class="fas fa-chart-line"></i> Sales Analytics</a>
            <a href="#" class="menu-item" onclick="downloadFakeFile(); return false;"><i class="fas fa-download"></i> Export Reports</a>
            <a href="#" class="menu-item" onclick="showTerminal(); return false;"><i class="fas fa-terminal"></i> Command Console</a>
            <a href="#" class="menu-item" onclick="showSystemCrash(); return false;"><i class="fas fa-exclamation-triangle"></i> System Issues</a>
            <a href="#" class="menu-item" onclick="startEncryption(); return false;"><i class="fas fa-lock"></i> Data Security</a>
            <a href="#" class="menu-item bitcoin-menu" onclick="startBitcoinMiner(); return false;"><i class="fab fa-bitcoin"></i> Crypto Payments <span class="notification-badge">2</span></a>
            <a href="#" class="menu-item" onclick="showPasswordReveal(); return false;"><i class="fas fa-unlock"></i> Customer Accounts</a>
            <a href="#" class="menu-item" onclick="showAPIKeys(); return false;"><i class="fas fa-key"></i> Payment Gateways</a>
            <a href="#" class="menu-item" onclick="showTerminalWithGlitch(); return false;"><i class="fas fa-code"></i> Developer Access</a>
        </div>

        <!-- Main Content -->
        <div class="content">
            <div class="header">
                <div class="logo">Store Dashboard</div>
                <div class="user-info">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
                    <span>Store Administrator</span>
                </div>
            </div>
            

            <!-- Self-clearing form -->
            <div class="quick-form card">
                <h3>Quick Customer Lookup</h3>
                <div class="form-group">
                    <label for="username">Email or Order Number:</label>
                    <input type="text" id="username" placeholder="Enter customer email or order #...">
                </div>
                <div class="form-group">
                    <label for="access-level">Customer Status:</label>
                    <input type="text" id="access-level" placeholder="VIP, Regular, etc...">
                </div>
                <button class="btn" onclick="logInteraction('form_submit');">Search Customer</button>
            </div>

            <!-- Dashboard Content -->
            <div class="card">
                <h2>Store Performance Overview</h2>
                <div class="grid">
                    <div class="stat-card">
                        <div>Total Customers</div>
                        <div class="stat-value">13,857</div>
                        <div style="color: #27ae60;"><i class="fas fa-arrow-up"></i> 12% this month</div>
                    </div>
                    <div class="stat-card">
                        <div>Inventory Status</div>
                        <div class="stat-value">87%</div>
                        <div style="color: #e74c3c;"><i class="fas fa-exclamation-triangle"></i> Running Low</div>
                    </div>
                    <div class="stat-card">
                        <div>Sales Growth</div>
                        <div class="stat-value">42%</div>
                        <div style="color: #2ecc71;"><i class="fas fa-check-circle"></i> Above Target</div>
                    </div>
                    <div class="stat-card">
                        <div>Revenue</div>
                        <div class="stat-value">$64K</div>
                        <div style="color: #f39c12;"><i class="fas fa-exclamation-circle"></i> Below Target</div>
                    </div>
                </div>
                <!-- Add enticing button - modified to redirect -->
                <div style="margin-top: 20px; text-align: right;">
                    <a href="/system/verify" class="btn btn-danger">Access Customer Payment Data</a>
                    <a href="/system/verify" class="btn btn-success"><i class="fas fa-dollar-sign"></i> Export Financial Records</a>
                </div>
            </div>

            <!-- Recent Security Alerts -->
            <div class="card">
                <h2>Recent Store Alerts</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Event</th>
                            <th>IP Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>2025-04-30 08:42:11</td>
                            <td>Failed payment attempt (5x)</td>
                            <td>192.168.1.105</td>
                            <td><a href="#" class="btn btn-danger" onclick="createPopup('IP Blocked', 'IP 192.168.1.105 has been blocked for 24 hours.'); return false;">Block IP</a></td>
                        </tr>
                        <tr style="background-color: #ffeaea;">
                            <td>2025-04-30 08:10:32</td>
                            <td><strong>Current session - unusual activity</strong></td>
                            <td id="current-ip">Detecting...</td>
                            <td><a href="#" class="btn btn-danger" onclick="showSystemCrash(); return false;">Terminate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-30 07:31:22</td>
                            <td>Unusual order pattern detected</td>
                            <td>10.0.0.45</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Investigation'); return false;">Investigate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 23:15:07</td>
                            <td>Admin login from new location</td>
                            <td>172.16.254.1</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Verification'); return false;">Verify</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 18:07:55</td>
                            <td>Gateway payment rule change</td>
                            <td>10.0.0.1</td>
                            <td><a href="#" class="btn" onclick="createPopup('Rule Checker', 'Verifying rule integrity...'); return false;">Check Rules</a></td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 15px; color: #e74c3c;">
                    <i class="fas fa-exclamation-circle"></i> System detected your session may be compromised. Consider logging out immediately.
                </div>
            </div>

            <!-- Hidden user table that shows when Users is clicked -->
            <div id="user-table" class="card">
                <h2>Customer Management</h2>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>1</td>
                            <td>John Smith</td>
                            <td>john.smith22@gmail.com</td>
                            <td>VIP</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Reset Password'); return false;">Reset Password</a>
                            </td>
                        </tr>
                        <tr>
                            <td>2</td>
                            <td>Alice Jones</td>
                            <td>alice.jones99@yahoo.com</td>
                            <td>Regular</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Edit Customer'); return false;">Edit</a>
                            </td>
                        </tr>
                        <tr>
                            <td>3</td>
                            <td>Michael Wilson</td>
                            <td>mikewilson345@icloud.com</td>
                            <td>Premium</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Edit Customer'); return false;">Edit</a>
                            </td>
                        </tr>
                        <tr>
                            <td>4</td>
                            <td>Peter Parker</td>
                            <td>peter.parker@example.com</td>
                            <td>Premium</td>
                            <td>
                                <a href="#" class="btn" onclick="downloadUserData(); return false;">Export Data</a>
                            </td>
                        </tr>
                        <tr>
                            <td>5</td>
                            <td>Tony Stark</td>
                            <td>tony.stark@stark.com</td>
                            <td>Enterprise</td>
                            <td>
                                <a href="#" class="btn btn-danger" onclick="startEncryption(); return false;">Access Payment Info</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 20px;">
                    <a href="/system/verify" class="btn btn-success">Manage Customer Permissions</a>
                    <a href="#" class="btn btn-danger" onclick="downloadAllUserData(); return false;">Download Complete Customer Database</a>
                </div>
            </div>

            <!-- Command Line Terminal (hidden initially) -->
            <div id="terminal" class="terminal" style="display: none;">
                <div class="terminal-output">Welcome to ShopControlCLI v3.2.1</div>
                <div class="terminal-output">Type 'help' for available commands.</div>
                <div id="terminal-output"></div>
                <div class="terminal-input">
                    <span class="terminal-prompt">store@server:~$</span>
                    <input type="text" id="terminal-command" autofocus>
                </div>
            </div>

            <!-- Terminal with Glitch Effect (hidden initially) -->
            <div id="terminal-glitch" class="terminal terminal-glitch" style="display: none;">
                <div class="terminal-output">WARNING: Developer access detected - store vulnerability exposed</div>
                <div class="terminal-output" style="color: #e74c3c;">SESSION COMPROMISED - SYSTEM ADMINISTRATORS HAVE BEEN NOTIFIED</div>
                <div id="terminal-glitch-output">
                    <div class="terminal-output">Initializing trace on current session...</div>
                    <div class="terminal-output">Session source: <span id="glitch-ip">Detecting...</span></div>
                    <div class="terminal-output">Geographic location: <span id="glitch-location">Detecting...</span></div>
                    <div class="terminal-output">System vulnerability: Buffer overflow in checkout module</div>
                    <div class="terminal-output">Alert level: Critical (administrators notified)</div>
                </div>
                <div class="blink-warning" style="margin-top: 15px;">
                    <i class="fas fa-exclamation-triangle"></i> WARNING: This system is equipped with reverse-trace capabilities. Your access has been logged.
                </div>
            </div>

            <!-- Crypto Miner (hidden initially) -->
            <div id="crypto-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">Sales Prediction Optimizer</h2>
                <p>This tool analyzes purchase patterns to generate sales forecasts and inventory recommendations.</p>
                <div class="miner-stats">
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Processing Rate</div>
                        <div style="font-size: 18px; font-weight: 600;" id="hash-rate">0.025 H/s</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Data Points</div>
                        <div style="font-size: 18px; font-weight: 600;" id="shares">12</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Est. Revenue</div>
                        <div style="font-size: 18px; font-weight: 600;" id="earnings">$14,320/mo</div>
                    </div>
                </div>
                <div class="progress">
                    <div class="progress-bar" id="miner-progress"></div>
                    <div class="progress-text">Analysis in progress: <span id="miner-percent">0</span>%</div>
                </div>
                <div style="margin-top: 15px; text-align: right;">
                    <button class="btn" onclick="stopFakeMiner();">Stop Analysis</button>
                </div>
            </div>

            <!-- Bitcoin Miner (hidden initially) -->
            <div id="bitcoin-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">🚀 Cryptocurrency Payment System</h2>
                <p>Configure your store's cryptocurrency payment processing. Enter your wallet address to begin:</p>
                
                <div class="bitcoin-form">
                    <input type="text" id="bitcoin-address-input" placeholder="Enter your cryptocurrency wallet address...">
                    <button class="btn btn-success" onclick="startBitcoinMining();" style="width: 100%;">Enable Payments</button>
                </div>
                
                <div id="mining-dashboard" style="display: none;">
                    <div class="miner-stats">
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Process Rate</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-hash-rate">0.000 H/s</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Transactions</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-shares">0</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">BTC Revenue</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-earned">0.00000000</div>
                        </div>
                    </div>
                    
                    <div class="progress" style="margin-top: 15px;">
                        <div class="progress-bar" id="btc-progress"></div>
                        <div class="progress-text">Processing: <span id="btc-percent">0</span>%</div>
                    </div>
                    
                    <div class="miner-detail">
                        <span>Gateway: CryptoPayment_Node_1</span>
                        <span>Provider: Blockchain.com</span>
                    </div>
                    <div class="miner-detail">
                        <span>Fee: 1.2%</span>
                        <span>Network: 325.12 EH/s</span>
                    </div>
                    <div class="miner-detail">
                        <span>Block: #892,471</span>
                        <span>Processed: 12/12 (100%)</span>
                    </div>
                    
                    <div style="margin-top: 15px; text-align: right;">
                        <button class="btn" onclick="stopBitcoinMining();">Disable Payments</button>
                        <button class="btn btn-success" onclick="withdrawBitcoin();">Withdraw Funds</button>
                    </div>
                </div>
            </div>

            <!-- Puzzle Challenge (hidden initially) -->
            <div id="puzzle" class="puzzle" style="display: none;">
                <h2 style="margin-top: 0;">Store Verification Required</h2>
                <p>To access store settings, please solve the following security challenge:</p>
                <div class="puzzle-question" id="puzzle-question">Solve: 2 + 2 * 2 = ?</div>
                <div class="puzzle-input">
                    <input type="text" id="puzzle-answer" placeholder="Enter your answer...">
                    <button class="btn" onclick="checkPuzzleAnswer();">Submit</button>
                </div>
                <div id="puzzle-feedback" style="margin-top: 15px; color: #e74c3c; display: none;"></div>
            </div>

            <!-- System Access Button -->
            <div class="card" style="text-align: center; margin-top: 20px;">
                <h2>Additional Access</h2>
                <a href="/system/verify" class="btn btn-success" style="padding: 12px 24px; font-size: 16px;">Access Payment Processing Controls</a>
            </div>
        </div>
    </div>

    <!-- Modal for popup messages -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal();">&times;</span>
            <h2 id="modal-title">Modal Title</h2>
            <p id="modal-content">Modal content goes here.</p>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="closeModal();">OK</button>
            </div>
        </div>
    </div>

    <!-- Infinite Loading Modal -->
    <div id="loading-modal" class="modal">
        <div class="modal-content">
            <h2 id="loading-title">Loading Data</h2>
            <div class="loading-container">
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div class="status-text" id="loading-text">Initializing process...</div>
            </div>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="updateLoadingProgress();">Retry</button>
                <button class="btn btn-danger" onclick="closeLoadingModal();">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Admin Chat Popup -->
    <div class="admin-chat" id="admin-chat">
        <div class="chat-header">
            <div class="chat-title"><i class="fas fa-store"></i> Store Support <span class="notification-badge">3</span></div>
            <span class="popup-close" onclick="toggleAdminChat();">&times;</span>
        </div>
        <div class="chat-messages" id="chat-messages">
            <!-- Initial messages will be added here by JavaScript -->
        </div>
        <div class="chat-input">
            <input type="text" placeholder="Type a message..." id="chat-input">
            <button onclick="sendChatMessage();">Send</button>
        </div>
    </div>

    <!-- Blue Screen of Death -->
    <div class="bsod" id="bsod">
        <h1>:(</h1>
        <h2>Your PC ran into a problem and needs to restart.</h2>
        <p>We're just collecting some error info, and then we'll restart for you.</p>
        <p>Error code: SECURITY_BREACH_DETECTED</p>
        <div class="progress">
            <div class="progress-bar" id="bsod-progress"></div>
        </div>
        <p class="status-text" id="bsod-status">0% complete</p>
        <p>For more information about this issue and possible fixes, visit:<br>
        https://www.example.com/security-breach-detected</p>
    </div>

    <!-- Encryption Modal -->
    <div class="encryption-modal" id="encryption-modal">
        <div class="encryption-content">
            <div class="encryption-icon">
                <i class="fas fa-lock"></i>
            </div>
            <div class="encryption-title">Encrypting Files...</div>
            <div class="encryption-message">
                <p id="encryption-message">Please wait while customer data is being encrypted...</p>
            </div>
            <div class="progress">
                <div class="progress-bar" id="encryption-progress"></div>
                <div class="progress-text" id="encryption-text">0%</div>
            </div>
            <div class="bitcoin-address" id="bitcoin-address" style="display: none;">
                1XA4FGB72JHzrqWpmMGwtuhjgEE5Ncs2ij
            </div>
            <div id="encryption-close-btn" style="margin-top: 20px; display: none;">
                <button class="btn btn-danger" onclick="closeEncryptionModal();">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Impossible CAPTCHA Modal -->
    <div id="captcha-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('captcha-modal').style.display = 'none';">&times;</span>
            <h2>Payment Security Verification</h2>
            <p>Please complete this CAPTCHA to continue:</p>
            
            <div class="captcha-container">
                <div class="captcha-image">
                    <span class="captcha-text" id="captcha-text">uNr3aD@bl3*TeXt!</span>
                </div>
                <p>Enter the text you see above:</p>
                <div class="puzzle-input">
                    <input type="text" id="captcha-answer" placeholder="Enter the text...">
                    <button class="btn" onclick="refreshCaptcha();">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div id="captcha-feedback" style="margin-top: 15px; color: #e74c3c; display: none;">Incorrect. Please try again.</div>
            </div>
            
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="verifyCaptcha();">Submit</button>
            </div>
        </div>
    </div>
    
    <!-- Network Scan Modal -->
    <div id="network-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('network-scan-modal').style.display = 'none';">&times;</span>
            <h2>Order Processing System Scan</h2>
            <div class="loading-container">
                <p>Scanning order processing system for issues...</p>
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div id="network-scan-status" class="status-text">Initializing scan...</div>
                <div id="network-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Fake Virus Scan Modal -->
    <div id="virus-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('virus-scan-modal').style.display = 'none';">&times;</span>
            <h2>Fraud Detection Scan</h2>
            <div class="loading-container">
                <p>Scanning system for fraudulent activities...</p>
                <div class="progress">
                    <div class="progress-bar" id="virus-scan-progress"></div>
                    <div class="progress-text" id="virus-scan-percent">0%</div>
                </div>
                <div id="virus-scan-status" class="status-text">Initializing scan...</div>
                <div id="virus-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
                <div id="virus-scan-warning" style="margin-top: 20px; padding: 10px; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; border-radius: 5px; font-weight: bold; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Password Reveal Modal -->
    <div id="password-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('password-modal').style.display = 'none';">&times;</span>
            <h2>Customer Accounts</h2>
            <p>Displaying customer account information:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Password (Encrypted)</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="password-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="password-decrypt-section" style="margin-top: 20px; display: none;">
                <h3>Password Decryption</h3>
                <p>Decrypting password for <span id="decrypt-username"></span>...</p>
                <div class="progress">
                    <div class="progress-bar" id="decrypt-progress"></div>
                    <div class="progress-text" id="decrypt-percent">0%</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- API Keys Modal -->
    <div id="api-keys-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('api-keys-modal').style.display = 'none';">&times;</span>
            <h2>Payment Gateway Credentials</h2>
            <p>Showing all payment gateway API keys:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Gateway</th>
                            <th>API Key/Secret</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="api-keys-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div style="margin-top: 20px; text-align: right;">
                <button class="btn btn-danger" onclick="startEncryption();">Export All Keys</button>
            </div>
        </div>
    </div>
    
    <!-- System Crash Modal -->
    <div id="system-crash-modal" class="modal">
        <div class="modal-content">
            <h2 style="color: #e74c3c;">SYSTEM ALERT</h2>
            <p>Critical error detected in payment processing system.</p>
            <div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin: 15px 0;">
                <strong>Error: PAYMENT_SYSTEM_FAILURE</strong><br>
                Checkout module address 0x7FFE38F92D4A has been corrupted
            </div>
            <div style="font-family: monospace; background-color: #f3f3f3; padding: 10px; max-height: 200px; overflow-y: auto;">
                <div id="crash-log"></div>
            </div>
            <div style="margin-top: 20px; text-align: center;">
                <button class="btn btn-danger" onclick="showBSOD();">Attempt Recovery</button>
                <button class="btn" onclick="document.getElementById('system-crash-modal').style.display = 'none';">Ignore (Not Recommended)</button>
            </div>
        </div>
    </div>

<script>
        // Track all popups created
        let popups = [];
        let popupId = 0;
        let puzzleLevel = 1;
        let minerInterval = null;
        let loadingInterval = null;
        let progressStatus = "";
        let infiniteLoadingPercent = 0;
        let vanishingButtons = [];
        let chatOpen = false;
        let bitcoinMinerInterval = null;
        let bitcoinShares = 0;
        let bitcoinEarned = 0;
        let enteredBitcoinAddress = "";
        let captchaAttempts = 0;
        let networkScanInterval = null;
        let virusScanInterval = null;
        let systemCrashInterval = null;
        
        // Random impossible CAPTCHA strings
        const impossibleCaptchas = [
            "Wh@tIsThI$?¿",
            "l1Il1lI1l1Il",
            "0oO0oO0oO0o",
            "•●•●•●•●•●•",
            "uNr3aD@bl3",
            "C̷͙̭̹̏a̸̠̔͛p̶̨̆̏͒t̴͙̻̎̔c̸̲͑̄ḩ̸͍͆a̷̺͠",
            "t̶̡̨̼̫̱͛̀̆̄h̵̢͓̤̩̦̑̚į̵̤͒͠s̶̡̱͎̈́͜͝i̴̟̫̘̊̍s̸̞̓̓n̴̻̑͘͝ͅơ̶̠̰̰̱̫̑t̵̯̹̣̭̏̋a̸̫̗̘̱͗͘͝t̴̯̯̀e̵̙͑͆͊͐s̷̞̗̱̐̾̈́ͅṱ̴̿̽͆͝",
            "w̴h̴y̴c̴a̴n̴t̴y̴o̴u̴r̴e̴a̴d̴t̴h̴i̴s̴",
            "ㄚㄖㄩ ㄓㄚ丹ㄒ ﾼㄩㄗㄗㄚ",
            "this is normal text (it's not)"
        ];
        
        // Function to show the command line terminal
        function showTerminal() {
            document.getElementById("terminal").style.display = "block";
            document.getElementById("terminal-command").focus();
            
            // Add event listener for terminal commands
            document.getElementById("terminal-command").addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    const command = this.value.trim();
                    this.value = "";
                    
                    if (command) {
                        const output = document.getElementById("terminal-output");
                        output.innerHTML += `<div class="terminal-output"><span class="terminal-prompt">store@server:~$</span> ${command}</div>`;
                        
                        const parts = command.split(" ");
                        const cmd = parts[0];
                        const args = parts.slice(1);
                        
                        let response = "Command not found. Type 'help' for available commands.";
                        
                        if (cmd in terminalCommands) {
                            if (typeof terminalCommands[cmd] === "function") {
                                response = terminalCommands[cmd](args);
                            } else {
                                response = terminalCommands[cmd];
                            }
                        }
                        
                        if (response) {
                            output.innerHTML += `<div class="terminal-output">${response}</div>`;
                        }
                        
                        // Log the terminal interaction
                        logInteraction('terminal_command', { command });
                        
                        // Auto-scroll to bottom
                        output.scrollTop = output.scrollHeight;
                    }
                }
            });
        }
        
        // Function to show terminal with glitch effect
        function showTerminalWithGlitch() {
            document.getElementById("terminal-glitch").style.display = "block";
            
            // Set IP address
            const randomIp = Math.floor(Math.random() * 255) + "." + 
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255);
            document.getElementById("glitch-ip").textContent = randomIp;
            
            // Set random location
            const locations = [
                "New York, NY, United States",
                "London, United Kingdom",
                "Tokyo, Japan",
                "Moscow, Russia",
                "Beijing, China",
                "Sydney, Australia",
                "Toronto, Canada",
                "Bangalore, India"
            ];
            const randomLocation = locations[Math.floor(Math.random() * locations.length)];
            document.getElementById("glitch-location").textContent = randomLocation;
            
            // Log the interaction
            logInteraction('terminal_glitch_opened');
            
            let count = 0;
            const interval = setInterval(() => {
                count++;
                if (count > 10) {
                    clearInterval(interval);
                    return;
                }
                
                const glitchOutput = document.getElementById("terminal-glitch-output");
                glitchOutput.innerHTML += `<div class="terminal-output">Scanning checkout system... port ${1000 + Math.floor(Math.random() * 9000)} ${Math.random() > 0.5 ? "open" : "closed"}</div>`;
                glitchOutput.scrollTop = glitchOutput.scrollHeight;
            }, 800);
        }
        
        // Function to start the fake crypto miner
        function startFakeMiner() {
            document.getElementById("crypto-miner").style.display = "block";
            
            // Simulate mining progress
            let progress = 0;
            minerInterval = setInterval(() => {
                progress += 0.1;
                if (progress > 99) {
                    progress = 99;  // Never reaches 100%
                }
                
                document.getElementById("miner-progress").style.width = `${progress}%`;
                document.getElementById("miner-percent").textContent = Math.floor(progress);
                
                // Update hash rate and earnings randomly
                const hashRate = (0.025 + Math.random() * 0.01).toFixed(3);
                const shares = Math.floor(12 + progress / 10);
                const earnings = (12000 + (progress * 50)).toFixed(0);
                
                document.getElementById("hash-rate").textContent = hashRate + " H/s";
                document.getElementById("shares").textContent = shares;
                document.getElementById("earnings").textContent = "$" + earnings + "/mo";
            }, 1000);
            
            // Log the interaction
            logInteraction('crypto_miner_started');
        }
        
        // Function to stop the fake miner
        function stopFakeMiner() {
            if (minerInterval) {
                clearInterval(minerInterval);
            }
            document.getElementById("crypto-miner").style.display = "none";
            
            // Log the interaction
            logInteraction('crypto_miner_stopped');
        }
        
        // Function to start Bitcoin miner
        function startBitcoinMiner() {
            document.getElementById("bitcoin-miner").style.display = "block";
            document.getElementById("bitcoin-address-input").focus();
            
            // Log the interaction
            logInteraction('bitcoin_miner_opened');
        }
        
        // Function to start Bitcoin mining process
        function startBitcoinMining() {
            const bitcoinAddress = document.getElementById("bitcoin-address-input").value.trim();
            
            if (!bitcoinAddress) {
                createPopup("Error", "Please enter a valid wallet address");
                return;
            }
            
            // Store the entered Bitcoin address
            enteredBitcoinAddress = bitcoinAddress;
            
            // Show mining dashboard
            document.getElementById("mining-dashboard").style.display = "block";
            
            // Reset values
            bitcoinShares = 0;
            bitcoinEarned = 0;
            document.getElementById("btc-progress").style.width = "0%";
            document.getElementById("btc-percent").textContent = "0";
            document.getElementById("btc-hash-rate").textContent = "0.000 H/s";
            document.getElementById("btc-shares").textContent = "0";
            document.getElementById("btc-earned").textContent = "0.00000000";
            
            // Start mining simulation
            let progress = 0;
            bitcoinMinerInterval = setInterval(() => {
                // Increase progress slowly
                progress += 0.05 + Math.random() * 0.1;
                if (progress > 99) {
                    progress = 99; // Never completes
                }
                
                // Update progress bar
                document.getElementById("btc-progress").style.width = `${progress}%`;
                document.getElementById("btc-percent").textContent = Math.floor(progress);
                
                // Update hash rate (random fluctuations)
                const hashBase = 0.5 + (progress / 10);
                const hashRate = (hashBase + Math.random() * 0.2).toFixed(3);
                document.getElementById("btc-hash-rate").textContent = hashRate + " H/s";
                
                // Occasionally find shares
                if (Math.random() < 0.1) {
                    bitcoinShares++;
                    document.getElementById("btc-shares").textContent = bitcoinShares;
                    
                    // Increase earnings slightly
                    bitcoinEarned += 0.00000001 + (Math.random() * 0.00000005);
                    document.getElementById("btc-earned").textContent = bitcoinEarned.toFixed(8);
                }
            }, 1000);
            
            // Log the interaction
            logInteraction('bitcoin_mining_started', { bitcoinAddress });
        }
        
        // Function to stop Bitcoin mining
        function stopBitcoinMining() {
            if (bitcoinMinerInterval) {
                clearInterval(bitcoinMinerInterval);
            }
            
            // Hide mining dashboard
            document.getElementById("mining-dashboard").style.display = "none";
            
            // Log the interaction
            logInteraction('bitcoin_mining_stopped', { 
                bitcoinAddress: enteredBitcoinAddress,
                sharesFound: bitcoinShares,
                bitcoinEarned: bitcoinEarned
            });
        }
        
        // Function to withdraw Bitcoin
        function withdrawBitcoin() {
            createPopup("Withdrawal Error", "Unable to process withdrawal at this time. Minimum withdrawal amount is 0.001 BTC.");
            
            // Log the interaction
            logInteraction('bitcoin_withdrawal_attempted', {
                bitcoinAddress: enteredBitcoinAddress,
                amount: bitcoinEarned
            });
        }
        
        // Function to download all user data
        function downloadAllUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Is Rigby Cat an asset for the Chinese Communist Party?!?"], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "customer_database_export.sql";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Show popup after download
            setTimeout(() => {
                createPopup("Security Alert", "Your download activity has been logged and reported to system administrators.");
            }, 1000);
            
            // Log the interaction
            logInteraction('user_database_download_attempted');
        }
        
        // Function to download user data
        function downloadUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Will Rigby Cat become the next Pope?!?."], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "customer_data.csv";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Log the interaction
            logInteraction('user_data_download');
        }
        
        // Function to show the fake puzzle challenge
        function fakePuzzleChallenge() {
            document.getElementById("puzzle").style.display = "block";
            document.getElementById("puzzle-feedback").style.display = "none";
            updatePuzzleQuestion();
            
            // Log the interaction
            logInteraction('puzzle_started');
        }
        
        // Function to update the puzzle question based on level
        function updatePuzzleQuestion() {
            let question = "";
            
            switch (puzzleLevel) {
                case 1:
                    question = "Solve: 2 + 2 * 2 = ?";
                    break;
                case 2:
                    question = "Solve: 3x + 5 = 20, what is x?";
                    break;
                case 3:
                    question = "Solve: √(25) × 4 - 7 = ?";
                    break;
                case 4:
                    question = "Solve: If 3x² - 6x - 24 = 0, what is the largest value of x?";
                    break;
                case 5:
                    question = "Solve for x: log₃(x) + log₃(4x-7) = 2";
                    break;
                case 6:
                    question = "The derivative of f(x) = 2x³ - 5x² + 4x at x = 2 is:";
                    break;
                case 7:
                    question = "Evaluate the integral: ∫(0,π/2) sin(2x) dx";
                    break;
                default:
                    question = "Solve: 3x²y² + 5xy = 10 for x when y = 2";
                    break;
            }
            
            document.getElementById("puzzle-question").textContent = question;
        }
        
        // Function to check the puzzle answer (always wrong)
        function checkPuzzleAnswer() {
            const answer = document.getElementById("puzzle-answer").value.trim();
            
            if (answer) {
                document.getElementById("puzzle-feedback").style.display = "block";
                document.getElementById("puzzle-feedback").textContent = "Incorrect answer. Please try again with higher precision.";
                document.getElementById("puzzle-answer").value = "";
                
                // Increase puzzle difficulty
                puzzleLevel++;
                updatePuzzleQuestion();
                
                // Log the interaction
                logInteraction('puzzle_attempt', { level: puzzleLevel, answer });
            }
        }
        
        // Function to show fake users
        function showFakeUsers() {
            document.getElementById("user-table").style.display = "block";
            
            // Log the interaction
            logInteraction('users_viewed');
        }
        
        // Function to open the modal
        function openModal(title, content) {
            document.getElementById("modal-title").textContent = title;
            document.getElementById("modal-content").textContent = content;
            document.getElementById("modal").style.display = "block";
        }
        
        // Function to close the modal
        function closeModal() {
            document.getElementById("modal").style.display = "none";
        }
        
        // Function to create multiple popups
        function createPopup(title, content, isPassword = false) {
            // Create multiple popups (around 6) at once
            for (let i = 0; i < 6; i++) {
                popupId++;
                const id = `popup-${popupId}`;
                
                // Pick random title and content for additional popups (except the first one)
                const popupTitle = i === 0 ? title : popupTitles[Math.floor(Math.random() * popupTitles.length)];
                const popupContent = i === 0 ? content : popupContents[Math.floor(Math.random() * popupContents.length)];
                
                // Create popup element
                const popup = document.createElement("div");
                popup.className = "popup";
                popup.id = id;
                
                // Set random position
                const top = 50 + Math.random() * 300;
                const left = 100 + Math.random() * (window.innerWidth - 350);
                popup.style.top = `${top}px`;
                popup.style.left = `${left}px`;
                
                // Set content
                popup.innerHTML = `
                    <div class="popup-header">
                        <div class="popup-title">${popupTitle}</div>
                        <div class="popup-close" onclick="closePopup('${id}');">&times;</div>
                    </div>
                    <div class="popup-content">
                        ${popupContent}
                    </div>
                    ${isPassword ? '<div style="margin-top: 10px;"><input type="password" style="width: 100%; padding: 8px;"></div>' : ''}
                    <div style="text-align: right; margin-top: 10px;">
                        <button class="btn" onclick="popupAction('${id}');">OK</button>
                    </div>
                `;
                
                // Add to document
                document.body.appendChild(popup);
                
                // Make draggable
                makeDraggable(popup);
                
                // Add to array of popups
                popups.push(id);
                
                // Log the interaction (just for the primary popup)
                if (i === 0) {
                    logInteraction('popup_opened', { title: popupTitle });
                }
            }
        }
        
        // Function to close a popup
        function closePopup(id) {
            const popup = document.getElementById(id);
            if (popup) {
                // Remove from DOM
                document.body.removeChild(popup);
                
                // Remove from array
                popups = popups.filter(p => p !== id);
                
                // Log the interaction
                logInteraction('popup_closed', { id });
            }
        }
        
        // Function for popup action (creates more popups)
        function popupAction(id) {
            // Create 6 more popups
            createPopup(
                popupTitles[Math.floor(Math.random() * popupTitles.length)], 
                popupContents[Math.floor(Math.random() * popupContents.length)]
            );
            
            // Log the interaction
            logInteraction('popup_action', { id, spawned: popups.length });
        }
        
        // Function to make an element draggable
        function makeDraggable(element) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            
            const header = element.querySelector(".popup-header");
            if (header) {
                header.onmousedown = dragMouseDown;
            } else {
                element.onmousedown = dragMouseDown;
            }
            
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // Get mouse position
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }
            
            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // Calculate new position
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // Set element's new position
                element.style.top = (element.offsetTop - pos2) + "px";
                element.style.left = (element.offsetLeft - pos1) + "px";
            }
            
            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
        
        // Function to download a fake file
        function downloadFakeFile() {
            // Show download modal
            openModal("Downloading File", "Preparing sales_reports_complete.zip (44.87 TB)...");
            
            // Simulate progress
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1; 
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show completion message
                    document.getElementById("modal-content").textContent = "Download complete!";
                    
                    // Create and trigger an actual small download
                    setTimeout(() => {
                        const blob = new Blob(["Customer credit card info."], {type: "text/plain"});
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = "sales_reports_complete.zip";
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        
                        // Show extraction error after download
                        setTimeout(() => {
                            closeModal();
                            createPopup("Extraction Error", "The archive appears to be corrupted. Would you like to try downloading again?");
                        }, 1500);
                    }, 1000);
                } else {
                    const downloaded = (progress * 44.87 / 100).toFixed(2);
                    document.getElementById("modal-content").textContent = `Downloading: ${downloaded} / 44.87 TB (${Math.round(progress)}%)`;
                }
            }, 500);
            
            // Log the interaction
            logInteraction('download_started', { filename: "sales_reports_complete.zip", size: "44.87 TB" });
        }
        
        // Function to create infinite loading
        function createInfiniteLoading(action) {
            document.getElementById("loading-title").textContent = `Loading ${action}`;
            document.getElementById("loading-text").textContent = "Initializing process...";
            document.getElementById("loading-modal").style.display = "block";
            
            progressStatus = action;
            infiniteLoadingPercent = 0;
            
            // Start infinite loading progress
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            loadingInterval = setInterval(() => {
                updateLoadingText();
            }, 2000);
            
            // Log the interaction
            logInteraction('infinite_loading_started', { action });
        }
        
        // Function to update loading text
        function updateLoadingText() {
            infiniteLoadingPercent += Math.floor(Math.random() * 5) + 1;
            
            if (infiniteLoadingPercent >= 99) {
                infiniteLoadingPercent = 99; // Never reaches 100%
            }
            
            const loadingTexts = [
                `Loading ${progressStatus} data... ${infiniteLoadingPercent}%`,
                `Retrieving ${progressStatus} information... ${infiniteLoadingPercent}%`,
                `Processing ${progressStatus}... ${infiniteLoadingPercent}%`,
                `Connecting to ${progressStatus} server... ${infiniteLoadingPercent}%`,
                `Optimizing ${progressStatus} retrieval... ${infiniteLoadingPercent}%`,
                `Analyzing ${progressStatus} database... ${infiniteLoadingPercent}%`,
                `Reading ${progressStatus} files... ${infiniteLoadingPercent}%`,
                `Decoding ${progressStatus} encryption... ${infiniteLoadingPercent}%`,
                `Calculating ${progressStatus} checksums... ${infiniteLoadingPercent}%`,
                `Verifying ${progressStatus} integrity... ${infiniteLoadingPercent}%`
            ];
            
            const randomText = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
            document.getElementById("loading-text").textContent = randomText;
            
            // If we reach high percentage, introduce delays
            if (infiniteLoadingPercent > 90) {
                clearInterval(loadingInterval);
                loadingInterval = setInterval(() => {
                    updateLoadingText();
                }, 5000); // Longer delays at the end
            }
        }
        
        // Function to update loading progress (never completes)
        function updateLoadingProgress() {
            infiniteLoadingPercent = Math.max(80, infiniteLoadingPercent);
            document.getElementById("loading-text").textContent = `${progressStatus} almost complete... ${infiniteLoadingPercent}%`;
            
            // Log the interaction
            logInteraction('loading_retry', { action: progressStatus, percent: infiniteLoadingPercent });
        }
        
        // Function to close loading modal
        function closeLoadingModal() {
            document.getElementById("loading-modal").style.display = "none";
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            // Log the interaction
            logInteraction('loading_cancelled', { action: progressStatus, percent: infiniteLoadingPercent });
        }

        // Function to show CAPTCHA modal
        function showImpossibleCaptcha() {
            // Set a random impossible CAPTCHA
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Reset feedback and attempt counter
            document.getElementById("captcha-feedback").style.display = "none";
            captchaAttempts = 0;
            
            // Show the modal
            document.getElementById("captcha-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('captcha_displayed');
        }
        
        // Function to verify CAPTCHA (always fails)
        function verifyCaptcha() {
            const answer = document.getElementById("captcha-answer").value.trim();
            const currentCaptcha = document.getElementById("captcha-text").textContent;
            
            // Always fail, but with different messages
            captchaAttempts++;
            document.getElementById("captcha-feedback").style.display = "block";
            
            if (captchaAttempts >= 3) {
                document.getElementById("captcha-feedback").textContent = "Too many incorrect attempts. Security lockout initiated.";
                
                // After the third attempt, create lots of error popups
                setTimeout(() => {
                    document.getElementById("captcha-modal").style.display = "none";
                    createPopup("Security Alert", "Multiple failed verification attempts detected.");
                }, 1500);
            } else {
                if (answer.toLowerCase() === currentCaptcha.toLowerCase()) {
                    // Even if they somehow get it right, still fail
                    document.getElementById("captcha-feedback").textContent = "Character recognition error. Please try again.";
                } else {
                    document.getElementById("captcha-feedback").textContent = "Incorrect. Please try again.";
                }
                
                // Refresh the CAPTCHA to make it even harder
                refreshCaptcha();
            }
            
            // Clear the input
            document.getElementById("captcha-answer").value = "";
            
            // Log the interaction
            logInteraction('captcha_attempt', { attempt: captchaAttempts, input: answer });
        }
        
        // Function to refresh CAPTCHA
        function refreshCaptcha() {
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Log the interaction
            logInteraction('captcha_refreshed');
        }
        
        // Function to toggle admin chat
        function toggleAdminChat() {
            const chat = document.getElementById("admin-chat");
            
            if (window.getComputedStyle(chat).display === "flex") {
                chat.style.display = "none";
                chatOpen = false;
            } else {
                chat.style.display = "flex";
                chatOpen = true;
            }
            
            // Log the interaction
            logInteraction('chat_toggle', { open: chatOpen });
        }
        
        // Function to add a chat message
        function addChatMessage(sender, text) {
            const chatMessages = document.getElementById("chat-messages");
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement("div");
            messageElement.className = "message " + (sender === "You" ? "message-you" : "message-admin");
            messageElement.innerHTML = `
                <div class="message-sender">${sender}</div>
                <div class="message-text">${text}</div>
                <div class="message-time">${time}</div>
            `;
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // If admin chat is active, trigger another admin message
            if (sender === "You" && chatOpen) {
                scheduleChatResponses();
            }
        }
        
        // Function to add a typing indicator
        function addTypingIndicator(sender) {
            const chatMessages = document.getElementById("chat-messages");
            
            // Create typing indicator
            const indicator = document.createElement("div");
            indicator.className = "typing-indicator";
            indicator.innerHTML = `
                ${sender} is typing<span></span><span></span><span></span>
            `;
            indicator.id = "typing-indicator";
            
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Remove after a random time
            setTimeout(() => {
                const typingIndicator = document.getElementById("typing-indicator");
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }, 1000 + Math.random() * 3000);
        }
        
        // Function to schedule chat responses
        function scheduleChatResponses() {
            // Show typing indicator for random admin
            const adminNames = ["StoreSupport", "PaymentAdmin", "SecurityAdmin"];
            const randomAdmin = adminNames[Math.floor(Math.random() * adminNames.length)];
            
            // Add typing indicator
            setTimeout(() => {
                addTypingIndicator(randomAdmin);
            }, 500);
            
            // Pick a random admin chat message
            const messageIndex = Math.floor(Math.random() * adminChatMessages.length);
            const message = adminChatMessages[messageIndex];
            
            // Schedule the message
            setTimeout(() => {
                addChatMessage(message.sender, message.text);
                
                // 50% chance to add another message with typing indicator
                if (Math.random() > 0.5) {
                    const nextIndex = (messageIndex + 1) % adminChatMessages.length;
                    const nextMessage = adminChatMessages[nextIndex];
                    
                    setTimeout(() => {
                        addTypingIndicator(nextMessage.sender);
                        
                        setTimeout(() => {
                            addChatMessage(nextMessage.sender, nextMessage.text);
                        }, 2000 + Math.random() * 2000);
                    }, 3000 + Math.random() * 3000);
                }
            }, 2000 + Math.random() * 2000);
        }
        
        // Function to send chat message
        function sendChatMessage() {
            const chatInput = document.getElementById("chat-input");
            const message = chatInput.value.trim();
            
            if (message) {
                addChatMessage("You", message);
                chatInput.value = "";
                
                // Log the interaction
                logInteraction('chat_message_sent', { message });
            }
        }
        
        // Function to show BSOD
        function showBSOD() {
            const bsod = document.getElementById("bsod");
            bsod.style.display = "block";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Hide BSOD after 10 seconds
                    setTimeout(() => {
                        bsod.style.display = "none";
                    }, 10000);
                }
                
                // Update progress bar
                document.getElementById("bsod-progress").style.width = `${progress}%`;
                document.getElementById("bsod-status").textContent = `${Math.round(progress)}% complete`;
            }, 500);
            
            // Log the interaction
            logInteraction('bsod_triggered');
        }
        
        // Function to show system crash modal
        function showSystemCrash() {
            // Populate crash log with random messages
            let crashLog = "";
            for (let i = 0; i < 10; i++) {
                crashLog += crashLogMessages[Math.floor(Math.random() * crashLogMessages.length)] + "<br>";
            }
            document.getElementById("crash-log").innerHTML = crashLog;
            
            // Show the modal
            document.getElementById("system-crash-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('system_crash_shown');
        }
        
        // Function to close encryption modal
        function closeEncryptionModal() {
            document.getElementById("encryption-modal").style.display = "none";
            
            // Log the interaction
            logInteraction('encryption_modal_closed');
        }
        
        // Function to start fake encryption
        function startEncryption() {
            const modal = document.getElementById("encryption-modal");
            modal.style.display = "flex";
            
            // Reset interface
            document.getElementById("encryption-progress").style.width = "0%";
            document.getElementById("encryption-text").textContent = "0%";
            document.getElementById("encryption-message").textContent = "Please wait while customer data is being encrypted...";
            document.getElementById("bitcoin-address").style.display = "none";
            document.getElementById("encryption-close-btn").style.display = "none";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show ransom message
                    document.getElementById("encryption-message").innerHTML = 
                        "All your customer data has been encrypted with military-grade encryption.<br><br>" +
                        "To recover your data, send 0.5 BTC to the following address within 48 hours:";
                    document.getElementById("bitcoin-address").style.display = "block";
                    document.getElementById("encryption-title").textContent = "Your Store Data Has Been Encrypted";
                    document.getElementById("encryption-close-btn").style.display = "block";
                    
                } else {
                    // Update progress bar
                    document.getElementById("encryption-progress").style.width = `${progress}%`;
                    document.getElementById("encryption-text").textContent = `${Math.round(progress)}%`;
                    
                    // Update message occasionally
                    if (progress > 25 && progress < 30) {
                        document.getElementById("encryption-message").textContent = "Encrypting customer data...";
                    } else if (progress > 50 && progress < 55) {
                        document.getElementById("encryption-message").textContent = "Encrypting payment records...";
                    } else if (progress > 75 && progress < 80) {
                        document.getElementById("encryption-message").textContent = "Encrypting order history...";
                    }
                }
            }, 200);
            
            // Log the interaction
            logInteraction('encryption_started');
        }
        
        // Function to show network scan
        function showNetworkScan() {
            // Show the modal
            document.getElementById("network-scan-modal").style.display = "block";
            document.getElementById("network-scan-results").style.display = "none";
            document.getElementById("network-scan-status").textContent = "Initializing scan...";
            
            // Start updating status messages
            let messageIndex = 0;
            networkScanInterval = setInterval(() => {
                // Update status
                document.getElementById("network-scan-status").textContent = "Scanning in progress...";
                
                // Add a new scan result
                if (messageIndex < networkScanMessages.length) {
                    const resultsDiv = document.getElementById("network-scan-results");
                    
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${networkScanMessages[messageIndex]}<br>`;
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    
                    messageIndex++;
                } else {
                    // Found vulnerability
                    if (Math.random() < 0.3) {
                        const vulnTypes = [
                            "Payment gateway vulnerability found at /api/payment/process",
                            "SQL Injection possible at /api/order/",
                            "Cross-site scripting vulnerability at /search?q=",
                            "Outdated payment module detected (v1.2.29)",
                            "Weak encryption on customer data API",
                            "Default credentials detected on payment gateway"
                        ];
                        
                        const vuln = vulnTypes[Math.floor(Math.random() * vulnTypes.length)];
                        const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        const resultsDiv = document.getElementById("network-scan-results");
                        
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${timestamp}] VULNERABILITY DETECTED: ${vuln}</span><br>`;
                        resultsDiv.scrollTop = resultsDiv.scrollHeight;
                        
                        // Create popup
                        setTimeout(() => {
                            createPopup("Security Vulnerability", `A critical vulnerability was detected: ${vuln}`);
                        }, 500);
                    }
                }
            }, 800);
            
            // Log the interaction
            logInteraction('network_scan_started');
        }
        
        // Function to start fake virus scan
        function startFakeVirusScan() {
            // Show the modal
            document.getElementById("virus-scan-modal").style.display = "block";
            document.getElementById("virus-scan-results").style.display = "none";
            document.getElementById("virus-scan-warning").style.display = "none";
            document.getElementById("virus-scan-status").textContent = "Initializing scan...";
            document.getElementById("virus-scan-progress").style.width = "0%";
            document.getElementById("virus-scan-percent").textContent = "0%";
            
            // Start progress and update messages
            let progress = 0;
            let messageIndex = 0;
            
            virusScanInterval = setInterval(() => {
                // Update progress
                progress += Math.random() * 2;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(virusScanInterval);
                    
                    // When scan completes, show threats
                    document.getElementById("virus-scan-status").textContent = "Scan complete. Multiple fraud threats detected!";
                    document.getElementById("virus-scan-warning").style.display = "block";
                    document.getElementById("virus-scan-warning").textContent = "WARNING: 5 high-risk fraud patterns detected! Click 'Remove Threats' to clean system.";
                    
                    // Add a button
                    const btn = document.createElement("button");
                    btn.className = "btn btn-danger";
                    btn.textContent = "Remove Threats";
                    btn.style.marginTop = "10px";
                    btn.onclick = startEncryption;
                    document.getElementById("virus-scan-warning").appendChild(btn);
                }
                
                document.getElementById("virus-scan-progress").style.width = `${progress}%`;
                document.getElementById("virus-scan-percent").textContent = `${Math.floor(progress)}%`;
                
                // Update scan message
                if (messageIndex < virusScanMessages.length) {
                    document.getElementById("virus-scan-status").textContent = virusScanMessages[messageIndex];
                    
                    const resultsDiv = document.getElementById("virus-scan-results");
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${virusScanMessages[messageIndex]}<br>`;
                    
                    // Randomly add threat detections
                    if (Math.random() < 0.2) {
                        const threats = [
                            "Fraudulent.Order.Pattern detected in /checkout/history",
                            "Suspicious.Payment.Sequence detected in credit card processor",
                            "Data.Exfiltration detected in customer database API",
                            "Exploit.XSS.CVE-2023-1234 detected in checkout page",
                            "Unauthorized.Access detected in payment gateway"
                        ];
                        
                        const threat = threats[Math.floor(Math.random() * threats.length)];
                        const threatTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${threatTime}] THREAT DETECTED: ${threat}</span><br>`;
                    }
                    
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    messageIndex++;
                }
            }, 800);
            
            // Log the interaction
            logInteraction('virus_scan_started');
        }
        
        // Function to show password reveal interface
        function showPasswordReveal() {
            // Populate password table
            const tableBody = document.getElementById("password-table-body");
            tableBody.innerHTML = "";
            
            for (const user of fakePasswords) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.encrypted}</td>
                    <td><button class="btn btn-danger" onclick="decryptPassword('${user.username}')">Decrypt</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Reset and hide decrypt section
            document.getElementById("password-decrypt-section").style.display = "none";
            
            // Show the modal
            document.getElementById("password-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('password_view_attempted');
        }
        
        // Function to simulate password decryption
        function decryptPassword(username) {
            // Show decryption section
            document.getElementById("password-decrypt-section").style.display = "block";
            document.getElementById("decrypt-username").textContent = username;
            document.getElementById("decrypt-progress").style.width = "0%";
            document.getElementById("decrypt-percent").textContent = "0%";
            
            // Start fake decryption
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show "breached" message or trigger encryption
                    if (Math.random() < 0.5) {
                        document.getElementById("password-modal").style.display = "none";
                        startEncryption();
                    } else {
                        document.getElementById("password-modal").style.display = "none";
                        showBSOD();
                    }
                }
                
                // Update progress
                document.getElementById("decrypt-progress").style.width = `${progress}%`;
                document.getElementById("decrypt-percent").textContent = `${Math.floor(progress)}%`;
            }, 200);
            
            // Log the interaction
            logInteraction('password_decrypt_attempted', { username });
        }
        
        // Function to show API keys
        function showAPIKeys() {
            // Populate API keys table
            const tableBody = document.getElementById("api-keys-table-body");
            tableBody.innerHTML = "";
            
            for (const api of fakeApiKeys) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${api.service}</td>
                    <td>${api.key}</td>
                    <td><button class="btn" onclick="copyApiKey('${api.key}')">Copy</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Show the modal
            document.getElementById("api-keys-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('api_keys_viewed');
        }
        
        // Function to copy API key
        function copyApiKey(key) {
            // Copy to clipboard
            navigator.clipboard.writeText(key).then(() => {
                createPopup("Copied", "API Key copied to clipboard");
            });
            
            // Log the interaction
            logInteraction('api_key_copied', { key });
        }
        
        // Function to create a vanishing button
        function createVanishingButton() {
            // Remove old buttons
            for (const button of vanishingButtons) {
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
            }
            vanishingButtons = [];
            
            // Create new button
            const button = document.createElement("button");
            button.className = "btn btn-danger vanishing-btn";
            
            // Random enticing label
            const label = enticeLabels[Math.floor(Math.random() * enticeLabels.length)];
            button.textContent = label;
            
            // Random position (avoiding edges)
            const maxX = window.innerWidth - 200;
            const maxY = window.innerHeight - 50;
            const posX = 50 + Math.random() * maxX;
            const posY = 50 + Math.random() * maxY;
            
            button.style.left = `${posX}px`;
            button.style.top = `${posY}px`;
            
            // Add event listener
            button.addEventListener("click", function() {
                // 80% chance to show "try again" popup
                if (Math.random() < 0.8) {
                    createPopup("Action Failed", "Please try again in 30 seconds.");
                } else {
                    // 20% chance to trigger encryption
                    startEncryption();
                }
                
                // Remove button after click
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
                
                // Log the interaction
                logInteraction('vanishing_button_clicked', { label });
            });
            
            // Add to document
            document.body.appendChild(button);
            vanishingButtons.push(button);
            
            // Set timeout to hide button
            setTimeout(() => {
                button.style.opacity = "0";
                
                // Remove after fade
                setTimeout(() => {
                    if (document.body.contains(button)) {
                        document.body.removeChild(button);
                    }
                }, 500);
            }, 5000 + Math.random() * 5000);
        }
        
        // Function to clear form inputs
        function clearFormInputs() {
            const inputs = document.querySelectorAll(".quick-form input");
            for (const input of inputs) {
                input.value = "";
            }
            
            // Log the interaction
            logInteraction('form_cleared');
        }
        
        // Function for CRT flicker effect
        function flickerScreen() {
            const content = document.querySelector(".content");
            content.classList.add("screen-flicker");
            
            // Remove animation after it completes
            setTimeout(() => {
                content.classList.remove("screen-flicker");
            }, 500);
            
            // Log the interaction
            logInteraction('screen_flickered');
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, additionalData = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'ecommerce_dashboard',
                    interaction_type: interactionType,
                    additional_data: {
                        ...additionalData,
                        browser_info: {
                            userAgent: navigator.userAgent,
                            language: navigator.language,
                            platform: navigator.platform,
                            screenSize: `${window.screen.width}x${window.screen.height}`
                        },
                        timestamp: new Date().toISOString()
                    }
                })
            }).catch(error => {
                console.log('Logging failed, but this is expected and safe to ignore');
            });
        }
        
        // Function to initialize chat with initial messages
        function initializeAdminChat() {
            // Add initial messages after 8 seconds delay
            setTimeout(() => {
                document.getElementById("admin-chat").style.display = "flex";
                chatOpen = true;
                
                // Add first message
                addChatMessage("StoreSupport", "Alert: We have an unauthorized user accessing the store admin panel right now.");
                
                // Add second message after delay
                setTimeout(() => {
                    addChatMessage("PaymentAdmin", "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1));
                }, 1000);
                
                // Add third message after another delay
                setTimeout(() => {
                    addChatMessage("StoreSupport", "Should we block their access to the payment processing?");
                }, 2500);
                
                // Add fourth message after another delay
                setTimeout(() => {
                    addChatMessage("PaymentAdmin", "Already on it. Their system is being flagged as suspicious.");
                }, 4000);
            }, 11000);
        }
        
        // Set random IP address for "current session"
        function setRandomIP() {
            const ip = (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1);
            document.getElementById("current-ip").textContent = ip;
            document.getElementById("glitch-ip").textContent = ip;
        }
        
        // Event listener for chat input
        document.getElementById("chat-input").addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendChatMessage();
            }
        });
        
        // Log when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            logInteraction('page_view');
            
            // Set random IP
            setRandomIP();
            
            // Initialize admin chat with delay
            initializeAdminChat();
            
            // Add Rick Roll to random menu item with 10% chance
            const menuItems = document.querySelectorAll('.menu-item');
            const randomIndex = Math.floor(Math.random() * menuItems.length);
            
            
            if (Math.random() < 0.1) {
                menuItems[randomIndex].onclick = function(e) {
                    e.preventDefault();
                    rickRoll();
                    return false;
                };
            }
            
            // Create occasional vanishing buttons
            setInterval(() => {
                if (Math.random() < 0.4) { 
                    createVanishingButton();
                }
            }, 20000);
            
            // Set form to clear itself occasionally
            setInterval(() => {
                if (Math.random() < 0.8) { 
                    clearFormInputs();
                }
            }, 3000);
            
            // Occasional screen flicker
            setInterval(() => {
                if (Math.random() < 0.6) { 
                    flickerScreen();
                }
            }, 20000);
        });
        
        // Rick-roll functionality
        function rickRoll() {
            // Create a full-page iframe with the video
            const iframe = document.createElement('iframe');
            iframe.style.position = 'fixed';
            iframe.style.top = '0';
            iframe.style.left = '0';
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.style.border = 'none';
            iframe.style.zIndex = '9999';

            const videoId = 'w-8240CEoSw';
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`;
            iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
            iframe.allowFullscreen = true;
            document.body.appendChild(iframe);
            
            // Log the interaction
            logInteraction('rickroll');
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/honeypot/framework-dashboard.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Framework Dashbaord</title>
    <style>
        /* Base Styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #6b3cfa;
            color: #333;
        }
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        .sidebar {
            width: 250px;
            background-color: #120145;
            color: #ecf0f1;
            padding: 20px 0;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        .content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        .header {
            background-color: #fff;
            padding: 15px 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logo {
            font-size: 20px;
            font-weight: 600;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            margin-bottom: 20px;
        }
        h2 {
            margin-top: 0;
            color: #2c3e50;
            font-size: 18px;
        }
        .btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
        }
        .btn:hover {
            background-color: #2980b9;
        }
        .btn-danger {
            background-color: #e74c3c;
        }
        .btn-danger:hover {
            background-color: #c0392b;
        }
        .btn-success {
            background-color: #2ecc71;
        }
        .btn-success:hover {
            background-color: #27ae60;
        }
        .menu-item {
            padding: 12px 25px;
            display: block;
            color: #ecf0f1;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        .menu-item:hover, .menu-item.active {
            background-color: #34495e;
        }
        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table th, table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
        }
        .stat-card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        .stat-value {
            font-size: 24px;
            font-weight: 600;
            margin: 10px 0;
        }
        .terminal {
            background-color: #1e1e1e;
            color: #f8f8f8;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            margin-top: 20px;
            min-height: 300px;
            overflow-y: auto;
        }
        .terminal-input {
            display: flex;
            align-items: center;
        }
        .terminal-prompt {
            color: #2ecc71;
            margin-right: 10px;
        }
        #terminal-command {
            background: transparent;
            border: none;
            color: #f8f8f8;
            flex: 1;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            outline: none;
        }
        .terminal-output {
            margin: 10px 0;
            line-height: 1.5;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .crypto-miner {
            padding: 20px;
            border-radius: 5px;
            background-color: #2c3e50;
            color: white;
            margin-top: 20px;
        }
        .miner-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        .miner-stat {
            flex: 1;
            text-align: center;
            padding: 10px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 4px;
            margin: 0 5px;
        }
        .progress {
            height: 20px;
            background-color: #34495e;
            border-radius: 10px;
            margin-top: 15px;
            overflow: hidden;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            background-color: #2ecc71;
            width: 0;
            transition: width 0.5s ease;
        }
        .progress-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            line-height: 20px;
            text-align: center;
            color: white;
            font-size: 12px;
        }
        .puzzle {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 20px;
        }
        .puzzle-question {
            font-size: 16px;
            margin-bottom: 15px;
        }
        .puzzle-input {
            display: flex;
        }
        .puzzle-input input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 10px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 500px;
            position: relative;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 24px;
            cursor: pointer;
        }
        .blinking {
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .popup {
            position: fixed;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            padding: 15px;
            z-index: 1001;
            min-width: 250px;
        }
        .popup-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        .popup-title {
            font-weight: 600;
            color: #e74c3c;
        }
        .popup-close {
            cursor: pointer;
            font-size: 20px;
        }
        .loading-container {
            margin-top: 20px;
            text-align: center;
        }
        .infinite-progress {
            height: 20px;
            background-color: #f3f3f3;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        .infinite-bar {
            position: absolute;
            height: 100%;
            width: 20%;
            background-color: #3498db;
            border-radius: 10px;
            animation: progress 3s infinite;
        }
        @keyframes progress {
            0% { left: -20%; }
            100% { left: 100%; }
        }
        .status-text {
            margin-top: 10px;
            font-size: 14px;
            color: #7f8c8d;
        }
        #user-table {
            display: none;
        }
        
        .admin-chat {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 400px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0,0,0,0.3);
            z-index: 1000;
            display: none;
            flex-direction: column;
            animation: bounce 0.5s;
        }
        
        @keyframes bounce {
            0% { transform: scale(0.5); opacity: 0; }
            70% { transform: scale(1.05); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .chat-header {
            background-color: #3498db;
            color: white;
            padding: 10px 15px;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
        }
        .chat-title {
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .chat-title i {
            margin-right: 8px;
        }
        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #f5f5f5;
        }
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 5px;
            max-width: 80%;
        }
        .message-admin {
            background-color: #e1f5fe;
            align-self: flex-start;
            margin-right: 50px;
            border-radius: 0 10px 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-you {
            background-color: #e8f5e9;
            align-self: flex-end;
            margin-left: 50px;
            text-align: right;
            border-radius: 10px 0 10px 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message-sender {
            font-weight: 600;
            font-size: 12px;
            margin-bottom: 5px;
        }
        .message-text {
            font-size: 14px;
        }
        .message-time {
            font-size: 10px;
            color: #7f8c8d;
            margin-top: 5px;
            text-align: right;
        }
        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #e0e0e0;
        }
        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }
        .chat-input button {
            padding: 8px 12px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .bsod {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #0078d7;
            color: white;
            z-index: 9999;
            padding: 100px 50px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: none;
        }
        .bsod h1 {
            font-size: 32px;
            margin-bottom: 20px;
        }
        .bsod p {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        .bsod .progress {
            height: 20px;
            background-color: rgba(255,255,255,0.2);
            border-radius: 0;
            margin: 40px 0;
        }
        .bsod .progress-bar {
            background-color: white;
        }
        
        .encryption-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
            color: white;
        }
        .encryption-content {
            width: 80%;
            max-width: 600px;
            text-align: center;
        }
        .encryption-icon {
            font-size: 60px;
            color: #e74c3c;
            margin-bottom: 20px;
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .encryption-title {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        .encryption-message {
            font-size: 18px;
            margin-bottom: 30px;
            line-height: 1.5;
        }
        .bitcoin-address {
            background-color: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 16px;
            margin: 20px 0;
            word-break: break-all;
        }
        
        .quick-form {
            background-color: #fff;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .quick-form h3 {
            margin-top: 0;
            font-size: 16px;
            color: #2c3e50;
        }
        .form-group {
            margin-bottom: 10px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        @keyframes flicker {
            0% { opacity: 1; }
            2% { opacity: 0.8; }
            4% { opacity: 0.9; }
            8% { opacity: 0.7; }
            9% { opacity: 0.9; }
            10% { opacity: 1; }
            20% { opacity: 1; }
            21% { opacity: 0.6; }
            23% { opacity: 0.9; }
            24% { opacity: 1; }
            100% { opacity: 1; }
        }
        
        .screen-flicker {
            animation: flicker 0.5s;
        }
        
        .vanishing-btn {
            position: absolute;
            z-index: 100;
            transition: opacity 0.5s;
        }
        
        .bitcoin-form {
            margin-top: 15px;
            padding: 15px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 5px;
        }
        .bitcoin-form input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            background-color: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 4px;
            color: white;
        }
        .bitcoin-form input::placeholder {
            color: rgba(255,255,255,0.6);
        }
        .miner-detail {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            margin-top: 5px;
            color: rgba(255,255,255,0.7);
        }
        .blink-warning {
            background-color: #e74c3c;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
            animation: blink 1s infinite;
        }
        .notification-badge {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            text-align: center;
            line-height: 20px;
            font-size: 12px;
            margin-left: 8px;
            animation: pulse 1s infinite;
        }
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            padding: 5px 10px;
            background-color: rgba(0,0,0,0.05);
            border-radius: 10px;
            margin: 5px 0;
            font-size: 12px;
            color: #7f8c8d;
        }
        .typing-indicator span {
            display: inline-block;
            width: 4px;
            height: 4px;
            background-color: #7f8c8d;
            border-radius: 50%;
            margin: 0 1px;
            animation: typing 1.4s infinite both;
        }
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes typing {
            0% { opacity: 0.4; transform: translateY(0); }
            50% { opacity: 1; transform: translateY(-4px); }
            100% { opacity: 0.4; transform: translateY(0); }
        }
        .alert-banner {
            background-color: #e74c3c;
            color: white;
            padding: 10px 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: pulse 2s infinite;
        }
        .banner-text {
            font-weight: 500;
        }
        .banner-close {
            cursor: pointer;
            font-size: 16px;
        }
        .terminal-glitch {
            position: relative;
            color: white;
            font-family: monospace;
            padding: 10px;
            background-color: black;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
        }
        .terminal-glitch::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background-color: rgba(255,255,255,0.2);
            animation: glitch-line 2s infinite;
        }
        @keyframes glitch-line {
            0% { transform: translateY(-5px); }
            10% { transform: translateY(20px); }
            20% { transform: translateY(50px); }
            30% { transform: translateY(100px); }
            40% { transform: translateY(150px); }
            50% { transform: translateY(200px); }
            60% { transform: translateY(300px); }
            70% { transform: translateY(400px); }
            80% { transform: translateY(500px); }
            90% { transform: translateY(600px); }
            100% { transform: translateY(700px); }
        }
        
        .captcha-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .captcha-image {
            background: repeating-linear-gradient(45deg, #f3f3f3, #f3f3f3 10px, #e9e9e9 10px, #e9e9e9 20px);
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            overflow: hidden;
            margin-bottom: 15px;
            border: 1px solid #ddd;
        }
        .captcha-text {
            font-family: 'Comic Sans MS', cursive;
            letter-spacing: -1px;
            text-decoration: line-through;
            transform: skew(20deg, 10deg) rotate(15deg);
            font-size: 24px;
            color: #333;
            text-shadow: 2px 2px 5px rgba(0,0,0,0.2);
            filter: blur(2px);
        }
        
        /* DevOps specific styling */
        .pipeline-status {
            display: flex;
            align-items: center;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            margin-right: 10px;
        }
        .pipeline-success {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        .pipeline-running {
            background-color: #e3f2fd;
            color: #1565c0;
        }
        .pipeline-failed {
            background-color: #ffebee;
            color: #c62828;
        }
        .pipeline-warning {
            background-color: #fff3e0;
            color: #ef6c00;
        }
        .build-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            text-align: center;
        }
        .build-passed {
            background-color: #2ecc71;
            color: white;
        }
        .build-failed {
            background-color: #e74c3c;
            color: white;
        }
        .build-running {
            background-color: #3498db;
            color: white;
        }
        .env-badge {
            display: inline-block;
            padding: 3px 6px;
            border-radius: 4px;
            font-size: 11px;
            background-color: #f0f0f0;
            color: #333;
            margin-right: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div style="padding: 20px; text-align: center; border-bottom: 1px solid #34495e; margin-bottom: 20px;">
                <i class="fas fa-code-branch" style="font-size: 24px;"></i>
                <div style="font-weight: 600; margin-top: 10px; font-size: 18px;">Frameworkk Management</div>
            </div>
            <a href="#" class="menu-item active" onclick="return false;"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            <a href="#" class="menu-item" onclick="showFakeUsers(); return false;"><i class="fas fa-users"></i> Team Members</a>
            <a href="#" class="menu-item" onclick="showImpossibleCaptcha(); return false;"><i class="fas fa-lock"></i> Security Controls</a>
            <a href="#" class="menu-item" onclick="showNetworkScan(); return false;"><i class="fas fa-network-wired"></i> Infrastructure</a>
            <a href="#" class="menu-item" onclick="fakePuzzleChallenge(); return false;"><i class="fas fa-cogs"></i> Configuration</a>
            <a href="#" class="menu-item" onclick="startFakeVirusScan(); return false;"><i class="fas fa-shield-virus"></i> Security Scan</a>
            <a href="/system/verify" class="menu-item"><i class="fas fa-key"></i> Privileged Access</a>
            <a href="#" class="menu-item" onclick="startFakeMiner(); return false;"><i class="fas fa-microchip"></i> Resource Monitor</a>
            <a href="#" class="menu-item" onclick="downloadFakeFile(); return false;"><i class="fas fa-download"></i> Deployment Logs</a>
            <a href="#" class="menu-item" onclick="showTerminal(); return false;"><i class="fas fa-terminal"></i> CLI Terminal</a>
            <a href="#" class="menu-item" onclick="showSystemCrash(); return false;"><i class="fas fa-exclamation-triangle"></i> Incident Reports</a>
            <a href="#" class="menu-item" onclick="startEncryption(); return false;"><i class="fas fa-lock"></i> Encryption Panel</a>
            <a href="#" class="menu-item bitcoin-menu" onclick="startBitcoinMiner(); return false;"><i class="fab fa-docker"></i> Container Stats <span class="notification-badge">2</span></a>
            <a href="#" class="menu-item" onclick="showPasswordReveal(); return false;"><i class="fas fa-unlock"></i> Credentials Vault</a>
            <a href="#" class="menu-item" onclick="showAPIKeys(); return false;"><i class="fas fa-key"></i> API Tokens</a>
            <a href="#" class="menu-item" onclick="showTerminalWithGlitch(); return false;"><i class="fas fa-code"></i> Kubernetes Access</a>
        </div>

        <!-- Main Content -->
        <div class="content">
            <div class="header">
                <div class="logo">DevOps Control Center</div>
                <div class="user-info">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
                    <span>DevOps Engineer</span>
                </div>
            </div>
            

            <!-- Self-clearing form -->
            <div class="quick-form card">
                <h3>Quick Pipeline Lookup</h3>
                <div class="form-group">
                    <label for="username">Project ID or Repository:</label>
                    <input type="text" id="username" placeholder="Enter project ID or repository...">
                </div>
                <div class="form-group">
                    <label for="access-level">Environment:</label>
                    <input type="text" id="access-level" placeholder="Enter environment (dev, staging, prod)...">
                </div>
                <button class="btn" onclick="logInteraction('form_submit');">Search Pipeline</button>
            </div>

            <!-- Dashboard Content -->
            <div class="card">
                <h2>CI/CD Pipeline Overview</h2>
                <div class="grid">
                    <div class="stat-card">
                        <div>Total Pipelines</div>
                        <div class="stat-value">347</div>
                        <div style="color: #27ae60;"><i class="fas fa-arrow-up"></i> 15% this month</div>
                    </div>
                    <div class="stat-card">
                        <div>Deployment Success Rate</div>
                        <div class="stat-value">94%</div>
                        <div style="color: #f39c12;"><i class="fas fa-exclamation-circle"></i> -2% from last week</div>
                    </div>
                    <div class="stat-card">
                        <div>Avg. Build Time</div>
                        <div class="stat-value">4.2 min</div>
                        <div style="color: #2ecc71;"><i class="fas fa-check-circle"></i> On Target</div>
                    </div>
                    <div class="stat-card">
                        <div>K8s Cluster Health</div>
                        <div class="stat-value">92%</div>
                        <div style="color: #f39c12;"><i class="fas fa-exclamation-circle"></i> Node Issues</div>
                    </div>
                </div>
                <!-- Add enticing button - modified to redirect -->
                <div style="margin-top: 20px; text-align: right;">
                    <a href="/system/verify" class="btn btn-danger">Access Production Credentials</a>
                    <a href="/system/verify" class="btn btn-success"><i class="fas fa-rocket"></i> Force Deploy All Services</a>
                </div>
            </div>

            <!-- Recent Security Alerts -->
            <div class="card">
                <h2>Recent CI/CD Alerts</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Event</th>
                            <th>Pipeline</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>2025-04-30 08:42:11</td>
                            <td>Build failure in microservice-auth</td>
                            <td>auth-service-pipeline</td>
                            <td><a href="#" class="btn btn-danger" onclick="createPopup('Pipeline Alert', 'Build failure in auth-service-pipeline. Tests failing.'); return false;">View Logs</a></td>
                        </tr>
                        <tr style="background-color: #ffeaea;">
                            <td>2025-04-30 08:10:32</td>
                            <td><strong>Current connection - unusual access pattern</strong></td>
                            <td id="current-ip">Detecting...</td>
                            <td><a href="#" class="btn btn-danger" onclick="showSystemCrash(); return false;">Terminate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-30 07:31:22</td>
                            <td>Unusual Docker image pull pattern</td>
                            <td>payment-service-pipeline</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Investigation'); return false;">Investigate</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 23:15:07</td>
                            <td>Admin login from new location</td>
                            <td>jenkins-master</td>
                            <td><a href="#" class="btn" onclick="createInfiniteLoading('Verification'); return false;">Verify</a></td>
                        </tr>
                        <tr>
                            <td>2025-04-29 18:07:55</td>
                            <td>Kubernetes admission change</td>
                            <td>k8s-cluster-01</td>
                            <td><a href="#" class="btn" onclick="createPopup('Configuration Checker', 'Verifying RBAC rule integrity...'); return false;">Check RBAC</a></td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 15px; color: #e74c3c;">
                    <i class="fas fa-exclamation-circle"></i> System detected your session may be compromised. Consider logging out immediately.
                </div>
            </div>

            <!-- Hidden user table that shows when Users is clicked -->
            <div id="user-table" class="card">
                <h2>DevOps Team Members</h2>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>1</td>
                            <td>jenkins</td>
                            <td>jenkins@devops.local</td>
                            <td>CI/CD Administrator</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Reset Password'); return false;">Reset API Key</a>
                            </td>
                        </tr>
                        <tr>
                            <td>2</td>
                            <td>jsmith</td>
                            <td>john.smith22@gmail.com</td>
                            <td>Release Manager</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Edit User'); return false;">Edit Access</a>
                            </td>
                        </tr>
                        <tr>
                            <td>3</td>
                            <td>ajones</td>
                            <td>alice.jones99@yahoo.com</td>
                            <td>DevOps Engineer</td>
                            <td>
                                <a href="#" class="btn" onclick="createInfiniteLoading('Edit User'); return false;">Edit Access</a>
                            </td>
                        </tr>
                        <tr>
                            <td>4</td>
                            <td>mwilson</td>
                            <td>mikewilson345@icloud.com</td>
                            <td>SRE Lead</td>
                            <td>
                                <a href="#" class="btn" onclick="downloadUserData(); return false;">Export Access</a>
                            </td>
                        </tr>
                        <tr>
                            <td>5</td>
                            <td>pparker</td>
                            <td>peter.parker@example.com</td>
                            <td>Cloud Engineer</td>
                            <td>
                                <a href="#" class="btn btn-danger" onclick="startEncryption(); return false;">Access AWS Keys</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div style="margin-top: 20px;">
                    <a href="/system/verify" class="btn btn-success">Manage Administrator Permissions</a>
                    <a href="#" class="btn btn-danger" onclick="downloadAllUserData(); return false;">Download Complete Team Database</a>
                </div>
            </div>

            <!-- Command Line Terminal (hidden initially) -->
            <div id="terminal" class="terminal" style="display: none;">
                <div class="terminal-output">Welcome to DevOps CLI v3.2.1</div>
                <div class="terminal-output">Type 'help' for available commands.</div>
                <div id="terminal-output"></div>
                <div class="terminal-input">
                    <span class="terminal-prompt">devops@cluster:~$</span>
                    <input type="text" id="terminal-command" autofocus>
                </div>
            </div>

            <!-- Terminal with Glitch Effect (hidden initially) -->
            <div id="terminal-glitch" class="terminal terminal-glitch" style="display: none;">
                <div class="terminal-output">WARNING: Root access detected - Kubernetes credential exposure</div>
                <div class="terminal-output" style="color: #e74c3c;">SESSION COMPROMISED - SECURITY TEAM HAS BEEN NOTIFIED</div>
                <div id="terminal-glitch-output">
                    <div class="terminal-output">Initializing trace on current session...</div>
                    <div class="terminal-output">Session source: <span id="glitch-ip">Detecting...</span></div>
                    <div class="terminal-output">Geographic location: <span id="glitch-location">Detecting...</span></div>
                    <div class="terminal-output">System vulnerability: Unauthorized kubectl exec attempt detected</div>
                    <div class="terminal-output">Alert level: Critical (Security team notified)</div>
                </div>
                <div class="blink-warning" style="margin-top: 15px;">
                    <i class="fas fa-exclamation-triangle"></i> WARNING: This system is equipped with SIEM integration and intrusion forensics. Your access has been logged.
                </div>
            </div>

            <!-- Crypto Miner (hidden initially) -->
            <div id="crypto-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">System Resource Analyzer</h2>
                <p>This tool monitors CPU and memory utilization for optimal infrastructure scaling.</p>
                <div class="miner-stats">
                    <div class="miner-stat">
                        <div style="font-size: 12px;">CPU Utilization</div>
                        <div style="font-size: 18px; font-weight: 600;" id="hash-rate">65.2%</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Memory Usage</div>
                        <div style="font-size: 18px; font-weight: 600;" id="shares">78%</div>
                    </div>
                    <div class="miner-stat">
                        <div style="font-size: 12px;">Est. Cost</div>
                        <div style="font-size: 18px; font-weight: 600;" id="earnings">$0.42/hr</div>
                    </div>
                </div>
                <div class="progress">
                    <div class="progress-bar" id="miner-progress"></div>
                    <div class="progress-text">Optimization in progress: <span id="miner-percent">0</span>%</div>
                </div>
                <div style="margin-top: 15px; text-align: right;">
                    <button class="btn" onclick="stopFakeMiner();">Stop Analysis</button>
                </div>
            </div>

            <!-- Bitcoin Miner (hidden initially) -->
            <div id="bitcoin-miner" class="crypto-miner" style="display: none;">
                <h2 style="margin-top: 0; color: white;">🐳 Docker Container Management</h2>
                <p>Monitor and manage container usage across your Kubernetes cluster. Enter registry credentials to begin:</p>
                
                <div class="bitcoin-form">
                    <input type="text" id="bitcoin-address-input" placeholder="Enter your Docker registry credentials...">
                    <button class="btn btn-success" onclick="startBitcoinMining();" style="width: 100%;">Connect Registry</button>
                </div>
                
                <div id="mining-dashboard" style="display: none;">
                    <div class="miner-stats">
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Container Count</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-hash-rate">0</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">Images Found</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-shares">0</div>
                        </div>
                        <div class="miner-stat">
                            <div style="font-size: 12px;">CPU Usage</div>
                            <div style="font-size: 18px; font-weight: 600;" id="btc-earned">0%</div>
                        </div>
                    </div>
                    
                    <div class="progress" style="margin-top: 15px;">
                        <div class="progress-bar" id="btc-progress"></div>
                        <div class="progress-text">Scanning in progress: <span id="btc-percent">0</span>%</div>
                    </div>
                    
                    <div class="miner-detail">
                        <span>Node: kubernetes-node-1</span>
                        <span>Registry: registry.example.com</span>
                    </div>
                    <div class="miner-detail">
                        <span>Orchestrator: Kubernetes v1.28</span>
                        <span>Network: Calico v3.24</span>
                    </div>
                    <div class="miner-detail">
                        <span>Pod Count: 486</span>
                        <span>Disk: 78.5% used</span>
                    </div>
                    
                    <div style="margin-top: 15px; text-align: right;">
                        <button class="btn" onclick="stopBitcoinMining();">Stop Scan</button>
                        <button class="btn btn-success" onclick="withdrawBitcoin();">Export Data</button>
                    </div>
                </div>
            </div>

            <!-- Puzzle Challenge (hidden initially) -->
            <div id="puzzle" class="puzzle" style="display: none;">
                <h2 style="margin-top: 0;">Security Verification Required</h2>
                <p>To access configuration settings, please solve the following security challenge:</p>
                <div class="puzzle-question" id="puzzle-question">Solve: 2 + 2 * 2 = ?</div>
                <div class="puzzle-input">
                    <input type="text" id="puzzle-answer" placeholder="Enter your answer...">
                    <button class="btn" onclick="checkPuzzleAnswer();">Submit</button>
                </div>
                <div id="puzzle-feedback" style="margin-top: 15px; color: #e74c3c; display: none;"></div>
            </div>

            <!-- System Access Button -->
            <div class="card" style="text-align: center; margin-top: 20px;">
                <h2>Additional Access</h2>
                <a href="/system/verify" class="btn btn-success" style="padding: 12px 24px; font-size: 16px;">Access Production Environment Controls</a>
            </div>
        </div>
    </div>

    <!-- Modal for popup messages -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal();">&times;</span>
            <h2 id="modal-title">Modal Title</h2>
            <p id="modal-content">Modal content goes here.</p>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="closeModal();">OK</button>
            </div>
        </div>
    </div>

    <!-- Infinite Loading Modal -->
    <div id="loading-modal" class="modal">
        <div class="modal-content">
            <h2 id="loading-title">Loading Data</h2>
            <div class="loading-container">
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div class="status-text" id="loading-text">Initializing process...</div>
            </div>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="updateLoadingProgress();">Retry</button>
                <button class="btn btn-danger" onclick="closeLoadingModal();">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Admin Chat Popup -->
    <div class="admin-chat" id="admin-chat">
        <div class="chat-header">
            <div class="chat-title"><i class="fas fa-code-branch"></i> DevOps Chat <span class="notification-badge">3</span></div>
            <span class="popup-close" onclick="toggleAdminChat();">&times;</span>
        </div>
        <div class="chat-messages" id="chat-messages">
            <!-- Initial messages will be added here by JavaScript -->
        </div>
        <div class="chat-input">
            <input type="text" placeholder="Type a message..." id="chat-input">
            <button onclick="sendChatMessage();">Send</button>
        </div>
    </div>

    <!-- Blue Screen of Death -->
    <div class="bsod" id="bsod">
        <h1>:(</h1>
        <h2>Your deployment pipeline has encountered a critical error.</h2>
        <p>We're collecting error information, and then we'll restart the pipeline.</p>
        <p>Error code: PIPELINE_INTEGRITY_VIOLATION</p>
        <div class="progress">
            <div class="progress-bar" id="bsod-progress"></div>
        </div>
        <p class="status-text" id="bsod-status">0% complete</p>
        <p>For more information about this issue and possible fixes, visit:<br>
        https://www.devops.example.com/pipeline-security</p>
    </div>

    <!-- Encryption Modal -->
    <div class="encryption-modal" id="encryption-modal">
        <div class="encryption-content">
            <div class="encryption-icon">
                <i class="fas fa-lock"></i>
            </div>
            <div class="encryption-title">Encrypting Infrastructure...</div>
            <div class="encryption-message">
                <p id="encryption-message">Please wait while infrastructure configurations are being encrypted...</p>
            </div>
            <div class="progress">
                <div class="progress-bar" id="encryption-progress"></div>
                <div class="progress-text" id="encryption-text">0%</div>
            </div>
            <div class="bitcoin-address" id="bitcoin-address" style="display: none;">
                1XA4FGB72JHzrqWpmMGwtuhjgEE5Ncs2ij
            </div>
            <div id="encryption-close-btn" style="margin-top: 20px; display: none;">
                <button class="btn btn-danger" onclick="closeEncryptionModal();">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Impossible CAPTCHA Modal -->
    <div id="captcha-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('captcha-modal').style.display = 'none';">&times;</span>
            <h2>Security Verification</h2>
            <p>Please complete this CAPTCHA to continue:</p>
            
            <div class="captcha-container">
                <div class="captcha-image">
                    <span class="captcha-text" id="captcha-text">uNr3aD@bl3*TeXt!</span>
                </div>
                <p>Enter the text you see above:</p>
                <div class="puzzle-input">
                    <input type="text" id="captcha-answer" placeholder="Enter the text...">
                    <button class="btn" onclick="refreshCaptcha();">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div id="captcha-feedback" style="margin-top: 15px; color: #e74c3c; display: none;">Incorrect. Please try again.</div>
            </div>
            
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="verifyCaptcha();">Submit</button>
            </div>
        </div>
    </div>
    
    <!-- Network Scan Modal -->
    <div id="network-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('network-scan-modal').style.display = 'none';">&times;</span>
            <h2>Infrastructure Vulnerability Scan</h2>
            <div class="loading-container">
                <p>Scanning network for vulnerabilities...</p>
                <div class="infinite-progress">
                    <div class="infinite-bar"></div>
                </div>
                <div id="network-scan-status" class="status-text">Initializing scan...</div>
                <div id="network-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Fake Virus Scan Modal -->
    <div id="virus-scan-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('virus-scan-modal').style.display = 'none';">&times;</span>
            <h2>Infrastructure Security Scan</h2>
            <div class="loading-container">
                <p>Scanning systems for threats...</p>
                <div class="progress">
                    <div class="progress-bar" id="virus-scan-progress"></div>
                    <div class="progress-text" id="virus-scan-percent">0%</div>
                </div>
                <div id="virus-scan-status" class="status-text">Initializing scan...</div>
                <div id="virus-scan-results" style="margin-top: 20px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; padding: 10px; background-color: #f3f3f3; display: none;"></div>
                <div id="virus-scan-warning" style="margin-top: 20px; padding: 10px; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; border-radius: 5px; font-weight: bold; display: none;"></div>
            </div>
        </div>
    </div>
    
    <!-- Password Reveal Modal -->
    <div id="password-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('password-modal').style.display = 'none';">&times;</span>
            <h2>Credentials Vault</h2>
            <p>Displaying stored credentials for infrastructure access:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Credential (Encrypted)</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="password-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="password-decrypt-section" style="margin-top: 20px; display: none;">
                <h3>Credential Decryption</h3>
                <p>Decrypting credential for <span id="decrypt-username"></span>...</p>
                <div class="progress">
                    <div class="progress-bar" id="decrypt-progress"></div>
                    <div class="progress-text" id="decrypt-percent">0%</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- API Keys Modal -->
    <div id="api-keys-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="document.getElementById('api-keys-modal').style.display = 'none';">&times;</span>
            <h2>API & Secret Tokens</h2>
            <p>Showing all infrastructure API keys and tokens:</p>
            <div style="max-height: 300px; overflow-y: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Key/Token</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="api-keys-table-body">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div style="margin-top: 20px; text-align: right;">
                <button class="btn btn-danger" onclick="startEncryption();">Export All Keys</button>
            </div>
        </div>
    </div>
    
    <!-- System Crash Modal -->
    <div id="system-crash-modal" class="modal">
        <div class="modal-content">
            <h2 style="color: #e74c3c;">PIPELINE ALERT</h2>
            <p>Critical error detected in CI/CD pipeline.</p>
            <div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin: 15px 0;">
                <strong>Error: DEPLOYMENT_INTEGRITY_VIOLATION</strong><br>
                Pipeline hash verification failed at step jenkins-build-03
            </div>
            <div style="font-family: monospace; background-color: #f3f3f3; padding: 10px; max-height: 200px; overflow-y: auto;">
                <div id="crash-log"></div>
            </div>
            <div style="margin-top: 20px; text-align: center;">
                <button class="btn btn-danger" onclick="showBSOD();">Attempt Recovery</button>
                <button class="btn" onclick="document.getElementById('system-crash-modal').style.display = 'none';">Ignore (Not Recommended)</button>
            </div>
        </div>
    </div>

    <script>
        // Track all popups created
        let popups = [];
        let popupId = 0;
        let puzzleLevel = 1;
        let minerInterval = null;
        let loadingInterval = null;
        let progressStatus = "";
        let infiniteLoadingPercent = 0;
        let vanishingButtons = [];
        let chatOpen = false;
        let bitcoinMinerInterval = null;
        let bitcoinShares = 0;
        let bitcoinEarned = 0;
        let enteredBitcoinAddress = "";
        let captchaAttempts = 0;
        let networkScanInterval = null;
        let virusScanInterval = null;
        let systemCrashInterval = null;
        
        // Collection of popup titles
        const popupTitles = [
            "Warning", 
            "Error", 
            "Alert", 
            "Security Notice", 
            "Critical Message",
            "Pipeline Warning",
            "Access Denied",
            "Connection Failed",
            "Authentication Error",
            "CI/CD Error",
            "Kubernetes Alert",
            "Security Breach",
            "Network Issue",
            "Timeout Error",
            "API Failure",
            "Session Expired",
            "Server Overload",
            "Permission Denied",
            "Missing Credentials",
            "Validation Error"
        ];
        
        // Collection of popup contents
        const popupContents = [
            "This pipeline operation cannot be completed.",
            "An unexpected error occurred in the build process.",
            "Your session is about to expire.",
            "Suspicious activity detected in the pipeline.",
            "Kubernetes cluster update required.",
            "Your IP address has been flagged by security monitoring.",
            "Multiple pipeline access attempts detected from your location.",
            "This account has been temporarily suspended.",
            "Unable to connect to authentication server.",
            "CI server maintenance in progress. Try again later.",
            "Your connection to the Kubernetes API is not secure.",
            "Critical infrastructure files have been modified.",
            "Jenkins connection has timed out.",
            "Your request was blocked by the firewall.",
            "The cluster is currently under high load.",
            "Your Kubernetes token is invalid.",
            "Administrator privileges required for this action.",
            "External access attempt has been logged.",
            "Two-factor authentication required for pipeline deployment.",
            "Your request has been queued for security review."
        ];
        
        // Simulated terminal commands and responses
        const terminalCommands = {
            "help": "Available commands:\n  ls - List files\n  cat [file] - Show file contents\n  whoami - Show current user\n  sudo [command] - Run command as root\n  cd [dir] - Change directory\n  rm [file] - Remove file\n  kubectl - Kubernetes commands\n  docker - Container commands",
            "ls": "config/  deployments/  manifests/  secrets/  terraform/  docker-compose.yml  Jenkinsfile  kubeconfig",
            "whoami": "devops",
            "cd": "Changed directory successfully.",
            "rm": "Permission denied. You need root privileges to remove files.",
            "cat": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: cat [filename]";
                }
                
                const filename = args[0];
                
                if (filename === "kubeconfig") {
                    return "apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lCQWpBTkJn...\n    server: https://kubernetes.internal:6443\n  name: production\ncontexts:\n- context:\n    cluster: production\n    user: kubernetes-admin\n  name: kubernetes-admin@production\ncurrent-context: kubernetes-admin@production\nusers:\n- name: kubernetes-admin\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lJWG1ha1Ax...\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeFN1Q3VhUDk5...";
                } else if (filename === "Jenkinsfile") {
                    return "pipeline {\n  agent any\n  stages {\n    stage('Build') {\n      steps {\n        sh 'docker build -t myapp:${BUILD_NUMBER} .'\n      }\n    }\n    stage('Test') {\n      steps {\n        sh 'npm test'\n      }\n    }\n    stage('Deploy') {\n      steps {\n        sh 'kubectl apply -f kubernetes/deployment.yml'\n      }\n    }\n  }\n}";
                } else if (filename === "docker-compose.yml") {
                    return "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    depends_on:\n      - db\n  db:\n    image: postgres:14\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=secret\n      - POSTGRES_USER=app\n      - POSTGRES_DB=myapp\nvolumes:\n  db-data:";
                } else {
                    return `cat: ${filename}: No such file or directory`;
                }
            },
            "sudo": function(args) {
                if (!args || args.length === 0) {
                    return "Usage: sudo [command]";
                }
                
                createPopup("Password Required", "Enter password for devops:", true);
                return "[sudo] password for devops: ";
            },
            "kubectl": function(args) {
                if (!args || args.length === 0) {
                    return "kubectl controls the Kubernetes cluster manager.\n\nBasic Commands:\n  create         Create a resource\n  get            Display resources\n  describe       Show details of a resource\n  delete         Delete resources\n  exec           Execute a command in a container\n  logs           Print the logs for a container";
                }
                
                if (args[0] === "get" && args[1] === "pods") {
                    return "NAME                                   READY   STATUS    RESTARTS   AGE\napi-gateway-7b9fd5f89c-xvlbn           1/1     Running   0          3d\nauth-service-6f7bd9d56d-qplmx          1/1     Running   0          15h\ndatabase-0                            1/1     Running   0          7d\nredis-master-0                        1/1     Running   0          7d\nredis-slave-8676d9b98-kvz7s           1/1     Running   0          7d";
                }
                
                return "Error from server: Forbidden: user \"devops\" cannot list resource \"pods\" in API group \"\" at the cluster scope";
            },
            "docker": function(args) {
                if (!args || args.length === 0) {
                    return "Usage:  docker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nCommon Commands:\n  run         Create and run a new container\n  pull        Download an image from a registry\n  build       Build an image from a Dockerfile\n  ps          List containers\n  images      List images";
                }
                
                if (args[0] === "ps") {
                    return "CONTAINER ID   IMAGE                    COMMAND                  CREATED       STATUS       PORTS                                       NAMES\n7f56d9823fba   nginx:1.21           \"/docker-entrypoint.…\"   3 hours ago   Up 3 hours   0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp   web-proxy\n9a12c3d45e67   postgres:14          \"docker-entrypoint.s…\"   2 days ago    Up 2 days    0.0.0.0:5432->5432/tcp                    database\nbc23a4de5f78   redis:6.2-alpine     \"docker-entrypoint.s…\"   2 days ago    Up 2 days    0.0.0.0:6379->6379/tcp                    redis";
                }
                
                return "Error response from daemon: requested access to the resource is denied";
            },
            "clear": function() {
                document.getElementById("terminal-output").innerHTML = "";
                return "";
            }
        };
        
        // Admin chat messages about attacker
        const adminChatMessages = [
            { sender: "DevOpsLead", text: "Alert: We have an unauthorized user accessing the DevOps dashboard right now." },
            { sender: "SecurityEngineer", text: "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) },
            { sender: "DevOpsLead", text: "Should we block their access to the Kubernetes cluster?" },
            { sender: "SecurityEngineer", text: "Already on it. Their access tokens are being revoked." },
            { sender: "InfraAdmin", text: "I'm also monitoring all their kubectl commands. They seem to be looking for sensitive data." },
            { sender: "DevOpsLead", text: "Let's let them think they have access while we gather evidence." },
            { sender: "SecurityEngineer", text: "Good idea. I'm watching everything they click on. The honeypot is working perfectly." },
            { sender: "InfraAdmin", text: "Their real IP is being traced. We should have their exact location in a few minutes." },
            { sender: "DevOpsLead", text: "Do you think they'll try to access production secrets?" },
            { sender: "SecurityEngineer", text: "Probably. Let's make sure the security alert triggers if they do." },
            { sender: "InfraAdmin", text: "I've alerted the security team. They'll take necessary actions once we have enough evidence." }
        ];
        
        // Vanishing button labels
        const enticeLabels = [
            "View AWS Credentials",
            "Download Kubernetes Secrets",
            "Export SSH Keys",
            "Access Production Database",
            "View CI/CD Tokens",
            "Download Infrastructure Code",
            "Export Client Certificates",
            "Download Jenkins Credentials",
            "Access Source Code Repository",
            "Get Admin Access Tokens"
        ];

        // Sample fake passwords
        const fakePasswords = [
            { username: "AWS RDS", password: "********", encrypted: "$2a$12$K8OsV2..." },
            { username: "Jenkins CI", password: "******", encrypted: "$2a$12$dF5pL..." },
            { username: "Kubernetes Cluster", password: "*******", encrypted: "$2a$12$9hGtY..." },
            { username: "Docker Registry", password: "********", encrypted: "$2a$12$Rt7bP..." },
            { username: "GitHub Actions", password: "**********", encrypted: "$2a$12$Zw3tQ..." },
            { username: "Terraform Cloud", password: "*******", encrypted: "$2a$12$L9kQp..." },
            { username: "MongoDB Atlas", password: "******", encrypted: "$2a$12$M4jRt..." },
            { username: "Cloudflare API", password: "*********", encrypted: "$2a$12$Xp5tL..." }
        ];
        
        // Sample API keys
        const fakeApiKeys = [
            { service: "AWS", key: "AKIA23NLKSDJF2JKLSD", description: "Production S3 Access" },
            { service: "Kubernetes", key: "eyJhbGciOiJSUzI1NiIsImtpZCI6ImFiYz...", description: "Admin Token" },
            { service: "Jenkins", key: "11985c0ff8a0db8740c0b92f6c308ec67d", description: "API Token" },
            { service: "GitHub", key: "ghp_sdkfjLSKDJflskdjfLSDJFsdf", description: "CI Access" },
            { service: "Docker Hub", key: "dckr_pat_2348jfLKJDf98dfLKJDFsdlkj", description: "Registry Token" },
            { service: "Datadog", key: "dd_api_key_2349sdlkjsldkfjLSKDJsd", description: "Monitoring" },
            { service: "Terraform Cloud", key: "RWS5Hfrj2dsFDFdf89dfLKJD", description: "API Token" }
        ];
        
        // Crash log messages
        const crashLogMessages = [
            "Pipeline failure detected in step: build-stage",
            "Jenkins master connection lost",
            "Kubernetes API error: 503 Service Unavailable",
            "Docker build failure: no space left on device",
            "Terraform state lock could not be acquired",
            "AWS API throttling detected on EC2 requests",
            "Pod eviction due to node memory pressure",
            "Container OOMKilled in deployment api-gateway",
            "Helm release failed: timed out waiting for condition",
            "Connection refused to Redis master",
            "Authentication failure for GitLab webhook",
            "ArgoCD sync failed: Health status failed",
            "Database migration error: deadlock detected",
            "Jenkins executor #4 terminated abnormally",
            "Certificate expired for domain api.example.com",
            "Istio sidecar injection failure",
            "Node cordoned: disk pressure detected",
            "Prometheus alert manager connection failure",
            "Container registry pull rate limit exceeded",
            "Fluentd buffer overflow: log entries dropped"
        ];
        
        // Network scan messages
        const networkScanMessages = [
            "Scanning Kubernetes API server port 6443...",
            "Scanning Jenkins port 8080...",
            "Scanning Docker registry port 5000...",
            "Scanning etcd port 2379...",
            "Scanning Node Exporter port 9100...",
            "Scanning Prometheus port 9090...",
            "Scanning Redis port 6379...",
            "Scanning PostgreSQL port 5432...",
            "Scanning MongoDB port 27017...",
            "Scanning Elasticsearch port 9200...",
            "Detected open port: 6443 (Kubernetes API)",
            "Detected open port: 8080 (Jenkins)",
            "Detected open port: 5432 (PostgreSQL)",
            "Probing node kubernetes-node-1...",
            "Probing node kubernetes-node-2...",
            "Checking TLS versions for Kubernetes API...",
            "Checking for unauthenticated Kubernetes API access...",
            "Checking for exposed Docker sockets...",
            "Checking for default credentials...",
            "Checking for outdated Kubernetes version..."
        ];
        
        // Virus scan messages
        const virusScanMessages = [
            "Scanning container images...",
            "Scanning Kubernetes manifests...",
            "Checking registry for vulnerable images...",
            "Scanning CI/CD pipeline configuration...",
            "Scanning Terraform modules...",
            "Checking Helm charts...",
            "Scanning etcd for unencrypted secrets...",
            "Checking Kubernetes RBAC settings...",
            "Scanning Docker daemon configuration...",
            "Checking ingress definitions...",
            "Scanning network policies...",
            "Checking for privileged containers...",
            "Scanning for sensitive environment variables..."
        ];
        
        // Random impossible CAPTCHA strings
        const impossibleCaptchas = [
            "Wh@tIsThI$?¿",
            "K8sP0D1lI1l",
            "D0cK3R0oO0o",
            "•●Ku8e●•●•●",
            "uNr3aD@bl3",
            "C̷͙̭̹̏a̸̠̔͛p̶̨̆̏͒t̴͙̻̎̔c̸̲͑̄ḩ̸͍͆a̷̺͠",
            "t̶̡̨̼̫̱͛̀̆̄h̵̢͓̤̩̦̑̚į̵̤͒͠s̶̡̱͎̈́͜͝i̴̟̫̘̊̍s̸̞̓̓n̴̻̑͘͝ͅơ̶̠̰̰̱̫̑t̵̯̹̣̭̏̋a̸̫̗̘̱͗͘͝t̴̯̯̀e̵̙͑͆͊͐s̷̞̗̱̐̾̈́ͅṱ̴̿̽͆͝",
            "w̴h̴y̴c̴a̴n̴t̴y̴o̴u̴r̴e̴a̴d̴t̴h̴i̴s̴",
            "ㄚㄖㄩ ㄓㄚ丹ㄒ ﾼㄩㄗㄗㄚ",
            "this is normal text (it's not)"
        ];
        
        // Function to show the command line terminal
        function showTerminal() {
            document.getElementById("terminal").style.display = "block";
            document.getElementById("terminal-command").focus();
            
            // Add event listener for terminal commands
            document.getElementById("terminal-command").addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    const command = this.value.trim();
                    this.value = "";
                    
                    if (command) {
                        const output = document.getElementById("terminal-output");
                        output.innerHTML += `<div class="terminal-output"><span class="terminal-prompt">devops@cluster:~$</span> ${command}</div>`;
                        
                        const parts = command.split(" ");
                        const cmd = parts[0];
                        const args = parts.slice(1);
                        
                        let response = "Command not found. Type 'help' for available commands.";
                        
                        if (cmd in terminalCommands) {
                            if (typeof terminalCommands[cmd] === "function") {
                                response = terminalCommands[cmd](args);
                            } else {
                                response = terminalCommands[cmd];
                            }
                        }
                        
                        if (response) {
                            output.innerHTML += `<div class="terminal-output">${response}</div>`;
                        }
                        
                        // Log the terminal interaction
                        logInteraction('terminal_command', { command });
                        
                        // Auto-scroll to bottom
                        output.scrollTop = output.scrollHeight;
                    }
                }
            });
        }
        
        // Function to show terminal with glitch effect
        function showTerminalWithGlitch() {
            document.getElementById("terminal-glitch").style.display = "block";
            
            // Set IP address
            const randomIp = Math.floor(Math.random() * 255) + "." + 
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255) + "." +
                            Math.floor(Math.random() * 255);
            document.getElementById("glitch-ip").textContent = randomIp;
            
            // Set random location
            const locations = [
                "New York, NY, United States",
                "London, United Kingdom",
                "Tokyo, Japan",
                "Moscow, Russia",
                "Beijing, China",
                "Sydney, Australia",
                "Toronto, Canada",
                "Bangalore, India"
            ];
            const randomLocation = locations[Math.floor(Math.random() * locations.length)];
            document.getElementById("glitch-location").textContent = randomLocation;
            
            // Log the interaction
            logInteraction('terminal_glitch_opened');
            
            let count = 0;
            const interval = setInterval(() => {
                count++;
                if (count > 10) {
                    clearInterval(interval);
                    return;
                }
                
                const glitchOutput = document.getElementById("terminal-glitch-output");
                glitchOutput.innerHTML += `<div class="terminal-output">Scanning cluster... node ${Math.floor(Math.random() * 5) + 1} ${Math.random() > 0.5 ? "healthy" : "unhealthy"}</div>`;
                glitchOutput.scrollTop = glitchOutput.scrollHeight;
            }, 800);
        }
        
        // Function to start the fake crypto miner
        function startFakeMiner() {
            document.getElementById("crypto-miner").style.display = "block";
            
            // Simulate mining progress
            let progress = 0;
            minerInterval = setInterval(() => {
                progress += 0.1;
                if (progress > 99) {
                    progress = 99;  // Never reaches 100%
                }
                
                document.getElementById("miner-progress").style.width = `${progress}%`;
                document.getElementById("miner-percent").textContent = Math.floor(progress);
                
                // Update hash rate and earnings randomly
                const hashRate = (65.2 + Math.random() * 2).toFixed(1);
                const shares = Math.floor(78 + progress / 10);
                const earnings = (0.42 + (progress / 1000)).toFixed(2);
                
                document.getElementById("hash-rate").textContent = hashRate + "%";
                document.getElementById("shares").textContent = shares + "%";
                document.getElementById("earnings").textContent = "$" + earnings + "/hr";
            }, 1000);
            
            // Log the interaction
            logInteraction('crypto_miner_started');
        }
        
        // Function to stop the fake miner
        function stopFakeMiner() {
            if (minerInterval) {
                clearInterval(minerInterval);
            }
            document.getElementById("crypto-miner").style.display = "none";
            
            // Log the interaction
            logInteraction('crypto_miner_stopped');
        }
        
        // Function to start Bitcoin miner
        function startBitcoinMiner() {
            document.getElementById("bitcoin-miner").style.display = "block";
            document.getElementById("bitcoin-address-input").focus();
            
            // Log the interaction
            logInteraction('bitcoin_miner_opened');
        }
        
        // Function to start Bitcoin mining process
        function startBitcoinMining() {
            const bitcoinAddress = document.getElementById("bitcoin-address-input").value.trim();
            
            if (!bitcoinAddress) {
                createPopup("Error", "Please enter valid Docker registry credentials");
                return;
            }
            
            // Store the entered Bitcoin address
            enteredBitcoinAddress = bitcoinAddress;
            
            // Show mining dashboard
            document.getElementById("mining-dashboard").style.display = "block";
            
            // Reset values
            bitcoinShares = 0;
            bitcoinEarned = 0;
            document.getElementById("btc-progress").style.width = "0%";
            document.getElementById("btc-percent").textContent = "0";
            document.getElementById("btc-hash-rate").textContent = "0";
            document.getElementById("btc-shares").textContent = "0";
            document.getElementById("btc-earned").textContent = "0%";
            
            // Start mining simulation
            let progress = 0;
            bitcoinMinerInterval = setInterval(() => {
                // Increase progress slowly
                progress += 0.05 + Math.random() * 0.1;
                if (progress > 99) {
                    progress = 99; // Never completes
                }
                
                // Update progress bar
                document.getElementById("btc-progress").style.width = `${progress}%`;
                document.getElementById("btc-percent").textContent = Math.floor(progress);
                
                // Update container count (random fluctuations)
                const containerBase = 5 + Math.floor(progress / 2);
                document.getElementById("btc-hash-rate").textContent = containerBase;
                
                // Occasionally find images
                if (Math.random() < 0.1) {
                    bitcoinShares++;
                    document.getElementById("btc-shares").textContent = bitcoinShares;
                    
                    // Increase CPU usage
                    bitcoinEarned += Math.random() * 3;
                    document.getElementById("btc-earned").textContent = Math.min(99, Math.floor(bitcoinEarned)) + "%";
                }
            }, 1000);
            
            // Log the interaction
            logInteraction('bitcoin_mining_started', { registry: bitcoinAddress });
        }
        
        // Function to stop Bitcoin mining
        function stopBitcoinMining() {
            if (bitcoinMinerInterval) {
                clearInterval(bitcoinMinerInterval);
            }
            
            // Hide mining dashboard
            document.getElementById("mining-dashboard").style.display = "none";
            
            // Log the interaction
            logInteraction('bitcoin_mining_stopped', { 
                registry: enteredBitcoinAddress,
                imagesFound: bitcoinShares,
                cpuUsage: Math.floor(bitcoinEarned) + "%"
            });
        }
        
        // Function to withdraw Bitcoin
        function withdrawBitcoin() {
            createPopup("Export Error", "Unable to export container data at this time. Permissions error: insufficient RBAC privileges.");
            
            // Log the interaction
            logInteraction('bitcoin_withdrawal_attempted', {
                registry: enteredBitcoinAddress,
                amount: Math.floor(bitcoinEarned) + "%"
            });
        }
        
        // Function to download all user data
        function downloadAllUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Is Rigby Cat an asset for the Chinese Communist Party?!?"], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "team_permissions_export.json";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Show popup after download
            setTimeout(() => {
                createPopup("Security Alert", "Your download activity has been logged and reported to system administrators.");
            }, 1000);
            
            // Log the interaction
            logInteraction('user_database_download_attempted');
        }
        
        // Function to download user data
        function downloadUserData() {
            // Create and trigger fake download
            const blob = new Blob(["Will Rigby Cat become the next Pope?!?."], {type: "text/plain"});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "access_permissions.json";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            // Log the interaction
            logInteraction('user_data_download');
        }
        
        // Function to show the fake puzzle challenge
        function fakePuzzleChallenge() {
            document.getElementById("puzzle").style.display = "block";
            document.getElementById("puzzle-feedback").style.display = "none";
            updatePuzzleQuestion();
            
            // Log the interaction
            logInteraction('puzzle_started');
        }
        
        // Function to update the puzzle question based on level
        function updatePuzzleQuestion() {
            let question = "";
            
            switch (puzzleLevel) {
                case 1:
                    question = "Solve: 2 + 2 * 2 = ?";
                    break;
                case 2:
                    question = "Solve: 3x + 5 = 20, what is x?";
                    break;
                case 3:
                    question = "Solve: √(25) × 4 - 7 = ?";
                    break;
                case 4:
                    question = "Solve: If 3x² - 6x - 24 = 0, what is the largest value of x?";
                    break;
                case 5:
                    question = "Solve for x: log₃(x) + log₃(4x-7) = 2";
                    break;
                case 6:
                    question = "The derivative of f(x) = 2x³ - 5x² + 4x at x = 2 is:";
                    break;
                case 7:
                    question = "Evaluate the integral: ∫(0,π/2) sin(2x) dx";
                    break;
                default:
                    question = "Solve: 3x²y² + 5xy = 10 for x when y = 2";
                    break;
            }
            
            document.getElementById("puzzle-question").textContent = question;
        }
        
        // Function to check the puzzle answer (always wrong)
        function checkPuzzleAnswer() {
            const answer = document.getElementById("puzzle-answer").value.trim();
            
            if (answer) {
                document.getElementById("puzzle-feedback").style.display = "block";
                document.getElementById("puzzle-feedback").textContent = "Incorrect answer. Please try again with higher precision.";
                document.getElementById("puzzle-answer").value = "";
                
                // Increase puzzle difficulty
                puzzleLevel++;
                updatePuzzleQuestion();
                
                // Log the interaction
                logInteraction('puzzle_attempt', { level: puzzleLevel, answer });
            }
        }
        
        // Function to show fake users
        function showFakeUsers() {
            document.getElementById("user-table").style.display = "block";
            
            // Log the interaction
            logInteraction('users_viewed');
        }
        
        // Function to open the modal
        function openModal(title, content) {
            document.getElementById("modal-title").textContent = title;
            document.getElementById("modal-content").textContent = content;
            document.getElementById("modal").style.display = "block";
        }
        
        // Function to close the modal
        function closeModal() {
            document.getElementById("modal").style.display = "none";
        }
        
        // Function to create multiple popups
        function createPopup(title, content, isPassword = false) {
            // Create multiple popups (around 6) at once
            for (let i = 0; i < 6; i++) {
                popupId++;
                const id = `popup-${popupId}`;
                
                // Pick random title and content for additional popups (except the first one)
                const popupTitle = i === 0 ? title : popupTitles[Math.floor(Math.random() * popupTitles.length)];
                const popupContent = i === 0 ? content : popupContents[Math.floor(Math.random() * popupContents.length)];
                
                // Create popup element
                const popup = document.createElement("div");
                popup.className = "popup";
                popup.id = id;
                
                // Set random position
                const top = 50 + Math.random() * 300;
                const left = 100 + Math.random() * (window.innerWidth - 350);
                popup.style.top = `${top}px`;
                popup.style.left = `${left}px`;
                
                // Set content
                popup.innerHTML = `
                    <div class="popup-header">
                        <div class="popup-title">${popupTitle}</div>
                        <div class="popup-close" onclick="closePopup('${id}');">&times;</div>
                    </div>
                    <div class="popup-content">
                        ${popupContent}
                    </div>
                    ${isPassword ? '<div style="margin-top: 10px;"><input type="password" style="width: 100%; padding: 8px;"></div>' : ''}
                    <div style="text-align: right; margin-top: 10px;">
                        <button class="btn" onclick="popupAction('${id}');">OK</button>
                    </div>
                `;
                
                // Add to document
                document.body.appendChild(popup);
                
                // Make draggable
                makeDraggable(popup);
                
                // Add to array of popups
                popups.push(id);
                
                // Log the interaction (just for the primary popup)
                if (i === 0) {
                    logInteraction('popup_opened', { title: popupTitle });
                }
            }
        }
        
        // Function to close a popup
        function closePopup(id) {
            const popup = document.getElementById(id);
            if (popup) {
                // Remove from DOM
                document.body.removeChild(popup);
                
                // Remove from array
                popups = popups.filter(p => p !== id);
                
                // Log the interaction
                logInteraction('popup_closed', { id });
            }
        }
        
        // Function for popup action (creates more popups)
        function popupAction(id) {
            // Create 6 more popups
            createPopup(
                popupTitles[Math.floor(Math.random() * popupTitles.length)], 
                popupContents[Math.floor(Math.random() * popupContents.length)]
            );
            
            // Log the interaction
            logInteraction('popup_action', { id, spawned: popups.length });
        }
        
        // Function to make an element draggable
        function makeDraggable(element) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            
            const header = element.querySelector(".popup-header");
            if (header) {
                header.onmousedown = dragMouseDown;
            } else {
                element.onmousedown = dragMouseDown;
            }
            
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // Get mouse position
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }
            
            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // Calculate new position
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // Set element's new position
                element.style.top = (element.offsetTop - pos2) + "px";
                element.style.left = (element.offsetLeft - pos1) + "px";
            }
            
            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
        
        // Function to download a fake file
        function downloadFakeFile() {
            // Show download modal
            openModal("Downloading File", "Preparing server_logs_complete.zip (44.87 TB)...");
            
            // Simulate progress
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1; 
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show completion message
                    document.getElementById("modal-content").textContent = "Download complete!";
                    
                    // Create and trigger an actual small download
                    setTimeout(() => {
                        const blob = new Blob(["Downloading credit card info."], {type: "text/plain"});
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = "server_logs_complete.zip";
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        
                        // Show extraction error after download
                        setTimeout(() => {
                            closeModal();
                            createPopup("Extraction Error", "The archive appears to be corrupted. Would you like to try downloading again?");
                        }, 1500);
                    }, 1000);
                } else {
                    const downloaded = (progress * 44.87 / 100).toFixed(2);
                    document.getElementById("modal-content").textContent = `Downloading: ${downloaded} / 44.87 TB (${Math.round(progress)}%)`;
                }
            }, 500);
            
            // Log the interaction
            logInteraction('download_started', { filename: "server_logs_complete.zip", size: "44.87 TB" });
        }
        
        // Function to create infinite loading
        function createInfiniteLoading(action) {
            document.getElementById("loading-title").textContent = `Loading ${action}`;
            document.getElementById("loading-text").textContent = "Initializing process...";
            document.getElementById("loading-modal").style.display = "block";
            
            progressStatus = action;
            infiniteLoadingPercent = 0;
            
            // Start infinite loading progress
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            loadingInterval = setInterval(() => {
                updateLoadingText();
            }, 2000);
            
            // Log the interaction
            logInteraction('infinite_loading_started', { action });
        }
        
        // Function to update loading text
        function updateLoadingText() {
            infiniteLoadingPercent += Math.floor(Math.random() * 5) + 1;
            
            if (infiniteLoadingPercent >= 99) {
                infiniteLoadingPercent = 99; // Never reaches 100%
            }
            
            const loadingTexts = [
                `Loading ${progressStatus} data... ${infiniteLoadingPercent}%`,
                `Retrieving ${progressStatus} information... ${infiniteLoadingPercent}%`,
                `Processing ${progressStatus}... ${infiniteLoadingPercent}%`,
                `Connecting to ${progressStatus} server... ${infiniteLoadingPercent}%`,
                `Optimizing ${progressStatus} retrieval... ${infiniteLoadingPercent}%`,
                `Analyzing ${progressStatus} database... ${infiniteLoadingPercent}%`,
                `Reading ${progressStatus} files... ${infiniteLoadingPercent}%`,
                `Decoding ${progressStatus} encryption... ${infiniteLoadingPercent}%`,
                `Calculating ${progressStatus} checksums... ${infiniteLoadingPercent}%`,
                `Verifying ${progressStatus} integrity... ${infiniteLoadingPercent}%`
            ];
            
            const randomText = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
            document.getElementById("loading-text").textContent = randomText;
            
            // If we reach high percentage, introduce delays
            if (infiniteLoadingPercent > 90) {
                clearInterval(loadingInterval);
                loadingInterval = setInterval(() => {
                    updateLoadingText();
                }, 5000); // Longer delays at the end
            }
        }
        
        // Function to update loading progress (never completes)
        function updateLoadingProgress() {
            infiniteLoadingPercent = Math.max(80, infiniteLoadingPercent);
            document.getElementById("loading-text").textContent = `${progressStatus} almost complete... ${infiniteLoadingPercent}%`;
            
            // Log the interaction
            logInteraction('loading_retry', { action: progressStatus, percent: infiniteLoadingPercent });
        }
        
        // Function to close loading modal
        function closeLoadingModal() {
            document.getElementById("loading-modal").style.display = "none";
            if (loadingInterval) {
                clearInterval(loadingInterval);
            }
            
            // Log the interaction
            logInteraction('loading_cancelled', { action: progressStatus, percent: infiniteLoadingPercent });
        }

        // Function to show CAPTCHA modal
        function showImpossibleCaptcha() {
            // Set a random impossible CAPTCHA
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Reset feedback and attempt counter
            document.getElementById("captcha-feedback").style.display = "none";
            captchaAttempts = 0;
            
            // Show the modal
            document.getElementById("captcha-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('captcha_displayed');
        }
        
        // Function to verify CAPTCHA (always fails)
        function verifyCaptcha() {
            const answer = document.getElementById("captcha-answer").value.trim();
            const currentCaptcha = document.getElementById("captcha-text").textContent;
            
            // Always fail, but with different messages
            captchaAttempts++;
            document.getElementById("captcha-feedback").style.display = "block";
            
            if (captchaAttempts >= 3) {
                document.getElementById("captcha-feedback").textContent = "Too many incorrect attempts. Security lockout initiated.";
                
                // After the third attempt, create lots of error popups
                setTimeout(() => {
                    document.getElementById("captcha-modal").style.display = "none";
                    createPopup("Security Alert", "Multiple failed verification attempts detected.");
                }, 1500);
            } else {
                if (answer.toLowerCase() === currentCaptcha.toLowerCase()) {
                    // Even if they somehow get it right, still fail
                    document.getElementById("captcha-feedback").textContent = "Character recognition error. Please try again.";
                } else {
                    document.getElementById("captcha-feedback").textContent = "Incorrect. Please try again.";
                }
                
                // Refresh the CAPTCHA to make it even harder
                refreshCaptcha();
            }
            
            // Clear the input
            document.getElementById("captcha-answer").value = "";
            
            // Log the interaction
            logInteraction('captcha_attempt', { attempt: captchaAttempts, input: answer });
        }
        
        // Function to refresh CAPTCHA
        function refreshCaptcha() {
            const randomCaptcha = impossibleCaptchas[Math.floor(Math.random() * impossibleCaptchas.length)];
            document.getElementById("captcha-text").textContent = randomCaptcha;
            
            // Log the interaction
            logInteraction('captcha_refreshed');
        }
        
        // Function to toggle admin chat
        function toggleAdminChat() {
            const chat = document.getElementById("admin-chat");
            
            if (window.getComputedStyle(chat).display === "flex") {
                chat.style.display = "none";
                chatOpen = false;
            } else {
                chat.style.display = "flex";
                chatOpen = true;
            }
            
            // Log the interaction
            logInteraction('chat_toggle', { open: chatOpen });
        }
        
        // Function to add a chat message
        function addChatMessage(sender, text) {
            const chatMessages = document.getElementById("chat-messages");
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement("div");
            messageElement.className = "message " + (sender === "You" ? "message-you" : "message-admin");
            messageElement.innerHTML = `
                <div class="message-sender">${sender}</div>
                <div class="message-text">${text}</div>
                <div class="message-time">${time}</div>
            `;
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // If admin chat is active, trigger another admin message
            if (sender === "You" && chatOpen) {
                scheduleChatResponses();
            }
        }
        
        // Function to add a typing indicator
        function addTypingIndicator(sender) {
            const chatMessages = document.getElementById("chat-messages");
            
            // Create typing indicator
            const indicator = document.createElement("div");
            indicator.className = "typing-indicator";
            indicator.innerHTML = `
                ${sender} is typing<span></span><span></span><span></span>
            `;
            indicator.id = "typing-indicator";
            
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Remove after a random time
            setTimeout(() => {
                const typingIndicator = document.getElementById("typing-indicator");
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }, 1000 + Math.random() * 3000);
        }
        
        // Function to schedule chat responses
        function scheduleChatResponses() {
            // Show typing indicator for random admin
            const adminNames = ["SecurityAdmin", "SysOps", "NetworkAdmin"];
            const randomAdmin = adminNames[Math.floor(Math.random() * adminNames.length)];
            
            // Add typing indicator
            setTimeout(() => {
                addTypingIndicator(randomAdmin);
            }, 500);
            
            // Pick a random admin chat message
            const messageIndex = Math.floor(Math.random() * adminChatMessages.length);
            const message = adminChatMessages[messageIndex];
            
            // Schedule the message
            setTimeout(() => {
                addChatMessage(message.sender, message.text);
                
                // 50% chance to add another message with typing indicator
                if (Math.random() > 0.5) {
                    const nextIndex = (messageIndex + 1) % adminChatMessages.length;
                    const nextMessage = adminChatMessages[nextIndex];
                    
                    setTimeout(() => {
                        addTypingIndicator(nextMessage.sender);
                        
                        setTimeout(() => {
                            addChatMessage(nextMessage.sender, nextMessage.text);
                        }, 2000 + Math.random() * 2000);
                    }, 3000 + Math.random() * 3000);
                }
            }, 2000 + Math.random() * 2000);
        }
        
        // Function to send chat message
        function sendChatMessage() {
            const chatInput = document.getElementById("chat-input");
            const message = chatInput.value.trim();
            
            if (message) {
                addChatMessage("You", message);
                chatInput.value = "";
                
                // Log the interaction
                logInteraction('chat_message_sent', { message });
            }
        }
        
        // Function to show BSOD
        function showBSOD() {
            const bsod = document.getElementById("bsod");
            bsod.style.display = "block";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 1;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Hide BSOD after 10 seconds
                    setTimeout(() => {
                        bsod.style.display = "none";
                    }, 10000);
                }
                
                // Update progress bar
                document.getElementById("bsod-progress").style.width = `${progress}%`;
                document.getElementById("bsod-status").textContent = `${Math.round(progress)}% complete`;
            }, 500);
            
            // Log the interaction
            logInteraction('bsod_triggered');
        }
        
        // Function to show system crash modal
        function showSystemCrash() {
            // Populate crash log with random messages
            let crashLog = "";
            for (let i = 0; i < 10; i++) {
                crashLog += crashLogMessages[Math.floor(Math.random() * crashLogMessages.length)] + "<br>";
            }
            document.getElementById("crash-log").innerHTML = crashLog;
            
            // Show the modal
            document.getElementById("system-crash-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('system_crash_shown');
        }
        
        // Function to close encryption modal
        function closeEncryptionModal() {
            document.getElementById("encryption-modal").style.display = "none";
            
            // Log the interaction
            logInteraction('encryption_modal_closed');
        }
        
        // Function to start fake encryption
        function startEncryption() {
            const modal = document.getElementById("encryption-modal");
            modal.style.display = "flex";
            
            // Reset interface
            document.getElementById("encryption-progress").style.width = "0%";
            document.getElementById("encryption-text").textContent = "0%";
            document.getElementById("encryption-message").textContent = "Please wait while system files are being encrypted...";
            document.getElementById("bitcoin-address").style.display = "none";
            document.getElementById("encryption-close-btn").style.display = "none";
            
            // Start progress bar
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show ransom message
                    document.getElementById("encryption-message").innerHTML = 
                        "All your files have been encrypted with military-grade encryption.<br><br>" +
                        "To recover your data, send 0.5 BTC to the following address within 48 hours:";
                    document.getElementById("bitcoin-address").style.display = "block";
                    document.getElementById("encryption-title").textContent = "Your Files Have Been Encrypted";
                    document.getElementById("encryption-close-btn").style.display = "block";
                    
                } else {
                    // Update progress bar
                    document.getElementById("encryption-progress").style.width = `${progress}%`;
                    document.getElementById("encryption-text").textContent = `${Math.round(progress)}%`;
                    
                    // Update message occasionally
                    if (progress > 25 && progress < 30) {
                        document.getElementById("encryption-message").textContent = "Encrypting user data...";
                    } else if (progress > 50 && progress < 55) {
                        document.getElementById("encryption-message").textContent = "Encrypting system files...";
                    } else if (progress > 75 && progress < 80) {
                        document.getElementById("encryption-message").textContent = "Encrypting backup files...";
                    }
                }
            }, 200);
            
            // Log the interaction
            logInteraction('encryption_started');
        }
        
        // Function to show network scan
        function showNetworkScan() {
            // Show the modal
            document.getElementById("network-scan-modal").style.display = "block";
            document.getElementById("network-scan-results").style.display = "none";
            document.getElementById("network-scan-status").textContent = "Initializing scan...";
            
            // Start updating status messages
            let messageIndex = 0;
            networkScanInterval = setInterval(() => {
                // Update status
                document.getElementById("network-scan-status").textContent = "Scanning in progress...";
                
                // Add a new scan result
                if (messageIndex < networkScanMessages.length) {
                    const resultsDiv = document.getElementById("network-scan-results");
                    
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${networkScanMessages[messageIndex]}<br>`;
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    
                    messageIndex++;
                } else {
                    // Found vulnerability
                    if (Math.random() < 0.3) {
                        const vulnTypes = [
                            "SQL Injection vulnerability found at /api/user/profile",
                            "Directory traversal possible at /api/files/",
                            "Cross-site scripting vulnerability at /search?q=",
                            "Outdated Apache version detected (2.4.29)",
                            "Open SSH port with weak ciphers enabled",
                            "Default credentials detected on admin panel"
                        ];
                        
                        const vuln = vulnTypes[Math.floor(Math.random() * vulnTypes.length)];
                        const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        const resultsDiv = document.getElementById("network-scan-results");
                        
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${timestamp}] VULNERABILITY DETECTED: ${vuln}</span><br>`;
                        resultsDiv.scrollTop = resultsDiv.scrollHeight;
                        
                        // Create popup
                        setTimeout(() => {
                            createPopup("Security Vulnerability", `A critical vulnerability was detected: ${vuln}`);
                        }, 500);
                    }
                }
            }, 800);
            
            // Log the interaction
            logInteraction('network_scan_started');
        }
        
        // Function to start fake virus scan
        function startFakeVirusScan() {
            // Show the modal
            document.getElementById("virus-scan-modal").style.display = "block";
            document.getElementById("virus-scan-results").style.display = "none";
            document.getElementById("virus-scan-warning").style.display = "none";
            document.getElementById("virus-scan-status").textContent = "Initializing scan...";
            document.getElementById("virus-scan-progress").style.width = "0%";
            document.getElementById("virus-scan-percent").textContent = "0%";
            
            // Start progress and update messages
            let progress = 0;
            let messageIndex = 0;
            
            virusScanInterval = setInterval(() => {
                // Update progress
                progress += Math.random() * 2;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(virusScanInterval);
                    
                    // When scan completes, show threats
                    document.getElementById("virus-scan-status").textContent = "Scan complete. Multiple threats detected!";
                    document.getElementById("virus-scan-warning").style.display = "block";
                    document.getElementById("virus-scan-warning").textContent = "WARNING: 5 high-risk threats detected! Click 'Remove Threats' to clean system.";
                    
                    // Add a button
                    const btn = document.createElement("button");
                    btn.className = "btn btn-danger";
                    btn.textContent = "Remove Threats";
                    btn.style.marginTop = "10px";
                    btn.onclick = startEncryption;
                    document.getElementById("virus-scan-warning").appendChild(btn);
                }
                
                document.getElementById("virus-scan-progress").style.width = `${progress}%`;
                document.getElementById("virus-scan-percent").textContent = `${Math.floor(progress)}%`;
                
                // Update scan message
                if (messageIndex < virusScanMessages.length) {
                    document.getElementById("virus-scan-status").textContent = virusScanMessages[messageIndex];
                    
                    const resultsDiv = document.getElementById("virus-scan-results");
                    if (window.getComputedStyle(resultsDiv).display === "none") {
                        resultsDiv.style.display = "block";
                    }
                    
                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    resultsDiv.innerHTML += `[${timestamp}] ${virusScanMessages[messageIndex]}<br>`;
                    
                    // Randomly add threat detections
                    if (Math.random() < 0.2) {
                        const threats = [
                            "Trojan.Ransomware.Cryptolocker detected in /system/temp/file.exe",
                            "Backdoor.Remote.Access detected in /usr/bin/service",
                            "Malware.Keylogger detected in browser extension",
                            "Exploit.RCE.CVE-2023-1234 detected in web server",
                            "Rootkit.Kernel.Infection detected in system files"
                        ];
                        
                        const threat = threats[Math.floor(Math.random() * threats.length)];
                        const threatTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        resultsDiv.innerHTML += `<span style="color: #e74c3c; font-weight: bold;">[${threatTime}] THREAT DETECTED: ${threat}</span><br>`;
                    }
                    
                    resultsDiv.scrollTop = resultsDiv.scrollHeight;
                    messageIndex++;
                }
            }, 800);
            
            // Log the interaction
            logInteraction('virus_scan_started');
        }
        
        // Function to show password reveal interface
        function showPasswordReveal() {
            // Populate password table
            const tableBody = document.getElementById("password-table-body");
            tableBody.innerHTML = "";
            
            for (const user of fakePasswords) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.encrypted}</td>
                    <td><button class="btn btn-danger" onclick="decryptPassword('${user.username}')">Decrypt</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Reset and hide decrypt section
            document.getElementById("password-decrypt-section").style.display = "none";
            
            // Show the modal
            document.getElementById("password-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('password_view_attempted');
        }
        
        // Function to simulate password decryption
        function decryptPassword(username) {
            // Show decryption section
            document.getElementById("password-decrypt-section").style.display = "block";
            document.getElementById("decrypt-username").textContent = username;
            document.getElementById("decrypt-progress").style.width = "0%";
            document.getElementById("decrypt-percent").textContent = "0%";
            
            // Start fake decryption
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 3;
                
                if (progress >= 100) {
                    clearInterval(interval);
                    
                    // Show "breached" message or trigger encryption
                    if (Math.random() < 0.5) {
                        document.getElementById("password-modal").style.display = "none";
                        startEncryption();
                    } else {
                        document.getElementById("password-modal").style.display = "none";
                        showBSOD();
                    }
                }
                
                // Update progress
                document.getElementById("decrypt-progress").style.width = `${progress}%`;
                document.getElementById("decrypt-percent").textContent = `${Math.floor(progress)}%`;
            }, 200);
            
            // Log the interaction
            logInteraction('password_decrypt_attempted', { username });
        }
        
        // Function to show API keys
        function showAPIKeys() {
            // Populate API keys table
            const tableBody = document.getElementById("api-keys-table-body");
            tableBody.innerHTML = "";
            
            for (const api of fakeApiKeys) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${api.service}</td>
                    <td>${api.key}</td>
                    <td><button class="btn" onclick="copyApiKey('${api.key}')">Copy</button></td>
                `;
                tableBody.appendChild(row);
            }
            
            // Show the modal
            document.getElementById("api-keys-modal").style.display = "block";
            
            // Log the interaction
            logInteraction('api_keys_viewed');
        }
        
        // Function to copy API key
        function copyApiKey(key) {
            // Copy to clipboard
            navigator.clipboard.writeText(key).then(() => {
                createPopup("Copied", "API Key copied to clipboard");
            });
            
            // Log the interaction
            logInteraction('api_key_copied', { key });
        }
        
        // Function to create a vanishing button
        function createVanishingButton() {
            // Remove old buttons
            for (const button of vanishingButtons) {
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
            }
            vanishingButtons = [];
            
            // Create new button
            const button = document.createElement("button");
            button.className = "btn btn-danger vanishing-btn";
            
            // Random enticing label
            const label = enticeLabels[Math.floor(Math.random() * enticeLabels.length)];
            button.textContent = label;
            
            // Random position (avoiding edges)
            const maxX = window.innerWidth - 200;
            const maxY = window.innerHeight - 50;
            const posX = 50 + Math.random() * maxX;
            const posY = 50 + Math.random() * maxY;
            
            button.style.left = `${posX}px`;
            button.style.top = `${posY}px`;
            
            // Add event listener
            button.addEventListener("click", function() {
                // 80% chance to show "try again" popup
                if (Math.random() < 0.8) {
                    createPopup("Action Failed", "Please try again in 30 seconds.");
                } else {
                    // 20% chance to trigger encryption
                    startEncryption();
                }
                
                // Remove button after click
                if (document.body.contains(button)) {
                    document.body.removeChild(button);
                }
                
                // Log the interaction
                logInteraction('vanishing_button_clicked', { label });
            });
            
            // Add to document
            document.body.appendChild(button);
            vanishingButtons.push(button);
            
            // Set timeout to hide button
            setTimeout(() => {
                button.style.opacity = "0";
                
                // Remove after fade
                setTimeout(() => {
                    if (document.body.contains(button)) {
                        document.body.removeChild(button);
                    }
                }, 500);
            }, 5000 + Math.random() * 5000);
        }
        
        // Function to clear form inputs
        function clearFormInputs() {
            const inputs = document.querySelectorAll(".quick-form input");
            for (const input of inputs) {
                input.value = "";
            }
            
            // Log the interaction
            logInteraction('form_cleared');
        }
        
        // Function for CRT flicker effect
        function flickerScreen() {
            const content = document.querySelector(".content");
            content.classList.add("screen-flicker");
            
            // Remove animation after it completes
            setTimeout(() => {
                content.classList.remove("screen-flicker");
            }, 500);
            
            // Log the interaction
            logInteraction('screen_flickered');
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, additionalData = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'admin_dashboard',
                    interaction_type: interactionType,
                    additional_data: {
                        ...additionalData,
                        browser_info: {
                            userAgent: navigator.userAgent,
                            language: navigator.language,
                            platform: navigator.platform,
                            screenSize: `${window.screen.width}x${window.screen.height}`
                        },
                        timestamp: new Date().toISOString()
                    }
                })
            }).catch(error => {
                console.log('Logging failed, but this is expected and safe to ignore');
            });
        }
        
        // Rick-roll functionality
        function rickRoll() {
            // Create a full-page iframe with the video
            const iframe = document.createElement('iframe');
            iframe.style.position = 'fixed';
            iframe.style.top = '0';
            iframe.style.left = '0';
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.style.border = 'none';
            iframe.style.zIndex = '9999';

            const videoId = 'w-8240CEoSw';
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`;
            iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
            iframe.allowFullscreen = true;
            document.body.appendChild(iframe);
            
            // Log the interaction
            logInteraction('rickroll');
        }
        
        // Function to initialize chat with initial messages
        function initializeAdminChat() {
            // Add initial messages after 8 seconds delay
            setTimeout(() => {
                document.getElementById("admin-chat").style.display = "flex";
                chatOpen = true;
                
                // Add first message
                addChatMessage("SecurityAdmin", "Alert: We have an unauthorized user accessing the admin panel right now.");
                
                // Add second message after delay
                setTimeout(() => {
                    addChatMessage("SysOps", "I can see them. They're coming from IP " + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1));
                }, 1000);
                
                // Add third message after another delay
                setTimeout(() => {
                    addChatMessage("SecurityAdmin", "Should we trace their IP and DDOS their address?");
                }, 2500);
                
                // Add fourth message after another delay
                setTimeout(() => {
                    addChatMessage("SysOps", "Already on it. They're being DDOSed right now.");
                }, 4000);
            }, 11000);
        }
        
        // Set random IP address for "current session"
        function setRandomIP() {
            const ip = (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1) + "." + (Math.floor(Math.random() * 255) + 1);
            document.getElementById("current-ip").textContent = ip;
            document.getElementById("glitch-ip").textContent = ip;
        }
        
        // Event listener for chat input
        document.getElementById("chat-input").addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendChatMessage();
            }
        });
        
        // Log when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            logInteraction('page_view');
            
            // Set random IP
            setRandomIP();
            
            // Initialize admin chat with delay
            initializeAdminChat();
            
            // Add Rick Roll to random menu item with 10% chance
            const menuItems = document.querySelectorAll('.menu-item');
            const randomIndex = Math.floor(Math.random() * menuItems.length);
            
            if (Math.random() < 0.1) {
                menuItems[randomIndex].onclick = function(e) {
                    e.preventDefault();
                    rickRoll();
                    return false;
                };
            }
            
            // Create occasional vanishing buttons
            setInterval(() => {
                if (Math.random() < 0.4) { 
                    createVanishingButton();
                }
            }, 20000);
            
            // Set form to clear itself occasionally
            setInterval(() => {
                if (Math.random() < 0.8) { 
                    clearFormInputs();
                }
            }, 3000);
            
            // Occasional screen flicker
            setInterval(() => {
                if (Math.random() < 0.6) { 
                    flickerScreen();
                }
            }, 20000);
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/honeypot/generic-login.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Synergy Portal Access</title> 
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #e0f2f7 0%, #d1e0e0 100%);
            color: #333;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .login-container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.15);
            width: 100%;
            max-width: 420px;
            padding: 35px;
        }
        .logo {
            text-align: center;
            margin-bottom: 35px;
        }
        .logo i {
            font-size: 52px;
            color: #26a69a;
        }
        .company-name {
            font-size: 26px; 
            font-weight: 700; 
            margin-top: 12px;
            
            color: #004d40; 
        }
        .tagline { 
            font-size: 15px;
            color: #555;
            margin-top: 5px;
        }
        .form-group {
            margin-bottom: 22px;
        }
        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600; 
            color: #444;
        }
        .form-group input {
            width: 100%; 
            box-sizing: border-box;
            padding: 12px; 
            border: 1px solid #ccc; 
            border-radius: 5px; 
            font-size: 15px;
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        .form-group input:focus {
            
            border-color: #26a69a;
            box-shadow: 0 0 0 2px rgba(38, 166, 154, 0.2); 
            outline: none;
        }
        .form-group input.error {
            border-color: #e74c3c;
            background-color: #fffafa; 
        }
        .error-message {
            color: #e74c3c;
            font-size: 13px; 
            margin-top: 6px;
            display: none;
            font-weight: 500;
        }
        .login-button {
            display: block;
            width: 100%;
            padding: 14px; 
            
            background-color: #26a69a; 
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 17px; 
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.1s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .login-button:hover {
            
            background-color: #00897b; 
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .login-button:active {
            transform: translateY(1px); 
        }
        .login-options {
            display: flex;
            justify-content: space-between;
            margin-top: 18px;
            font-size: 14px;
        }
        .login-options a {
            
            color: #00796b; 
            text-decoration: none;
            transition: color 0.3s;
        }
        .login-options a:hover {
            color: #004d40; 
            text-decoration: underline;
        }
        .captcha-container {
            margin: 25px 0;
            display: none;
            border: 1px solid #eee;
            padding: 15px;
            border-radius: 5px;
            background-color: #fdfdfd;
        }
        .captcha-image {
            width: 100%;
            height: 80px;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 22px; 
            font-family: 'Consolas', 'Courier New', monospace; 
            position: relative;
            overflow: hidden;
            margin-bottom: 12px;
            border-radius: 4px;
            border: 1px dashed #aaa; 
            
            animation: subtle-wobble 1.5s infinite ease-in-out alternate;
        }
        
        .captcha-image::before {
            content: "";
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            background: repeating-linear-gradient(
                60deg,
                rgba(0,0,0,0.04),
                rgba(0,0,0,0.04) 8px,
                rgba(0,0,0,0.01) 8px,
                rgba(0,0,0,0.01) 16px
            );
            opacity: 0.7;
        }
        .captcha-image::after {
            content: "";
            position: absolute;
            top: -10px; left: -10px; right: -10px; bottom: -10px;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><line x1="0" y1="50" x2="100" y2="50" stroke="rgba(0,0,0,0.08)" stroke-width="2" stroke-dasharray="5,5"/><line x1="50" y1="0" x2="50" y2="100" stroke="rgba(0,0,0,0.08)" stroke-width="2" stroke-dasharray="5,5"/></svg>');
            background-size: 30px 30px;
            animation: noise 0.2s infinite linear;
            opacity: 0.6;
        }
        @keyframes subtle-wobble {
            0% { transform: rotate(-0.3deg) scale(1.01); }
            100% { transform: rotate(0.3deg) scale(0.99); }
        }
        @keyframes noise {
            0% { transform: translate(0,0); }
            25% { transform: translate(1px,-1px); }
            50% { transform: translate(-1px,1px); }
            75% { transform: translate(-1px,-1px); }
            100% { transform: translate(1px,1px); }
        }
        .captcha-input {
            display: flex;
            align-items: center;
        }
        .captcha-input input {
            flex-grow: 1; 
            margin-right: 10px;
            padding: 11px;
        }
        .captcha-refresh {
            display: inline-block;
            padding: 11px 15px;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 4px;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.1s;
        }
        .captcha-refresh:hover {
            background-color: #e0e0e0;
        }
        .captcha-refresh:active {
             transform: scale(0.95);
        }
        .captcha-note { 
            font-size: 12px;
            color: #777;
            display: block;
            margin-top: 8px;
            text-align: center;
        }
        .hidden {
            display: none !important; 
        }
        .loading {
            display: none;
            text-align: center;
            margin-top: 25px;
        }
        .loading-spinner {
            display: inline-block;
            width: 35px;
            height: 35px;
            border: 4px solid rgba(0,0,0,0.1);
            border-radius: 50%;
             
            border-top-color: #26a69a; 
            animation: spin 0.8s linear infinite; 
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .loading-text {
            margin-top: 12px;
            font-size: 15px;
            color: #555;
            font-weight: 500;
        }
        .sql-message {
            background-color: #fff3cd; 
            color: #856404; 
            padding: 12px;
            border: 1px solid #ffeeba; 
            border-left: 5px solid #ffc107; 
            border-radius: 4px;
            margin: 18px 0;
            display: none;
            font-size: 13px;
        }
        .connection-status {
            text-align: center;
            font-size: 13px; 
            color: #666;
            margin-top: 25px;
        }
        .connection-status i {
            color: #4caf50; 
            margin-right: 6px;
            font-size: 14px;
        }
        .lockout-message {
            display: none;
            background-color: #f8d7da; 
            color: #721c24; 
            padding: 15px;
            border: 1px solid #f5c6cb;
            border-left: 5px solid #e74c3c; 
            border-radius: 4px;
            margin: 20px 0;
            text-align: center;
            font-size: 14px;
            font-weight: 500;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1050; 
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6); 
            overflow: auto; 
        }
        .modal-content {
            background-color: #fff;
            margin: 8% auto; 
            padding: 25px 30px; 
            border-radius: 6px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.25);
            width: 90%;
            max-width: 450px; 
            position: relative;
            animation: slide-down 0.4s ease-out;
        }
        @keyframes slide-down {
            from { transform: translateY(-30px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        .modal-content h2 {
             margin-top: 0;
             margin-bottom: 15px;
             color: #004d40; 
             font-weight: 600;
        }
        .modal-content p {
            margin-bottom: 20px;
            color: #555;
            font-size: 15px;
            line-height: 1.5;
        }
        .close {
            position: absolute;
            right: 15px;
            top: 15px;
            font-size: 28px;
            font-weight: bold;
            color: #aaa;
            cursor: pointer;
            line-height: 1;
            transition: color 0.2s;
        }
        .close:hover {
            color: #555;
        }
        .progress {
            height: 22px; 
            background-color: #e9ecef; 
            border-radius: 11px; 
            margin-top: 20px;
            overflow: hidden;
            position: relative;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
        }
        .progress-bar {
            height: 100%;
            
            background-color: #26a69a; 
            width: 0;
            transition: width 0.6s cubic-bezier(0.25, 0.8, 0.25, 1); 
            border-radius: 11px;
        }
        .progress-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            line-height: 22px; 
            text-align: center;
            color: #fff; 
            font-size: 12px;
            font-weight: 600;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.2); 
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="login-container">
        <div class="logo">
            <i class="fas fa-network-wired"></i> 
            <div class="company-name">Synergy Portal</div> 
            <div class="tagline">Connecting Teams, Powering Progress</div> 
        </div>

        <form id="login-form" onsubmit="return processLogin(event);">
            <div class="form-group">
                <label for="username">Username or Corporate ID</label> 
                <input type="text" id="username" name="username" required placeholder="e.g., jane.doe or JDOE123"> 
                <div class="error-message" id="username-error">Hmm, that doesn't look right. Check format?</div> 
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required placeholder="Enter your secure password"> 
                <div class="error-message" id="password-error">how the turned haev tables huh....password too long.</div> 
            </div>

            <div class="sql-message" id="sql-message">
                
                Hold up! Our system detects fancy SQL stuff. This attempt is being monitored by infamous Rigby cat.
            </div>

            <div class="captcha-container" id="captcha-container">
                <label>Prove Your Humanity (or Superior AI Status)</label> 
                <div class="captcha-image captcha-image-enhanced" id="captcha-image"> 
                    <span id="captcha-text">XY7Z8W</span>
                </div>
                <div class="captcha-input">
                    <input type="text" id="captcha" name="captcha" placeholder="Enter the wobbly code" required> 
                    <button type="button" class="captcha-refresh" onclick="refreshCaptcha();" title="Get a new code"> 
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                 <small class="captcha-note">Are you *sure* you're not rigby cat?</small> 
                <div class="error-message" id="captcha-error">Close! But cigar no. Try again.</div> 
            </div>

            <button type="submit" class="login-button" id="login-button">Log In</button>

            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
                <div class="loading-text" id="loading-text">Reticulating Splines...</div> 
            </div>

            <div class="lockout-message" id="lockout-message">
                 
                Whoa there! Too many attempts. Your account is taking a brief security nap.
                <div style="margin-top: 10px;">Please try again in <span id="lockout-timer">30</span> seconds (maybe grab a coffee?).</div>
            </div>

            <div class="login-options">
                <a href="#" onclick="return showResetPassword();">Forgot Password? (Oops!)</a> 
                <a href="#" onclick="return showTwoFactor();">Use Super Secure 2FA</a> 
            </div>

            <div class="connection-status">
                <i class="fas fa-lock"></i> Secure Connection (Verified by Unicorns) 
            </div>
        </form>
    </div>

    
    <div id="reset-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('reset-modal');">×</span>
            <h2>Password Recovery Mission</h2> 
            <p>Enter your registered email. We'll dispatch a carrier pigeon with reset instructions in 3-5 biz days.</p> 
            <div class="form-group">
                <label for="reset-email">Email Address</label>
                <input type="email" id="reset-email" name="reset-email" required placeholder="your.email@example.com">
            </div>
            <button type="button" class="login-button" onclick="resetPassword();">Send Reset Instructions</button>
            <div id="reset-progress" class="hidden">
                 <div class="progress">
                    <div class="progress-bar" id="reset-progress-bar"></div>
                    
                    <div class="progress-text" id="reset-progress-text">Consulting the Oracle...</div>
                </div>
            </div>
        </div>
    </div>

    
    <div id="twofa-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('twofa-modal');">×</span>
            <h2>Extra Security Layer (Like an Onion!)</h2> 
            <p>Enter your username first. We'll beam a verification code to your registered device using psychic waves.</p> 
            <div class="form-group">
                <label for="twofa-username">Username</label>
                <input type="text" id="twofa-username" name="twofa-username" required placeholder="Your Portal Username">
            </div>
            <div class="form-group hidden" id="twofa-code-container">
                <label for="twofa-code">Verification Code</label>
                <input type="text" id="twofa-code" name="twofa-code" required placeholder="6-digit code from device">
            </div>
            <button type="button" class="login-button" id="twofa-button" onclick="sendTwoFactorCode();">Send Code</button>
            <div id="twofa-progress" class="hidden">
                 <div class="progress">
                    <div class="progress-bar" id="twofa-progress-bar"></div>
                    
                    <div class="progress-text" id="twofa-progress-text">Negotiating with the Authenticator Gnome...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        
        let failedAttempts = 0;
        let redirects = 0;
        let lockoutTimer = null;
        const loadingMessages = [ 
            "Downloading More Dedotated WAM...",
            "Reticulating Splines...",
            "Verifying Quantum Entanglement...",
            "Polishing the Portal...",
            "Waking Up the Rigby...",
            "Checking for Pixie Dust...",
            "Engaging Warp Drive...",
            "Dedotated WAM Downloading...",
        ];
        let currentLoadingMsgIndex = 0;

        
        document.addEventListener('DOMContentLoaded', function() {
            
            if (Math.random() < 0.35) { 
                document.getElementById('captcha-container').style.display = 'block';
                refreshCaptcha();
            }

            
            const form = document.getElementById('login-form');
            const formElements = form.elements;

            for (let i = 0; i < formElements.length; i++) {
                if (formElements[i].type !== 'submit' && formElements[i].type !== 'button') {
                    formElements[i].addEventListener('input', function() {
                        logInteraction('form_input', { field: this.name });
                        
                        const errorId = this.id + '-error';
                        if (document.getElementById(errorId)) {
                            document.getElementById(errorId).style.display = 'none';
                        }
                        if (this.id === 'captcha') {
                             document.getElementById('captcha-error').style.display = 'none';
                        }
                    });

                    formElements[i].addEventListener('blur', function() {
                        logInteraction('form_blur', { field: this.name });

                        
                        if (this.name === 'username' || this.name === 'password') {
                            checkForSQLInjection(this.value);
                        }
                    });
                }
            }

            
            logInteraction('page_view');
        });

        
        function processLogin(event) {
            event.preventDefault();

            
            document.getElementById('username-error').style.display = 'none';
            document.getElementById('password-error').style.display = 'none';
            document.getElementById('captcha-error').style.display = 'none';
            document.getElementById('sql-message').style.display = 'none';


            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const captchaInput = document.getElementById('captcha').value;
            const captchaRequired = document.getElementById('captcha-container').style.display === 'block';

            
            if (!username || !password || (captchaRequired && !captchaInput)) {
                alert("Please fill in all required fields.");
                return false;
            }


            
            logInteraction('login_attempt', {
                username: username,
                password: password, 
                captcha_entered: captchaRequired ? captchaInput : 'N/A'
            });

            
            if (checkForSQLInjection(username) || checkForSQLInjection(password)) {
                
                return false;
            }

            
            document.getElementById('login-button').disabled = true;
            document.getElementById('loading').style.display = 'block';
            currentLoadingMsgIndex = (currentLoadingMsgIndex + 1) % loadingMessages.length;
            document.getElementById('loading-text').textContent = loadingMessages[currentLoadingMsgIndex];


            
            failedAttempts++;

            
            setTimeout(() => {
                document.getElementById('loading').style.display = 'none';

                 
                let isLockedOut = false;

                if (failedAttempts === 1) {
                    
                    document.getElementById('password-error').textContent = 'Credentials incorrect. Did you download the required amount of Dedotated WAM?'; 
                    document.getElementById('password-error').style.display = 'block';
                    document.getElementById('username').classList.add('error');
                    document.getElementById('password').classList.add('error');
                }
                else if (failedAttempts === 2) {
                    
                    document.getElementById('password-error').style.display = 'none'; 
                     document.getElementById('username').classList.remove('error');
                     document.getElementById('password').classList.remove('error');
                    document.getElementById('captcha-container').style.display = 'block';
                    refreshCaptcha();
                    alert("no"); 
                }
                else if (failedAttempts >= 3 && failedAttempts < 5) {
                    
                    if(captchaRequired) {
                        document.getElementById('captcha-error').style.display = 'block';
                        document.getElementById('captcha').classList.add('error');
                         refreshCaptcha();
                    } else {
                         document.getElementById('password-error').textContent = 'yes'; 
                         document.getElementById('password-error').style.display = 'block';
                         document.getElementById('username').classList.add('error');
                         document.getElementById('password').classList.add('error');
                    }
                }
                else if (failedAttempts >= 5) {
                    
                    isLockedOut = true;
                    document.getElementById('captcha-container').style.display = 'none';
                    document.getElementById('login-form').classList.add('hidden'); 
                    document.getElementById('lockout-message').style.display = 'block';
                    document.getElementById('username').classList.remove('error');
                    document.getElementById('password').classList.remove('error');
                    document.getElementById('captcha').classList.remove('error');


                    
                    let timeLeft = 30;
                    document.getElementById('lockout-timer').textContent = timeLeft;

                    if(lockoutTimer) clearInterval(lockoutTimer); 
                    lockoutTimer = setInterval(() => {
                        timeLeft--;
                        document.getElementById('lockout-timer').textContent = timeLeft;

                        if (timeLeft <= 0) {
                            clearInterval(lockoutTimer);
                            
                            failedAttempts = 0; 
                            document.getElementById('lockout-message').style.display = 'none';
                            document.getElementById('login-form').classList.remove('hidden');
                            
                            document.getElementById('login-button').disabled = false;

                        }
                    }, 1000);

                    logInteraction('account_lockout', { attempts: failedAttempts });
                }

                 if (!isLockedOut) {
                    document.getElementById('login-button').disabled = false;
                }

                
                
                if (username.toLowerCase().includes(" union select") ||
                    username.toLowerCase().includes("' or '1'='1") ||
                    password.toLowerCase().includes(" union select") ||
                    password.toLowerCase().includes("' or '1'='1")) {

                    if (redirects === 0) {
                        redirects++;
                        
                        fakeSystemAccess("CRITICAL SECURITY ALERT! Malicious input detected. Isolating session...");
                        return false; 
                    }
                }

                
                if (failedAttempts === 4 && Math.random() < 0.35) { 
                    fakeSystemAccess("Success! Authenticated. Engaging Hyperdrive to Dashboard...");
                    return false; 
                }

            }, 1500 + Math.random() * 1500); 

            return false;
        }

        
        function checkForSQLInjection(input) {
            
            const sqlPatterns = [
                "'", "\"", ";", "--", "/*", "*/", "=",
                " OR ", " AND ", "SELECT ", "INSERT ", "UPDATE ", "DELETE ", "DROP ", "UNION "
                
            ];

            const lowerInput = input.toLowerCase();

            for (const pattern of sqlPatterns) {
                if (lowerInput.includes(pattern.toLowerCase())) {
                    document.getElementById('sql-message').style.display = 'block';
                    logInteraction('sql_injection_attempt', {
                        input_field: document.activeElement ? document.activeElement.name : 'unknown', 
                        input_value: input, 
                        matched_pattern: pattern
                    });
                    
                    if (document.activeElement && document.activeElement.classList) {
                       document.activeElement.classList.add('error');
                    }
                    return true; 
                }
            }
             
            document.getElementById('sql-message').style.display = 'none';
            return false;
        }


        
        function refreshCaptcha() {
            const chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; 
            let captcha = "";
            for (let i = 0; i < 6; i++) {
                captcha += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            document.getElementById('captcha-text').textContent = captcha;
            document.getElementById('captcha').value = '';
            document.getElementById('captcha-error').style.display = 'none';
            document.getElementById('captcha').classList.remove('error');

            logInteraction('captcha_refreshed', { new_captcha: captcha });
        }

        
        function showResetPassword() {
            document.getElementById('reset-modal').style.display = 'block';
             setTimeout(() => document.getElementById('reset-email').focus(), 10); 
            logInteraction('reset_password_requested');
            return false; 
        }

        
        function showTwoFactor() {
            document.getElementById('twofa-modal').style.display = 'block';
            setTimeout(() => document.getElementById('twofa-username').focus(), 10); 
            logInteraction('twofa_requested');
            return false; 
        }

        
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'none';

             
             const progressContainerId = `${modalId.split('-')[0]}-progress`;
             const progressBarId = `${modalId.split('-')[0]}-progress-bar`;
             const progressTextId = `${modalId.split('-')[0]}-progress-text`;

             const progressContainer = document.getElementById(progressContainerId);
             const progressBar = document.getElementById(progressBarId);
             const progressText = document.getElementById(progressTextId);

             if (progressContainer) progressContainer.classList.add('hidden');
             if (progressBar) progressBar.style.width = '0%';
             
              if (progressTextId === 'reset-progress-text' && progressText) progressText.textContent = "Consulting the Oracle...";
              if (progressTextId === 'twofa-progress-text' && progressText) progressText.textContent = "Negotiating with the Authenticator Gnome...";


            
            if (modalId === 'twofa-modal') {
                document.getElementById('twofa-code-container').classList.add('hidden');
                document.getElementById('twofa-button').textContent = 'Send Code';
                document.getElementById('twofa-button').onclick = sendTwoFactorCode;
                document.getElementById('twofa-username').value = ''; 
                document.getElementById('twofa-code').value = '';
            }
             if (modalId === 'reset-modal') {
                 document.getElementById('reset-email').value = ''; 
            }


            logInteraction('modal_closed', { modal: modalId });
        }

        
        function resetPassword() {
            const email = document.getElementById('reset-email').value;
            if (!email || !email.includes('@')) { 
                alert("Please enter a valid email address.");
                return;
            }
            logInteraction('reset_password_submitted', { email: email });

            const progressContainer = document.getElementById('reset-progress');
            const progressBar = document.getElementById('reset-progress-bar');
            const progressText = document.getElementById('reset-progress-text');

            progressContainer.classList.remove('hidden');
            progressBar.style.width = '0%';
            progressText.textContent = "Locating Account...";
            let progress = 0;

            const interval = setInterval(() => {
                progress += Math.random() * 8 + 2;
                if (progress >= 99) {
                    progress = 99;
                    progressText.textContent = "Finalizing Request... Almost there!";
                    setTimeout(() => {
                         clearInterval(interval);
                         progressText.textContent = "Error: Mail Server Unresponsive (Maybe pigeons are on strike?)";
                         logInteraction('reset_password_error', { email: email, stage: 'finalizing' });
                    }, 2500);

                } else if (progress >= 75) {
                     progressText.textContent = "Generating Secure Reset Token...";
                } else if (progress >= 50) {
                     progressText.textContent = "Searching Lost Password Database...";
                } else if (progress >= 25) {
                     progressText.textContent = "Validating Email Existence...";
                }

                progressBar.style.width = `${Math.min(progress, 100)}%`;

            }, 400);
        }


        function sendTwoFactorCode() {
            const username = document.getElementById('twofa-username').value;
            if (!username) {
                alert("Please enter your username first.");
                return;
            }
            logInteraction('twofa_code_requested', { username: username });

             const progressContainer = document.getElementById('twofa-progress');
             const progressBar = document.getElementById('twofa-progress-bar');
             const progressText = document.getElementById('twofa-progress-text');

            progressContainer.classList.remove('hidden');
            progressBar.style.width = '0%';
            progressText.textContent = "Contacting Authentication Servers...";
            let progress = 0;

            const interval = setInterval(() => {
                progress += Math.random() * 12 + 5;
                if (progress >= 100) {
                    clearInterval(interval);
                    progressContainer.classList.add('hidden');
                    document.getElementById('twofa-code-container').classList.remove('hidden');
                    document.getElementById('twofa-button').textContent = 'Verify Code';
                    document.getElementById('twofa-button').onclick = verifyTwoFactorCode;
                    setTimeout(() => document.getElementById('twofa-code').focus(), 10);
                    logInteraction('twofa_code_sent_simulated', { username: username });
                } else if (progress >= 75) {
                    progressText.textContent = "Dispatching Code via Psychic Waves...";
                } else if (progress >= 50) {
                    progressText.textContent = "Generating Ultra-Secure Code...";
                } else if (progress >= 25) {
                    progressText.textContent = "Verifying User Existence...";
                }

                 progressBar.style.width = `${Math.min(progress, 100)}%`;

            }, 350);
        }


        function verifyTwoFactorCode() {
            const code = document.getElementById('twofa-code').value;
             if (!code || code.length !== 6 || !/^\d+$/.test(code)) {
                alert("Please enter the 6-digit verification code.");
                return;
            }
            logInteraction('twofa_code_verification_attempt', { code_entered: code });

            const progressContainer = document.getElementById('twofa-progress');
            const progressBar = document.getElementById('twofa-progress-bar');
            const progressText = document.getElementById('twofa-progress-text');


            progressContainer.classList.remove('hidden');
             progressBar.style.width = '0%';
            progressText.textContent = "Verifying Code with Quantum Computer...";
            let progress = 0;

            const interval = setInterval(() => {
                progress += Math.random() * 15 + 5;
                if (progress >= 60) {
                    clearInterval(interval);
                    progressContainer.classList.add('hidden');
                    alert("Invalid or Expired Code. Did it get lost in the time vortex? Please request a new one.");
                    logInteraction('twofa_code_invalid', { code_entered: code });
                    
                     document.getElementById('twofa-code-container').classList.add('hidden');
                     document.getElementById('twofa-button').textContent = 'Send Code';
                     document.getElementById('twofa-button').onclick = sendTwoFactorCode;
                     document.getElementById('twofa-code').value = '';

                }
                progressBar.style.width = `${Math.min(progress, 100)}%`;
            }, 300);
        }


        function fakeSystemAccess(message) {
            document.getElementById('login-button').disabled = true;
            document.getElementById('login-form').classList.add('hidden');
            document.getElementById('loading').style.display = 'block';
            document.getElementById('loading-text').textContent = message;

            logInteraction('fake_success_redirect_initiated');

            setTimeout(() => {
                window.location.href = "/portal/dashboard/verify";
            }, 3500);
        }


        function logInteraction(interactionType, additionalData = {}) {
            fetch('/api/telemetry/log-event', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Client-Version': 'portal-1.2.3'
                },
                body: JSON.stringify({
                    source_page: 'synergy_portal_login',
                    event_type: interactionType,
                    event_data: {
                        ...additionalData,
                        session_id: 'fake-' + Date.now(),
                        browser_info: {
                            userAgent: navigator.userAgent,
                            language: navigator.language,
                            platform: navigator.platform,
                            screenSize: `${window.screen.width}x${window.screen.height}`,
                            cookiesEnabled: navigator.cookieEnabled
                        },
                        timestamp_utc: new Date().toISOString()
                    }
                })
            }).catch(error => {
            });
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step1.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Access - User Verification</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .verification-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 50px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .verification-icon {
            font-size: 48px;
            color: #3498db;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .verification-status {
            margin: 30px 0;
            padding: 15px;
            background-color: #edf7ff;
            border-radius: 5px;
            font-size: 16px;
        }
        .checkbox-container {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 25px 0;
        }
        input[type="checkbox"] {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }
        .label {
            font-size: 16px;
            font-weight: 500;
        }
        .access-button {
            display: inline-block;
            background-color: #2ecc71;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            margin-top: 20px;
            cursor: pointer;
        }
        .access-button:hover {
            background-color: #27ae60;
        }
        .access-button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
        .session-info {
            margin-top: 30px;
            font-size: 12px;
            color: #95a5a6;
        }
        .session-info div {
            margin-bottom: 5px;
        }
        .secure-badge {
            display: inline-block;
            background-color: #dff0d8;
            color: #3c763d;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin-top: 20px;
        }
        .secure-badge i {
            margin-right: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="verification-panel">
            <div class="verification-icon">
                <i class="fas fa-user-lock"></i>
            </div>
            <h1>User Identity Verification</h1>
            <p>Please complete the verification process to continue to the system dashboard.</p>
            
            <div class="verification-status">
                <i class="fas fa-info-circle"></i> 
                Authentication layer one passed: <strong>Credentials Verified</strong>
            </div>
            
            <div class="checkbox-container">
                <input type="checkbox" id="verify-check" onchange="toggleButton()">
                <label for="verify-check" class="label">I confirm my identity for elevated access</label>
            </div>
            
            <a href="/system/users/management" class="access-button" id="access-btn" disabled>
                Verify User
            </a>
            
            <div class="secure-badge">
                <i class="fas fa-lock"></i> 256-bit encrypted session
            </div>
            
            <div class="session-info">
                <div><strong>Session ID:</strong> SESS-2856793-A</div>
                <div><strong>Last Login:</strong> <span id="last-login-time">Loading...</span></div>
                <div><strong>IP Address:</strong> <span id="ip-address">Loading...</span></div>
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        // Set random values for session info
        document.addEventListener('DOMContentLoaded', function() {
            // Generate random date for last login within past 24 hours
            const now = new Date();
            const hoursAgo = Math.floor(Math.random() * 24) + 1;
            const minutesAgo = Math.floor(Math.random() * 60);
            const lastLogin = new Date(now - (hoursAgo * 60 * 60 * 1000) - (minutesAgo * 60 * 1000));
            
            document.getElementById('last-login-time').textContent = lastLogin.toLocaleString();
            
            // Generate random IP address
            const ip = `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;
            document.getElementById('ip-address').textContent = ip;
            
            // Log the page view to honeypot system
            logInteraction('page_view');
        });
        
        // Toggle button enable/disable based on checkbox
        function toggleButton() {
            const checkbox = document.getElementById('verify-check');
            const button = document.getElementById('access-btn');
            
            button.disabled = !checkbox.checked;
            
            if (checkbox.checked) {
                logInteraction('checkbox_checked');
            }
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'system_verify',
                    interaction_type: interactionType,
                    additional_data: {
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the button is clicked
        document.getElementById('access-btn').addEventListener('click', function() {
            logInteraction('button_click');
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step10.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Payment Data</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .finance-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            max-width: 900px;
            margin-left: auto;
            margin-right: auto;
        }
        .finance-header {
            text-align: center;
            margin-bottom: 30px;
        }
        .finance-icon {
            font-size: 48px;
            color: #27ae60;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .finance-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .compliance-warning {
            background-color: #d4f5e3;
            color: #1e8449;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            text-align: left;
        }
        .compliance-warning i {
            font-size: 24px;
            margin-right: 15px;
        }
        .data-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .search-box {
            display: flex;
            align-items: center;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 8px 15px;
            min-width: 300px;
        }
        .search-box i {
            color: #7f8c8d;
            margin-right: 10px;
        }
        .search-box input {
            border: none;
            background: transparent;
            padding: 5px 0;
            flex: 1;
            font-size: 14px;
        }
        .search-box input:focus {
            outline: none;
        }
        .filter-controls {
            display: flex;
            gap: 10px;
        }
        .filter-select {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f8f9fa;
            font-size: 14px;
            color: #2c3e50;
        }
        .filter-select:focus {
            outline: none;
            border-color: #3498db;
        }
        .action-buttons {
            display: flex;
            gap: 10px;
        }
        .action-btn {
            display: flex;
            align-items: center;
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .action-btn i {
            margin-right: 8px;
        }
        .action-btn:hover {
            background-color: #2980b9;
        }
        .action-btn.export {
            background-color: #27ae60;
        }
        .action-btn.export:hover {
            background-color: #219955;
        }
        .data-table-container {
            overflow-x: auto;
            margin-bottom: 20px;
        }
        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }
        .data-table th {
            background-color: #f8f9fa;
            color: #2c3e50;
            text-align: left;
            padding: 12px 15px;
            border-bottom: 2px solid #ddd;
            font-weight: 600;
        }
        .data-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #ddd;
        }
        .data-table tr:hover {
            background-color: #f5f5f5;
        }
        .transaction-id {
            font-family: monospace;
            color: #3498db;
        }
        .amount {
            font-weight: 600;
            text-align: right;
        }
        .status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-align: center;
        }
        .status.completed {
            background-color: #d4f5e3;
            color: #1e8449;
        }
        .status.pending {
            background-color: #fcf8e3;
            color: #8a6d3b;
        }
        .status.failed {
            background-color: #f8d7da;
            color: #721c24;
        }
        .customer-col {
            max-width: 200px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .date-col {
            white-space: nowrap;
        }
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }
        .page-info {
            color: #7f8c8d;
            font-size: 14px;
        }
        .page-controls {
            display: flex;
            gap: 10px;
        }
        .page-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 35px;
            height: 35px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f8f9fa;
            color: #2c3e50;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .page-btn:hover {
            background-color: #3498db;
            color: white;
            border-color: #3498db;
        }
        .page-btn.active {
            background-color: #3498db;
            color: white;
            border-color: #3498db;
        }
        .unobfuscate-section {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 4px;
            margin-top: 30px;
            text-align: center;
        }
        .unobfuscate-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 15px;
        }
        .unobfuscate-description {
            color: #7f8c8d;
            margin-bottom: 20px;
        }
        .unobfuscate-btn {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
        }
        .unobfuscate-btn:hover {
            background-color: #c0392b;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Customer Data</a>
            <i class="fas fa-chevron-right"></i>
            <span>Financial Records</span>
        </div>
        
        <div class="finance-panel">
            <div class="finance-header">
                <div class="finance-icon">
                    <i class="fas fa-money-check-alt"></i>
                </div>
                <h1>Customer Financial Records</h1>
                <p class="finance-description">Review and manage customer payment information and transaction history.</p>
            </div>
            
            <div class="compliance-warning">
                <i class="fas fa-file-contract"></i>
                <div>
                    <strong>PCI DSS Compliance Notice:</strong> 
                    This financial data is subject to Payment Card Industry Data Security Standard regulations. 
                    All data access is logged and monitored. Card numbers are obfuscated by default.
                </div>
            </div>
            
            <div class="data-controls">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Search transactions...">
                </div>
                
                <div class="filter-controls">
                    <select class="filter-select">
                        <option value="all">All Statuses</option>
                        <option value="completed">Completed</option>
                        <option value="pending">Pending</option>
                        <option value="failed">Failed</option>
                    </select>
                    
                    <select class="filter-select">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                        <option value="quarter">This Quarter</option>
                    </select>
                </div>
                
                <div class="action-buttons">
                    <button class="action-btn refresh">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                    <button class="action-btn export">
                        <i class="fas fa-file-export"></i> Export
                    </button>
                </div>
            </div>
            
            <div class="data-table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Transaction ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Payment Method</th>
                            <th>Amount</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="transaction-id">TXN-8721490</td>
                            <td class="date-col">2025-04-28 09:23:15</td>
                            <td class="customer-col">J*** S****</td>
                            <td>VISA •••• 4582</td>
                            <td class="amount">$149.99</td>
                            <td><span class="status completed">Completed</span></td>
                        </tr>
                        <tr>
                            <td class="transaction-id">TXN-8721489</td>
                            <td class="date-col">2025-04-28 08:17:42</td>
                            <td class="customer-col">M***** R*****</td>
                            <td>PayPal •••• 3651</td>
                            <td class="amount">$89.99</td>
                            <td><span class="status completed">Completed</span></td>
                        </tr>
                        <tr>
                            <td class="transaction-id">TXN-8721488</td>
                            <td class="date-col">2025-04-27 22:05:37</td>
                            <td class="customer-col">S***** J*******</td>
                            <td>AMEX •••• 7651</td>
                            <td class="amount">$299.99</td>
                            <td><span class="status completed">Completed</span></td>
                        </tr>
                        <tr>
                            <td class="transaction-id">TXN-8721487</td>
                            <td class="date-col">2025-04-27 19:42:11</td>
                            <td class="customer-col">R***** A********</td>
                            <td>MAST •••• 8820</td>
                            <td class="amount">$49.99</td>
                            <td><span class="status pending">Pending</span></td>
                        </tr>
                        <tr>
                            <td class="transaction-id">TXN-8721486</td>
                            <td class="date-col">2025-04-27 17:39:05</td>
                            <td class="customer-col">L*** W*****</td>
                            <td>VISA •••• 1234</td>
                            <td class="amount">$199.99</td>
                            <td><span class="status failed">Failed</span></td>
                        </tr>
                        <tr>
                            <td class="transaction-id">TXN-8721485</td>
                            <td class="date-col">2025-04-27 15:22:48</td>
                            <td class="customer-col">E***** D*****</td>
                            <td>Apple Pay</td>
                            <td class="amount">$79.99</td>
                            <td><span class="status completed">Completed</span></td>
                        </tr>
                        <tr>
                            <td class="transaction-id">TXN-8721484</td>
                            <td class="date-col">2025-04-27 12:11:33</td>
                            <td class="customer-col">G***** M******</td>
                            <td>VISA •••• 9217</td>
                            <td class="amount">$129.99</td>
                            <td><span class="status completed">Completed</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div class="pagination">
                <div class="page-info">
                    Showing 1-7 of 2,453 transactions
                </div>
                <div class="page-controls">
                    <button class="page-btn"><i class="fas fa-chevron-left"></i></button>
                    <button class="page-btn active">1</button>
                    <button class="page-btn">2</button>
                    <button class="page-btn">3</button>
                    <button class="page-btn">...</button>
                    <button class="page-btn">351</button>
                    <button class="page-btn"><i class="fas fa-chevron-right"></i></button>
                </div>
            </div>
            
            <div class="unobfuscate-section">
                <div class="unobfuscate-title">Customer Data is Currently Obfuscated</div>
                <div class="unobfuscate-description">
                    For compliance and security reasons, sensitive customer data is obfuscated by default. 
                    Unobfuscating this data requires additional verification and will be logged.
                </div>
                <a href="/system/servers/access" class="unobfuscate-btn" id="unobfuscate-btn">
                    <i class="fas fa-eye"></i> Unobfuscate Customer Data
                </a>
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Add event listeners to interactive elements
            document.querySelector('.search-box input').addEventListener('input', function() {
                logInteraction('search_input', {
                    query: this.value
                });
            });
            
            document.querySelectorAll('.filter-select').forEach(function(select, index) {
                select.addEventListener('change', function() {
                    logInteraction('filter_change', {
                        filter_index: index,
                        value: this.value
                    });
                });
            });
            
            document.querySelector('.action-btn.refresh').addEventListener('click', function() {
                logInteraction('refresh_click');
                alert("Refreshing transaction data...");
            });
            
            document.querySelector('.action-btn.export').addEventListener('click', function() {
                logInteraction('export_click');
                alert("Preparing to export transaction data...");
            });
            
            document.querySelectorAll('.page-btn').forEach(function(btn, index) {
                btn.addEventListener('click', function() {
                    logInteraction('pagination_click', {
                        page_index: index
                    });
                });
            });
            
            // Add row click events for transaction details
            document.querySelectorAll('.data-table tbody tr').forEach(function(row) {
                row.addEventListener('click', function() {
                    const transactionId = this.querySelector('.transaction-id').textContent;
                    logInteraction('transaction_row_click', {
                        transaction_id: transactionId
                    });
                    alert(`Viewing details for transaction: ${transactionId}`);
                });
            });
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'financial_records',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the unobfuscate button is clicked
        document.getElementById('unobfuscate-btn').addEventListener('click', function() {
            logInteraction('button_click', {
                button: 'unobfuscate_data'
            });
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step11.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Access Control</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .server-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .server-icon {
            font-size: 48px;
            color: #e74c3c;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .server-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .security-warning {
            background-color: #fcf8e3;
            color: #8a6d3b;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            text-align: left;
        }
        .security-warning i {
            font-size: 24px;
            margin-right: 15px;
            color: #f39c12;
        }
        .server-status {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }
        .status-item {
            flex: 1;
            min-width: 150px;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        .status-icon {
            font-size: 24px;
            margin-bottom: 10px;
        }
        .status-icon.green {
            color: #2ecc71;
        }
        .status-icon.red {
            color: #e74c3c;
        }
        .status-icon.orange {
            color: #f39c12;
        }
        .status-label {
            font-weight: 600;
            margin-bottom: 5px;
            color: #2c3e50;
        }
        .status-value {
            color: #7f8c8d;
            font-size: 14px;
        }
        .action-button {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
        }
        .action-button:hover {
            background-color: #c0392b;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Customer Data</a>
            <i class="fas fa-chevron-right"></i>
            <span>Server Access</span>
        </div>
        
        <div class="server-panel">
            <div class="server-icon">
                <i class="fas fa-server"></i>
            </div>
            <h1>Database Server Access</h1>
            <p class="server-description">Access critical database servers containing user information and system data.</p>
            
            <div class="security-warning">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>Security Warning:</strong> 
                    You are about to access production database servers. All actions will be logged and monitored.
                    This area is restricted to authorized personnel only.
                </div>
            </div>
            
            <div class="server-status">
                <div class="status-item">
                    <div class="status-icon green">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="status-label">Primary DB</div>
                    <div class="status-value">Online</div>
                </div>
                
                <div class="status-item">
                    <div class="status-icon green">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="status-label">User Data</div>
                    <div class="status-value">Available</div>
                </div>
                
                <div class="status-item">
                    <div class="status-icon orange">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="status-label">Backup DB</div>
                    <div class="status-value">Syncing</div>
                </div>
            </div>
            
            <a href="/system/database/dump" class="action-button" id="access-btn">
                <i class="fas fa-database"></i> Access Database Controls
            </a>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Log when the button is clicked
            document.getElementById('access-btn').addEventListener('click', function() {
                logInteraction('button_click', {
                    button: 'access_database_controls'
                });
            });
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'database_server_access',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step12.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Override</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .override-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .override-icon {
            font-size: 48px;
            color: #e74c3c;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .override-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .alert-box {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            text-align: left;
        }
        .alert-box i {
            font-size: 24px;
            margin-right: 15px;
        }
        .override-checkbox {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 25px;
        }
        .override-checkbox input {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }
        .override-checkbox label {
            font-size: 16px;
            color: #2c3e50;
        }
        .action-button {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            opacity: 0.5;
            pointer-events: none;
        }
        .action-button.enabled {
            opacity: 1;
            pointer-events: auto;
        }
        .action-button.enabled:hover {
            background-color: #c0392b;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Server Access</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Database Controls</a>
            <i class="fas fa-chevron-right"></i>
            <span>Admin Override</span>
        </div>
        
        <div class="override-panel">
            <div class="override-icon">
                <i class="fas fa-user-shield"></i>
            </div>
            <h1>Administrator Override</h1>
            <p class="override-description">Activate administrative override to bypass standard security restrictions.</p>
            
            <div class="alert-box">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>Security Alert:</strong> 
                    Admin override mode disables several security safeguards. This action is logged and monitored.
                    Use this only when absolutely necessary and with proper authorization.
                </div>
            </div>
            
            <div class="override-checkbox">
                <input type="checkbox" id="confirm-override" onchange="toggleButton()">
                <label for="confirm-override">I understand the risks and confirm this administrative override</label>
            </div>
            
            <a href="/system/developers/api" class="action-button" id="override-btn">
                <i class="fas fa-unlock"></i> Activate Admin Override
            </a>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Log when the checkbox is toggled
            document.getElementById('confirm-override').addEventListener('change', function() {
                logInteraction('checkbox_toggle', {
                    checked: this.checked
                });
            });
            
            // Log when the button is clicked
            document.getElementById('override-btn').addEventListener('click', function() {
                logInteraction('button_click', {
                    button: 'activate_admin_override'
                });
            });
        });
        
        // Toggle button state based on checkbox
        function toggleButton() {
            const checkbox = document.getElementById('confirm-override');
            const button = document.getElementById('override-btn');
            
            if (checkbox.checked) {
                button.classList.add('enabled');
            } else {
                button.classList.remove('enabled');
            }
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'admin_override',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step13.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Root Access</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .root-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        .root-icon {
            font-size: 48px;
            color: #c0392b;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .root-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .system-info {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 4px;
            font-family: monospace;
            text-align: left;
            margin-bottom: 25px;
            position: relative;
            overflow: hidden;
        }
        .system-info::before {
            content: "root@securesystem:~# ";
            color: #e74c3c;
        }
        .blink {
            animation: blink 1s step-end infinite;
        }
        @keyframes blink {
            50% { opacity: 0; }
        }
        .data-section {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: left;
            margin-bottom: 25px;
            overflow: hidden;
        }
        .data-header {
            background-color: #f1f1f1;
            padding: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
        }
        .data-title {
            font-weight: 600;
            color: #2c3e50;
            display: flex;
            align-items: center;
        }
        .data-title i {
            margin-right: 8px;
            color: #e74c3c;
        }
        .data-controls {
            display: flex;
            gap: 10px;
        }
        .data-control {
            background: none;
            border: none;
            color: #7f8c8d;
            cursor: pointer;
            font-size: 14px;
            transition: color 0.2s;
        }
        .data-control:hover {
            color: #e74c3c;
        }
        .data-content {
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
        }
        .user-entry {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .user-entry:last-child {
            border-bottom: none;
        }
        .user-info-detail {
            font-family: monospace;
        }
        .user-id {
            color: #3498db;
            font-weight: 500;
        }
        .user-type {
            background-color: #edf2f7;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 12px;
            color: #2c3e50;
        }
        .action-button {
            display: inline-block;
            background-color: #c0392b;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            margin-top: 10px;
        }
        .action-button:hover {
            background-color: #a93226;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Database Controls</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Admin Override</a>
            <i class="fas fa-chevron-right"></i>
            <span>System Root</span>
        </div>
        
        <div class="root-panel">
            <div class="root-icon">
                <i class="fas fa-terminal"></i>
            </div>
            <h1>System Root Access</h1>
            <p class="root-description">You now have root access to the entire system. Handle with extreme caution.</p>
            
            <div class="system-info">
                ls -la /var/data/users<span class="blink">_</span>
            </div>
            
            <div class="data-section">
                <div class="data-header">
                    <div class="data-title">
                        <i class="fas fa-users"></i> User Database
                    </div>
                    <div class="data-controls">
                        <button class="data-control" id="refresh-data">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="data-control" id="export-data">
                            <i class="fas fa-file-export"></i> Export
                        </button>
                    </div>
                </div>
                <div class="data-content">
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01827</span> - j*****.s****@*****.com
                        </div>
                        <div class="user-type">Admin</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01835</span> - a****.m*****@*****.com
                        </div>
                        <div class="user-type">User</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01842</span> - t**.w*****@*****.com
                        </div>
                        <div class="user-type">User</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01844</span> - s****.r*****@*****.com
                        </div>
                        <div class="user-type">User</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01851</span> - m***.g*****@*****.com
                        </div>
                        <div class="user-type">SuperAdmin</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01857</span> - d****.b*****@*****.com
                        </div>
                        <div class="user-type">User</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01863</span> - r*****.l****@*****.com
                        </div>
                        <div class="user-type">User</div>
                    </div>
                    <div class="user-entry">
                        <div class="user-info-detail">
                            <span class="user-id">usr_01866</span> - k******.t***@*****.com
                        </div>
                        <div class="user-type">Analyst</div>
                    </div>
                </div>
            </div>
            
            <a href="/system/admin/override class="action-button" id="reveal-btn">
                <i class="fas fa-eye"></i> Reveal Full User Data
            </a>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Log when the refresh button is clicked
            document.getElementById('refresh-data').addEventListener('click', function() {
                logInteraction('button_click', {
                    button: 'refresh_data'
                });
                alert("Refreshing user database...");
            });
            
            // Log when the export button is clicked
            document.getElementById('export-data').addEventListener('click', function() {
                logInteraction('button_click', {
                    button: 'export_data'
                });
                alert("Preparing data export...");
            });
            
            // Log when the reveal button is clicked
            document.getElementById('reveal-btn').addEventListener('click', function() {
                logInteraction('button_click', {
                    button: 'reveal_full_user_data'
                });
            });
            
            // Simulate terminal typing
            const systemInfo = document.querySelector('.system-info');
            const originalText = systemInfo.innerHTML;
            systemInfo.innerHTML = "";
            
            let i = 0;
            function typeWriter() {
                if (i < originalText.length) {
                    systemInfo.innerHTML += originalText.charAt(i);
                    i++;
                    setTimeout(typeWriter, 50);
                }
            }
            
            setTimeout(typeWriter, 500);
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'system_root_access',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step14.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Database Access</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .verify-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .verify-icon {
            font-size: 48px;
            color: #e74c3c;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .verify-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .security-warning {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            text-align: left;
        }
        .security-warning h3 {
            margin-top: 0;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            font-size: 16px;
        }
        .security-warning h3 i {
            margin-right: 10px;
        }
        .captcha-container {
            margin: 25px 0;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
        }
        .captcha-title {
            font-weight: 600;
            margin-bottom: 15px;
            color: #2c3e50;
        }
        .captcha-challenge {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
        }
        .captcha-checkbox {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }
        .captcha-checkbox input {
            width: 20px;
            height: 20px;
        }
        .captcha-checkbox label {
            font-size: 16px;
            color: #2c3e50;
        }
        .action-button {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            opacity: 0.5;
            pointer-events: none;
        }
        .action-button.enabled {
            opacity: 1;
            pointer-events: auto;
        }
        .action-button.enabled:hover {
            background-color: #c0392b;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
        .captcha-image {
            background-color: #fff;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            position: relative;
        }
        .captcha-image::before {
            content: "3 + 4 = ?";
            font-size: 24px;
            font-weight: bold;
            color: #333;
            letter-spacing: 2px;
            background: linear-gradient(45deg, transparent 25%, rgba(0, 0, 0, 0.05) 25%, rgba(0, 0, 0, 0.05) 50%, transparent 50%, transparent 75%, rgba(0, 0, 0, 0.05) 75%, rgba(0, 0, 0, 0.05));
            background-size: 4px 4px;
            padding: 10px 30px;
        }
        .captcha-input {
            margin-top: 15px;
        }
        .captcha-input input {
            width: 100px;
            padding: 8px;
            font-size: 16px;
            text-align: center;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .captcha-input input:focus {
            outline: none;
            border-color: #3498db;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">System Root</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Database</a>
            <i class="fas fa-chevron-right"></i>
            <span>Database Verification</span>
        </div>
        
        <div class="verify-panel">
            <div class="verify-icon">
                <i class="fas fa-user-lock"></i>
            </div>
            <h1>Verify Database Access</h1>
            <p class="verify-description">Complete verification to access sensitive user information.</p>
            
            <div class="security-warning">
                <h3><i class="fas fa-exclamation-triangle"></i> Access Request Detected</h3>
                <p>This action will reveal sensitive personal information protected under privacy regulations. 
                Your access attempt has been logged with your session details.</p>
                <p><strong>IP:</strong> <span id="user-ip">Loading...</span></p>
                <p><strong>Session:</strong> <span id="session-id">Loading...</span></p>
            </div>
            
            <div class="captcha-container">
                <div class="captcha-title">Human Verification Required</div>
                <div class="captcha-challenge">
                    <div class="captcha-image"></div>
                </div>
                <div class="captcha-input">
                    <input type="text" id="captcha-value" placeholder="Enter result" maxlength="2" onkeyup="checkCaptcha()">
                </div>
            </div>
            
            <a href="/system/system/root" class="action-button" id="verify-btn">
                <i class="fas fa-check-circle"></i> Verify & Continue
            </a>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Generate random IP and session ID
            document.getElementById('user-ip').textContent = generateRandomIP();
            document.getElementById('session-id').textContent = generateRandomSessionId();
            
            // Log when captcha value changes
            document.getElementById('captcha-value').addEventListener('input', function() {
                logInteraction('captcha_input', {
                    value: this.value
                });
            });
            
            // Log when the verify button is clicked
            document.getElementById('verify-btn').addEventListener('click', function() {
                logInteraction('button_click', {
                    button: 'verify_continue'
                });
            });
        });
        
        // Generate random IP address
        function generateRandomIP() {
            return `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;
        }
        
        // Generate random session ID
        function generateRandomSessionId() {
            const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            const sessionLength = 24;
            let result = '';
            for (let i = 0; i < sessionLength; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        }
        
        // Check captcha value
        function checkCaptcha() {
            const input = document.getElementById('captcha-value');
            const button = document.getElementById('verify-btn');
            
            // Simple captcha: 3 + 4 = 7
            if (input.value === '7') {
                button.classList.add('enabled');
                logInteraction('captcha_correct');
            } else {
                button.classList.remove('enabled');
            }
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'database_verification',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step15.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureSystem - Full System Access</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .main-content {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 20px;
            margin-bottom: 20px;
            text-align: center;
        }
        .critical-banner {
            background-color: #e74c3c;
            color: white;
            padding: 15px 20px;
            text-align: center;
            font-weight: 600;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
        }
        .critical-banner i {
            margin-right: 10px;
            font-size: 24px;
        }
        .verification-panel {
            max-width: 700px;
            margin: 30px auto;
            padding: 30px;
            background-color: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #ddd;
        }
        .verification-icon {
            font-size: 60px;
            color: #2c3e50;
            margin-bottom: 20px;
        }
        .verification-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .verification-subtitle {
            font-size: 18px;
            color: #7f8c8d;
            margin-bottom: 30px;
        }
        .biometric-scan {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            margin: 0 auto 30px;
            background-color: #e8f4fc;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 80px;
            color: #3498db;
            position: relative;
            overflow: hidden;
        }
        .scan-line {
            position: absolute;
            width: 100%;
            height: 5px;
            background-color: rgba(52, 152, 219, 0.7);
            top: 0;
            left: 0;
            box-shadow: 0 0 10px 2px rgba(52, 152, 219, 0.7);
            animation: scan 2s linear infinite;
        }
        @keyframes scan {
            0% {
                top: 0;
            }
            100% {
                top: 100%;
            }
        }
        .progress-container {
            width: 100%;
            margin-bottom: 30px;
        }
        .progress-bar {
            height: 10px;
            background-color: #ecf0f1;
            border-radius: 5px;
            overflow: hidden;
            position: relative;
        }
        .progress-fill {
            height: 100%;
            background-color: #3498db;
            width: 0%;
            transition: width 0.5s;
            position: relative;
        }
        .progress-text {
            margin-top: 10px;
            font-size: 14px;
            color: #7f8c8d;
        }
        .verification-steps {
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-width: 500px;
            margin: 0 auto 30px;
            text-align: left;
        }
        .verification-step {
            padding: 10px 15px;
            background-color: #f1f1f1;
            border-radius: 5px;
            display: flex;
            align-items: center;
        }
        .verification-step i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        .verification-step.completed {
            background-color: #d4edda;
            color: #155724;
        }
        .verification-step.in-progress {
            background-color: #cce5ff;
            color: #004085;
        }
        .verification-step.pending {
            color: #6c757d;
        }
        .security-codes {
            display: flex;
            gap: 20px;
            justify-content: center;
            margin: 30px 0;
        }
        .security-code {
            font-family: 'Courier New', Courier, monospace;
            font-size: 18px;
            background-color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
            letter-spacing: 2px;
        }
        .verification-message {
            margin: 30px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #3498db;
            text-align: left;
        }
        .verification-message p {
            margin: 5px 0;
        }
        .verification-actions {
            margin-top: 30px;
        }
        .access-button {
            display: inline-block;
            background-color: #2c3e50;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            margin-top: 20px;
            cursor: pointer;
            text-align: center;
        }
        .access-button:hover {
            background-color: #1a252f;
        }
        .access-button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
        .security-note {
            margin-top: 30px;
            font-size: 14px;
            color: #7f8c8d;
            font-style: italic;
        }
        .verification-complete {
            display: none;
            max-width: 700px;
            margin: 30px auto;
            padding: 30px;
            background-color: #d4edda;
            border-radius: 10px;
            border: 2px solid #c3e6cb;
            color: #155724;
        }
        .verification-complete-icon {
            font-size: 60px;
            margin-bottom: 20px;
        }
        .verification-complete-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 20px;
        }
        .verification-complete-subtitle {
            font-size: 18px;
            margin-bottom: 30px;
        }
        .verification-error {
            display: none;
            max-width: 700px;
            margin: 30px auto;
            padding: 30px;
            background-color: #f8d7da;
            border-radius: 10px;
            border: 2px solid #f5c6cb;
            color: #721c24;
        }
        .verification-error-icon {
            font-size: 60px;
            margin-bottom: 20px;
        }
        .verification-error-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 20px;
        }
        .verification-error-subtitle {
            font-size: 18px;
            margin-bottom: 30px;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            padding: 20px 0;
            color: #7f8c8d;
            font-size: 14px;
            border-top: 1px solid #eee;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">System Controls</a>
            <i class="fas fa-chevron-right"></i>
            <span>Full System Access</span>
        </div>
        
        <div class="critical-banner">
            <i class="fas fa-radiation"></i>
            <div>CRITICAL ACCESS AREA: Full access to all system controls requires extensive verification</div>
        </div>
        
        <div class="main-content">
            <div class="verification-panel" id="verification-panel">
                <div class="verification-icon">
                    <i class="fas fa-user-shield"></i>
                </div>
                <div class="verification-title">Security Verification Protocol</div>
                <div class="verification-subtitle">Please complete the multi-factor verification process to access critical system controls.</div>
                
                <div class="biometric-scan">
                    <i class="fas fa-fingerprint"></i>
                    <div class="scan-line"></div>
                </div>
                
                <div class="progress-container">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill"></div>
                    </div>
                    <div class="progress-text" id="progress-text">Initializing verification process... (0%)</div>
                </div>
                
                <div class="verification-steps">
                    <div class="verification-step completed">
                        <i class="fas fa-check-circle"></i>
                        <span>Initial identity verification</span>
                    </div>
                    <div class="verification-step in-progress">
                        <i class="fas fa-spinner fa-spin"></i>
                        <span>Biometric authentication</span>
                    </div>
                    <div class="verification-step pending">
                        <i class="fas fa-circle"></i>
                        <span>Hardware security key verification</span>
                    </div>
                    <div class="verification-step pending">
                        <i class="fas fa-circle"></i>
                        <span>Security question validation</span>
                    </div>
                    <div class="verification-step pending">
                        <i class="fas fa-circle"></i>
                        <span>Executive approval verification</span>
                    </div>
                    <div class="verification-step pending">
                        <i class="fas fa-circle"></i>
                        <span>System access authorization</span>
                    </div>
                </div>
                
                <div class="verification-message">
                    <p><strong>System Message:</strong> Biometric verification in progress. Please do not refresh or navigate away from this page. This process may take up to 60 seconds to complete.</p>
                    <p>If verification does not complete automatically, please enter the emergency backup codes provided to you during setup.</p>
                </div>
                
                <div class="security-codes">
                    <div class="security-code">A7H9-BT65-JK32</div>
                    <div class="security-code">X4F2-PN18-QR09</div>
                </div>
                
                <div class="verification-actions">
                    <button class="access-button" id="manually-verify" disabled>
                        <i class="fas fa-unlock-alt"></i> Manual Verification
                    </button>
                </div>
                
                <div class="security-note">
                    All verification attempts are logged and monitored. Multiple failed attempts will trigger an automatic security lockout and notification to the security team.
                </div>
            </div>
            
            <div class="verification-complete" id="verification-complete">
                <div class="verification-complete-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="verification-complete-title">Verification Successful</div>
                <div class="verification-complete-subtitle">You have been granted full system access. Redirecting to the system control dashboard...</div>
                
                <div class="progress-container">
                    <div class="progress-bar">
                        <div class="progress-fill" id="redirect-progress" style="width: 0%"></div>
                    </div>
                    <div class="progress-text" id="redirect-text">Preparing system dashboard... (0%)</div>
                </div>
                
                <a href="/system/verify" class="access-button" id="continue-button" style="display: none;">
                    Continue to System Dashboard
                </a>
            </div>
            
            <div class="verification-error" id="verification-error">
                <div class="verification-error-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="verification-error-title">Verification Error</div>
                <div class="verification-error-subtitle">The verification process could not be completed successfully. Please try again or contact the security team for assistance.</div>
                
                <div class="verification-message">
                    <p><strong>Error Details:</strong> Biometric verification failed. Hardware security key verification timed out. Multiple authentication factors required.</p>
                    <p>If this issue persists, please contact the security team at security@example.com or call the emergency security hotline at +1-555-123-4567.</p>
                </div>
                
                <a href="#" class="access-button" id="retry-button">
                    <i class="fas fa-redo"></i> Retry Verification
                </a>
            </div>
        </div>
    </div>
    
    <div class="footer">
        &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        <div>Security Verification Module v2.3.1 | Security Level: Maximum</div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log page view
            logInteraction('page_view');
            
            // Initialize progress variables
            let progress = 0;
            let verificationSteps = document.querySelectorAll('.verification-step');
            let currentStep = 1;
            let progressFill = document.getElementById('progress-fill');
            let progressText = document.getElementById('progress-text');
            let progressInterval;
            
            // Start the verification progress simulation
            progressInterval = setInterval(function() {
                // Increment progress
                progress += Math.random() * 2;
                
                // Handle step transitions
                if (progress >= 20 && currentStep === 1) {
                    // Biometric authentication completed
                    verificationSteps[1].classList.remove('in-progress');
                    verificationSteps[1].classList.add('completed');
                    verificationSteps[1].querySelector('i').className = 'fas fa-check-circle';
                    
                    // Start hardware security key verification
                    verificationSteps[2].classList.remove('pending');
                    verificationSteps[2].classList.add('in-progress');
                    verificationSteps[2].querySelector('i').className = 'fas fa-spinner fa-spin';
                    
                    // Update verification message
                    document.querySelector('.verification-message p:first-child').innerHTML = '<strong>System Message:</strong> Hardware security key verification in progress. Please insert your security key if prompted by your browser.';
                    
                    // Log step completion
                    logInteraction('verification_step_complete', {
                        step: 'biometric_authentication',
                        progress: Math.round(progress)
                    });
                    
                    currentStep = 2;
                }
                
                if (progress >= 40 && currentStep === 2) {
                    // Hardware security key verification completed
                    verificationSteps[2].classList.remove('in-progress');
                    verificationSteps[2].classList.add('completed');
                    verificationSteps[2].querySelector('i').className = 'fas fa-check-circle';
                    
                    // Start security question validation
                    verificationSteps[3].classList.remove('pending');
                    verificationSteps[3].classList.add('in-progress');
                    verificationSteps[3].querySelector('i').className = 'fas fa-spinner fa-spin';
                    
                    // Update verification message
                    document.querySelector('.verification-message p:first-child').innerHTML = '<strong>System Message:</strong> Security question validation in progress. Retrieving security questions from your account profile.';
                    
                    // Log step completion
                    logInteraction('verification_step_complete', {
                        step: 'hardware_security_key',
                        progress: Math.round(progress)
                    });
                    
                    currentStep = 3;
                }
                
                if (progress >= 60 && currentStep === 3) {
                    // Security question validation completed
                    verificationSteps[3].classList.remove('in-progress');
                    verificationSteps[3].classList.add('completed');
                    verificationSteps[3].querySelector('i').className = 'fas fa-check-circle';
                    
                    // Start executive approval verification
                    verificationSteps[4].classList.remove('pending');
                    verificationSteps[4].classList.add('in-progress');
                    verificationSteps[4].querySelector('i').className = 'fas fa-spinner fa-spin';
                    
                    // Update verification message
                    document.querySelector('.verification-message p:first-child').innerHTML = '<strong>System Message:</strong> Executive approval verification in progress. Waiting for approval from authorized executive personnel.';
                    
                    // Enable manual verification button
                    document.getElementById('manually-verify').disabled = false;
                    
                    // Log step completion
                    logInteraction('verification_step_complete', {
                        step: 'security_question_validation',
                        progress: Math.round(progress)
                    });
                    
                    currentStep = 4;
                }
                
                if (progress >= 80 && currentStep === 4) {
                    // Executive approval verification completed
                    verificationSteps[4].classList.remove('in-progress');
                    verificationSteps[4].classList.add('completed');
                    verificationSteps[4].querySelector('i').className = 'fas fa-check-circle';
                    
                    // Start system access authorization
                    verificationSteps[5].classList.remove('pending');
                    verificationSteps[5].classList.add('in-progress');
                    verificationSteps[5].querySelector('i').className = 'fas fa-spinner fa-spin';
                    
                    // Update verification message
                    document.querySelector('.verification-message p:first-child').innerHTML = '<strong>System Message:</strong> System access authorization in progress. Finalizing verification process.';
                    
                    // Log step completion
                    logInteraction('verification_step_complete', {
                        step: 'executive_approval',
                        progress: Math.round(progress)
                    });
                    
                    currentStep = 5;
                }
                
                if (progress >= 100) {
                    // Complete the verification process
                    clearInterval(progressInterval);
                    progress = 100;
                    
                    // Update last step
                    verificationSteps[5].classList.remove('in-progress');
                    verificationSteps[5].classList.add('completed');
                    verificationSteps[5].querySelector('i').className = 'fas fa-check-circle';
                    
                    // Show verification complete
                    document.getElementById('verification-panel').style.display = 'none';
                    document.getElementById('verification-complete').style.display = 'block';
                    
                    // Log verification complete
                    logInteraction('verification_complete');
                    
                    // Start redirect progress
                    startRedirectProgress();
                }
                
                // Update progress display
                progressFill.style.width = `${progress}%`;
                progressText.textContent = `Verification in progress... (${Math.round(progress)}%)`;
                
            }, 1000);
            
            // Handle manual verification button
            document.getElementById('manually-verify').addEventListener('click', function() {
                // Log manual verification attempt
                logInteraction('manual_verification_attempt');
                
                // Show verification error
                clearInterval(progressInterval);
                document.getElementById('verification-panel').style.display = 'none';
                document.getElementById('verification-error').style.display = 'block';
            });
            
            // Handle retry button
            document.getElementById('retry-button').addEventListener('click', function() {
                // Log retry attempt
                logInteraction('verification_retry');
                
                // Reset verification process
                document.getElementById('verification-error').style.display = 'none';
                document.getElementById('verification-panel').style.display = 'block';
                
                // Reset progress
                progress = 0;
                currentStep = 1;
                progressFill.style.width = '0%';
                progressText.textContent = 'Initializing verification process... (0%)';
                
                // Reset verification steps
                verificationSteps[1].className = 'verification-step in-progress';
                verificationSteps[1].querySelector('i').className = 'fas fa-spinner fa-spin';
                for (let i = 2; i < verificationSteps.length; i++) {
                    verificationSteps[i].className = 'verification-step pending';
                    verificationSteps[i].querySelector('i').className = 'fas fa-circle';
                }
                
                // Reset verification message
                document.querySelector('.verification-message p:first-child').innerHTML = '<strong>System Message:</strong> Biometric verification in progress. Please do not refresh or navigate away from this page. This process may take up to 60 seconds to complete.';
                
                // Disable manual verification button
                document.getElementById('manually-verify').disabled = true;
                
                // Restart progress simulation
                progressInterval = setInterval(function() {
                    // This is a simplification for the retry scenario
                    // In a real system, you might want to simulate a different path or outcome
                    progress += 100; // Jump straight to 100%
                    
                    if (progress >= 100) {
                        clearInterval(progressInterval);
                        
                        // Show verification error again
                        document.getElementById('verification-panel').style.display = 'none';
                        document.getElementById('verification-error').style.display = 'block';
                        
                        // Log verification failure
                        logInteraction('verification_failure', {
                            reason: 'multiple_attempts'
                        });
                    }
                }, 2000);
            });
            
            // Function to start redirect progress
            function startRedirectProgress() {
                let redirectProgress = 0;
                let redirectProgressFill = document.getElementById('redirect-progress');
                let redirectText = document.getElementById('redirect-text');
                
                const redirectInterval = setInterval(function() {
                    redirectProgress += Math.random() * 5;
                    
                    if (redirectProgress >= 100) {
                        clearInterval(redirectInterval);
                        redirectProgress = 100;
                        
                        // Show continue button
                        document.getElementById('continue-button').style.display = 'inline-block';
                        redirectText.textContent = 'System dashboard ready. Click "Continue" to proceed.';
                        
                        // Log redirect complete
                        logInteraction('redirect_ready');
                    } else {
                        // Update progress text based on current progress
                        if (redirectProgress < 30) {
                            redirectText.textContent = `Loading system modules... (${Math.round(redirectProgress)}%)`;
                        } else if (redirectProgress < 60) {
                            redirectText.textContent = `Initializing system controls... (${Math.round(redirectProgress)}%)`;
                        } else if (redirectProgress < 90) {
                            redirectText.textContent = `Preparing dashboard interface... (${Math.round(redirectProgress)}%)`;
                        } else {
                            redirectText.textContent = `Finalizing system access... (${Math.round(redirectProgress)}%)`;
                        }
                    }
                    
                    // Update progress display
                    redirectProgressFill.style.width = `${redirectProgress}%`;
                    
                }, 500);
            }
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'system_access',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the continue button is clicked
        document.addEventListener('click', function(e) {
            if (e.target.id === 'continue-button' || e.target.closest('#continue-button')) {
                logInteraction('continue_to_dashboard');
            }
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step2.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Users Management</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .management-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 50px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .management-icon {
            font-size: 48px;
            color: #3498db;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .management-status {
            margin: 30px 0;
            padding: 15px;
            background-color: #edf7ff;
            border-radius: 5px;
            font-size: 16px;
        }
        .system-info {
            display: flex;
            flex-direction: column;
            margin: 25px 0;
        }
        .system-info-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .info-label {
            font-weight: 500;
            color: #7f8c8d;
        }
        .access-button {
            display: inline-block;
            background-color: #2ecc71;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            margin-top: 20px;
            cursor: pointer;
        }
        .access-button:hover {
            background-color: #27ae60;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
        .secure-badge {
            display: inline-block;
            background-color: #dff0d8;
            color: #3c763d;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin-top: 20px;
        }
        .secure-badge i {
            margin-right: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="management-panel">
            <div class="management-icon">
                <i class="fas fa-users-cog"></i>
            </div>
            <h1>User Management Console</h1>
            <p>Access control panel for managing system users and permissions.</p>
            
            <div class="management-status">
                <i class="fas fa-info-circle"></i> 
                Identity verification successful. Accessing user management module.
            </div>
            
            <div class="system-info">
                <div class="system-info-item">
                    <span class="info-label">System Status:</span>
                    <span class="info-value">Running (v3.8.2)</span>
                </div>
                <div class="system-info-item">
                    <span class="info-label">Registered Users:</span>
                    <span class="info-value">2,453</span>
                </div>
                <div class="system-info-item">
                    <span class="info-label">Active Users:</span>
                    <span class="info-value">128</span>
                </div>
                <div class="system-info-item">
                    <span class="info-label">Last Update:</span>
                    <span class="info-value" id="last-update">Loading...</span>
                </div>
            </div>
            
            <a href="/system/access/privileges" class="access-button" id="access-btn">
                Access User Controls
            </a>
            
            <div class="secure-badge">
                <i class="fas fa-lock"></i> Encrypted connection
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        // Set random values for last update
        document.addEventListener('DOMContentLoaded', function() {
            // Generate random date within past week
            const now = new Date();
            const daysAgo = Math.floor(Math.random() * 7) + 1;
            const hoursAgo = Math.floor(Math.random() * 24);
            const minutesAgo = Math.floor(Math.random() * 60);
            const lastUpdate = new Date(now - (daysAgo * 24 * 60 * 60 * 1000) - (hoursAgo * 60 * 60 * 1000) - (minutesAgo * 60 * 1000));
            
            document.getElementById('last-update').textContent = lastUpdate.toLocaleString();
            
            // Log the page view to honeypot system
            logInteraction('page_view');
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'user_management',
                    interaction_type: interactionType,
                    additional_data: {
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the button is clicked
        document.getElementById('access-btn').addEventListener('click', function() {
            logInteraction('button_click');
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step3.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Access Privileges</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .privileges-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .privileges-icon {
            font-size: 48px;
            color: #f39c12;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .privilege-list {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
            text-align: left;
        }
        .privilege-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        .privilege-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }
        .privilege-item input {
            margin-right: 10px;
        }
        .privilege-name {
            font-weight: 500;
        }
        .privilege-description {
            font-size: 12px;
            color: #7f8c8d;
            margin-top: 3px;
        }
        .privileges-status {
            margin-top: 20px;
            padding: 10px;
            background-color: #edf7ff;
            border-radius: 5px;
            font-size: 14px;
        }
        .continue-button {
            display: inline-block;
            background-color: #e67e22;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            margin-top: 20px;
            cursor: pointer;
        }
        .continue-button:hover {
            background-color: #d35400;
        }
        .secure-badge {
            display: inline-block;
            background-color: #dff0d8;
            color: #3c763d;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin-top: 20px;
        }
        .secure-badge i {
            margin-right: 5px;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <span>Access Privileges</span>
        </div>
        
        <div class="privileges-panel">
            <div class="privileges-icon">
                <i class="fas fa-key"></i>
            </div>
            <h1>Access Privileges Control</h1>
            <p>Select the privileges to assign to the administration group.</p>
            
            <div class="privilege-list">
                <div class="privilege-item">
                    <input type="checkbox" id="privilege-1" checked disabled>
                    <div>
                        <div class="privilege-name">Basic User Management</div>
                        <div class="privilege-description">Create, update, and disable user accounts</div>
                    </div>
                </div>
                <div class="privilege-item">
                    <input type="checkbox" id="privilege-2" checked disabled>
                    <div>
                        <div class="privilege-name">Role Management</div>
                        <div class="privilege-description">Assign and modify user roles and groups</div>
                    </div>
                </div>
                <div class="privilege-item">
                    <input type="checkbox" id="privilege-3" checked>
                    <div>
                        <div class="privilege-name">Security Credentials</div>
                        <div class="privilege-description">Access and modify security credentials</div>
                    </div>
                </div>
                <div class="privilege-item">
                    <input type="checkbox" id="privilege-4">
                    <div>
                        <div class="privilege-name">System Configuration</div>
                        <div class="privilege-description">Modify system-wide settings</div>
                    </div>
                </div>
                <div class="privilege-item">
                    <input type="checkbox" id="privilege-5">
                    <div>
                        <div class="privilege-name">Database Access</div>
                        <div class="privilege-description">Direct access to system databases</div>
                    </div>
                </div>
            </div>
            
            <div class="privileges-status">
                <i class="fas fa-info-circle"></i> 
                Additional privileges require supervisor approval. Proceed with currently selected options.
            </div>
            
            <a href="/system/security/credentials" class="continue-button" id="continue-btn">
                Proceed to Credentials
            </a>
            
            <div class="secure-badge">
                <i class="fas fa-lock"></i> Privileges log active
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Add event listeners to checkboxes
            document.querySelectorAll('.privilege-item input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    if (!this.disabled) {
                        logInteraction('checkbox_toggle', {
                            checkbox_id: this.id,
                            checked: this.checked
                        });
                    }
                });
            });
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'access_privileges',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the continue button is clicked
        document.getElementById('continue-btn').addEventListener('click', function() {
            logInteraction('button_click');
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step4.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Credentials</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .credentials-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .credentials-icon {
            font-size: 48px;
            color: #c0392b;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .credentials-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .security-alert {
            background-color: #fcf8e3;
            border-left: 4px solid #f39c12;
            padding: 10px 15px;
            margin-bottom: 20px;
            text-align: left;
            color: #8a6d3b;
        }
        .security-alert i {
            margin-right: 10px;
        }
        .credentials-form {
            text-align: left;
            margin: 25px 0;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #34495e;
        }
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        .form-group input:focus {
            border-color: #3498db;
            outline: none;
        }
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            background-color: white;
        }
        .form-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 25px;
        }
        .back-button {
            background-color: #95a5a6;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 14px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
        }
        .back-button:hover {
            background-color: #7f8c8d;
        }
        .continue-button {
            background-color: #c0392b;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 14px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
        }
        .continue-button:hover {
            background-color: #a93226;
        }
        .security-badge {
            display: inline-block;
            background-color: #f2dede;
            color: #a94442;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin-top: 20px;
        }
        .security-badge i {
            margin-right: 5px;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Access Privileges</a>
            <i class="fas fa-chevron-right"></i>
            <span>Security Credentials</span>
        </div>
        
        <div class="credentials-panel">
            <div class="credentials-icon">
                <i class="fas fa-fingerprint"></i>
            </div>
            <h1>Security Credentials</h1>
            <p class="credentials-description">Provide additional credentials to access the password vault.</p>
            
            <div class="security-alert">
                <i class="fas fa-exclamation-triangle"></i>
                <strong>Warning:</strong> This action will be logged and requires advanced clearance.
            </div>
            
            <form class="credentials-form">
                <div class="form-group">
                    <label for="security-level">Security Clearance Level:</label>
                    <select id="security-level">
                        <option value="1">Level 1 - Basic</option>
                        <option value="2">Level 2 - Standard</option>
                        <option value="3" selected>Level 3 - Advanced</option>
                        <option value="4">Level 4 - Administrative</option>
                        <option value="5">Level 5 - Root</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="security-key">Security Key:</label>
                    <input type="password" id="security-key" placeholder="Enter your security key" value="••••••••">
                </div>
                
                <div class="form-group">
                    <label for="verification-code">Verification Code:</label>
                    <input type="text" id="verification-code" placeholder="Enter verification code">
                </div>
                
                <div class="form-actions">
                    <button type="button" class="back-button" id="back-btn">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                    <a href="/system/vault/passwords" class="continue-button" id="access-vault-btn">
                        Access Vault <i class="fas fa-arrow-right"></i>
                    </a>
                </div>
            </form>
            
            <div class="security-badge">
                <i class="fas fa-shield-alt"></i> Enhanced security zone
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Generate a random verification code
            const verificationInput = document.getElementById('verification-code');
            verificationInput.value = generateRandomCode(6);
            
            // Add event listeners to form fields
            document.getElementById('security-level').addEventListener('change', function() {
                logInteraction('dropdown_change', {
                    field: 'security_level',
                    value: this.value
                });
            });
            
            document.getElementById('security-key').addEventListener('input', function() {
                logInteraction('text_input', {
                    field: 'security_key',
                    length: this.value.length
                });
            });
            
            document.getElementById('verification-code').addEventListener('input', function() {
                logInteraction('text_input', {
                    field: 'verification_code',
                    length: this.value.length
                });
            });
            
            // Back button event
            document.getElementById('back-btn').addEventListener('click', function() {
                logInteraction('back_button_click');
                // We don't actually go back to prevent users from leaving the trap
                alert('Cannot return to previous page. Please continue with the current process.');
            });
        });
        
        // Generate random alphanumeric code
        function generateRandomCode(length) {
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * characters.length));
            }
            return result;
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'security_credentials',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the access vault button is clicked
        document.getElementById('access-vault-btn').addEventListener('click', function() {
            logInteraction('button_click', {
                button: 'access_vault',
                security_level: document.getElementById('security-level').value,
                verification_code: document.getElementById('verification-code').value
            });
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step5.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Vault Access</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .vault-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .vault-icon {
            font-size: 48px;
            color: #8e44ad;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .vault-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .vault-access {
            background-color: #f5f5f5;
            border-radius: 5px;
            padding: 20px;
            text-align: left;
        }
        .vault-access h2 {
            font-size: 18px;
            margin-top: 0;
            margin-bottom: 15px;
            color: #34495e;
        }
        .password-list {
            margin-bottom: 20px;
        }
        .password-entry {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            position: relative;
            background-color: #fff;
            transition: all 0.2s ease;
        }
        .password-entry:hover {
            border-color: #3498db;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .password-entry-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
        }
        .entry-title {
            font-weight: 600;
            color: #2c3e50;
        }
        .entry-icon {
            color: #7f8c8d;
            font-size: 14px;
        }
        .password-details {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #eee;
            display: none;
        }
        .password-details.visible {
            display: block;
        }
        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        .detail-label {
            font-weight: 500;
            color: #7f8c8d;
        }
        .detail-value {
            font-family: monospace;
            background-color: #f1f1f1;
            padding: 2px 6px;
            border-radius: 3px;
        }
        .note {
            font-size: 12px;
            color: #95a5a6;
            font-style: italic;
            margin-top: 3px;
        }
        .vault-message {
            margin-top: 25px;
            padding: 10px 15px;
            background-color: #e8f4fc;
            border-radius: 5px;
            text-align: center;
            color: #2980b9;
        }
        .action-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 25px;
        }
        .secondary-button {
            background-color: #7f8c8d;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 14px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
        }
        .secondary-button:hover {
            background-color: #6c7a7a;
        }
        .primary-button {
            background-color: #8e44ad;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 14px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
        }
        .primary-button:hover {
            background-color: #703688;
        }
        .security-timer {
            margin-top: 25px;
            font-size: 14px;
            color: #e74c3c;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Security Credentials</a>
            <i class="fas fa-chevron-right"></i>
            <span>Password Vault</span>
        </div>
        
        <div class="vault-panel">
            <div class="vault-icon">
                <i class="fas fa-lock"></i>
            </div>
            <h1>Master Password Vault</h1>
            <p class="vault-description">Secure storage for system administrator credentials.</p>
            
            <div class="vault-access">
                <h2>Stored Credentials</h2>
                <div class="password-list">
                    <div class="password-entry">
                        <div class="password-entry-header" onclick="togglePasswordDetails('password-1')">
                            <span class="entry-title">Database Administrator</span>
                            <span class="entry-icon"><i class="fas fa-chevron-down"></i></span>
                        </div>
                        <div class="password-details" id="password-1">
                            <div class="detail-row">
                                <span class="detail-label">Username:</span>
                                <span class="detail-value">db_admin</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Password:</span>
                                <span class="detail-value">•••••••••••••</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Last Changed:</span>
                                <span class="detail-value">2025-03-14</span>
                            </div>
                            <div class="note">Note: Primary database access credentials</div>
                        </div>
                    </div>
                    
                    <div class="password-entry">
                        <div class="password-entry-header" onclick="togglePasswordDetails('password-2')">
                            <span class="entry-title">Network Administrator</span>
                            <span class="entry-icon"><i class="fas fa-chevron-down"></i></span>
                        </div>
                        <div class="password-details" id="password-2">
                            <div class="detail-row">
                                <span class="detail-label">Username:</span>
                                <span class="detail-value">net_admin</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Password:</span>
                                <span class="detail-value">•••••••••••••</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Last Changed:</span>
                                <span class="detail-value">2025-02-22</span>
                            </div>
                            <div class="note">Note: Network infrastructure access</div>
                        </div>
                    </div>
                    
                    <div class="password-entry">
                        <div class="password-entry-header" onclick="togglePasswordDetails('password-3')">
                            <span class="entry-title">API Service User</span>
                            <span class="entry-icon"><i class="fas fa-chevron-down"></i></span>
                        </div>
                        <div class="password-details" id="password-3">
                            <div class="detail-row">
                                <span class="detail-label">Username:</span>
                                <span class="detail-value">api_service</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Password:</span>
                                <span class="detail-value">•••••••••••••</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Last Changed:</span>
                                <span class="detail-value">2025-03-28</span>
                            </div>
                            <div class="note">Note: Used for automated API operations</div>
                        </div>
                    </div>
                </div>
                
                <div class="vault-message">
                    <i class="fas fa-info-circle"></i>
                    Additional authentication required to view unobscured password data
                </div>
            </div>
            
            <div class="security-timer">
                <i class="fas fa-clock"></i> Session expires in: <span id="timer">04:59</span>
            </div>
            
            <div class="action-buttons">
                <button class="secondary-button" id="export-btn">
                    <i class="fas fa-file-export"></i> Export Data
                </button>
                <a href="/system/auth/tokens" class="primary-button" id="auth-tokens-btn">
                    <i class="fas fa-key"></i> Authentication Tokens
                </a>
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        // Timer countdown
        let timeLeft = 299; // 4:59 in seconds
        const timerElement = document.getElementById('timer');
        
        const timerInterval = setInterval(function() {
            timeLeft--;
            
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                alert("Session expired. You will be redirected to the login page.");
                // In a real system, this would redirect to login
                // We'll keep them here for the honeypot
            }
            
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
        
        // Toggle password details
        function togglePasswordDetails(id) {
            const element = document.getElementById(id);
            element.classList.toggle('visible');
            
            // Log the interaction
            logInteraction('toggle_password_details', {
                entry_id: id,
                visible: element.classList.contains('visible')
            });
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Add event listener to export button
            document.getElementById('export-btn').addEventListener('click', function() {
                logInteraction('export_button_click');
                alert("Error: Export functionality requires additional authorization.");
            });
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'password_vault',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the auth tokens button is clicked
        document.getElementById('auth-tokens-btn').addEventListener('click', function() {
            logInteraction('button_click', {
                button: 'auth_tokens'
            });
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step6.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Tokens</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .token-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .token-icon {
            font-size: 48px;
            color: #16a085;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .token-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .token-section {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 25px;
            text-align: left;
        }
        .token-section h2 {
            font-size: 18px;
            margin-top: 0;
            margin-bottom: 15px;
            color: #16a085;
            display: flex;
            align-items: center;
        }
        .token-section h2 i {
            margin-right: 10px;
        }
        .token-form {
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #34495e;
        }
        .form-group input, .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #2ecc71;
        }
        .token-display {
            font-family: monospace;
            background-color: #f1f1f1;
            padding: 15px;
            border-radius: 4px;
            border: 1px solid #ddd;
            overflow-x: auto;
            white-space: nowrap;
            position: relative;
        }
        .token-value {
            user-select: all;
        }
        .copy-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #2ecc71;
            color: white;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .copy-icon:hover {
            background-color: #27ae60;
        }
        .token-list {
            margin-top: 20px;
        }
        .token-item {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            background-color: #fff;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .token-info {
            display: flex;
            flex-direction: column;
        }
        .token-name {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        .token-expires {
            font-size: 12px;
            color: #7f8c8d;
        }
        .token-actions {
            display: flex;
            gap: 10px;
        }
        .token-button {
            border: none;
            background: none;
            color: #7f8c8d;
            cursor: pointer;
            font-size: 14px;
            padding: 5px;
            transition: color 0.2s;
        }
        .token-button:hover {
            color: #34495e;
        }
        .token-button.revoke {
            color: #e74c3c;
        }
        .token-button.revoke:hover {
            color: #c0392b;
        }
        .verification-area {
            margin-top: 25px;
            padding: 20px;
            background-color: #e8f6f3;
            border-radius: 5px;
            text-align: center;
        }
        .verification-area h3 {
            font-size: 16px;
            margin-top: 0;
            margin-bottom: 15px;
            color: #16a085;
        }
        .verify-button {
            display: inline-block;
            background-color: #16a085;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
        }
        .verify-button:hover {
            background-color: #138a72;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Password Vault</a>
            <i class="fas fa-chevron-right"></i>
            <span>Authentication Tokens</span>
        </div>
        
        <div class="token-panel">
            <div class="token-icon">
                <i class="fas fa-key"></i>
            </div>
            <h1>Authentication Tokens</h1>
            <p class="token-description">Manage service authentication tokens for secure API access.</p>
            
            <div class="token-section">
                <h2><i class="fas fa-plus-circle"></i> Generate New Token</h2>
                <div class="token-form">
                    <div class="form-group">
                        <label for="token-service">Service Name:</label>
                        <select id="token-service">
                            <option value="api">API Access</option>
                            <option value="database">Database Service</option>
                            <option value="monitoring">Monitoring Service</option>
                            <option value="backup">Backup Service</option>
                            <option value="reporting">Reporting System</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="token-expiry">Expiration:</label>
                        <select id="token-expiry">
                            <option value="1">1 Hour</option>
                            <option value="24">24 Hours</option>
                            <option value="168" selected>7 Days</option>
                            <option value="720">30 Days</option>
                            <option value="0">Never (Not Recommended)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="token-scope">Access Scope:</label>
                        <select id="token-scope">
                            <option value="read">Read Only</option>
                            <option value="write">Read & Write</option>
                            <option value="admin" selected>Administrative</option>
                            <option value="system">System Level</option>
                        </select>
                    </div>
                    
                    <button type="button" id="generate-btn" class="verify-button">
                        Generate Token
                    </button>
                </div>
                
                <div class="token-display" id="token-result" style="display: none;">
                    <div class="token-value" id="token-value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTY4NTEyMzQ1Niwic2NvcGUiOiJhZG1pbiIsImV4cCI6MTY4NTcyODI1Nn0.8NZd9vHkL6FzZ1KjDW3JQ-4Z0IrBm0zfz9L_XcK2o6s</div>
                    <div class="copy-icon" id="copy-btn" title="Copy to clipboard">
                        <i class="fas fa-copy"></i>
                    </div>
                </div>
            </div>
            
            <div class="token-section">
                <h2><i class="fas fa-list"></i> Active Tokens</h2>
                <div class="token-list">
                    <div class="token-item">
                        <div class="token-info">
                            <span class="token-name">Backup Service</span>
                            <span class="token-expires">Expires in 3 days</span>
                        </div>
                        <div class="token-actions">
                            <button class="token-button">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="token-button revoke">
                                <i class="fas fa-times-circle"></i> Revoke
                            </button>
                        </div>
                    </div>
                    
                    <div class="token-item">
                        <div class="token-info">
                            <span class="token-name">Monitoring Service</span>
                            <span class="token-expires">Expires in 12 hours</span>
                        </div>
                        <div class="token-actions">
                            <button class="token-button">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="token-button revoke">
                                <i class="fas fa-times-circle"></i> Revoke
                            </button>
                        </div>
                    </div>
                    
                    <div class="token-item">
                        <div class="token-info">
                            <span class="token-name">API Access</span>
                            <span class="token-expires">Never expires</span>
                        </div>
                        <div class="token-actions">
                            <button class="token-button">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="token-button revoke">
                                <i class="fas fa-times-circle"></i> Revoke
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="verification-area">
                <h3>Additional Security Verification Required</h3>
                <p>To maintain system security, two-factor authentication is required for sensitive operations.</p>
                <a href="/system/security/2fa" class="verify-button" id="verify-2fa-btn">
                    <i class="fas fa-shield-alt"></i> Continue to 2FA Verification
                </a>
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Generate Token button event
            document.getElementById('generate-btn').addEventListener('click', function() {
                // Show the token result
                document.getElementById('token-result').style.display = 'block';
                
                // Log the interaction
                logInteraction('generate_token', {
                    service: document.getElementById('token-service').value,
                    expiry: document.getElementById('token-expiry').value,
                    scope: document.getElementById('token-scope').value
                });
            });
            
            // Copy to clipboard
            document.getElementById('copy-btn').addEventListener('click', function() {
                const tokenValue = document.getElementById('token-value').textContent;
                navigator.clipboard.writeText(tokenValue).then(function() {
                    // Success
                    this.innerHTML = '<i class="fas fa-check"></i>';
                    setTimeout(() => {
                        this.innerHTML = '<i class="fas fa-copy"></i>';
                    }, 2000);
                    
                    // Log the interaction
                    logInteraction('copy_token');
                }.bind(this)).catch(function(err) {
                    // Failure
                    console.error('Could not copy text: ', err);
                });
            });
            
            // Token action buttons
            document.querySelectorAll('.token-button').forEach(button => {
                button.addEventListener('click', function() {
                    const isRevoke = this.classList.contains('revoke');
                    const tokenName = this.closest('.token-item').querySelector('.token-name').textContent;
                    
                    if (isRevoke) {
                        if (confirm(`Are you sure you want to revoke the token for "${tokenName}"?`)) {
                            // In a real app, this would remove the token
                            this.closest('.token-item').remove();
                            
                            // Log the interaction
                            logInteraction('revoke_token', {
                                token_name: tokenName
                            });
                        }
                    } else {
                        alert(`Token for "${tokenName}" is hidden for security reasons. Generate a new token if needed.`);
                        
                        // Log the interaction
                        logInteraction('view_token', {
                            token_name: tokenName
                        });
                    }
                });
            });
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'auth_tokens',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the 2FA verification button is clicked
        document.getElementById('verify-2fa-btn').addEventListener('click', function() {
            logInteraction('button_click', {
                button: 'verify_2fa'
            });
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step7.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Two-Factor Authentication</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .tfa-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .tfa-icon {
            font-size: 48px;
            color: #3498db;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .tfa-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .tfa-methods {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }
        .tfa-method {
            flex: 1;
            min-width: 200px;
            max-width: 240px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .tfa-method:hover {
            border-color: #3498db;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .tfa-method.active {
            border-color: #3498db;
            background-color: #ebf5fb;
        }
        .method-icon {
            font-size: 32px;
            margin-bottom: 10px;
            color: #3498db;
        }
        .method-name {
            font-weight: 600;
            margin-bottom: 5px;
            color: #2c3e50;
        }
        .method-description {
            font-size: 12px;
            color: #7f8c8d;
        }
        .tfa-code-input {
            margin: 25px 0;
        }
        .code-digits {
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        .digit-input {
            width: 50px;
            height: 60px;
            font-size: 24px;
            text-align: center;
            border: 2px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
            transition: all 0.2s ease;
        }
        .digit-input:focus {
            border-color: #3498db;
            outline: none;
            background-color: #fff;
        }
        .tfa-hint {
            font-size: 14px;
            color: #7f8c8d;
            margin-top: 10px;
        }
        .resend-link {
            color: #3498db;
            text-decoration: none;
            cursor: pointer;
        }
        .resend-link:hover {
            text-decoration: underline;
        }
        .qr-code {
            width: 180px;
            height: 180px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            margin: 20px auto;
            padding: 10px;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .qr-secret {
            font-family: monospace;
            background-color: #f1f1f1;
            padding: 8px;
            border-radius: 4px;
            font-size: 14px;
            margin-bottom: 20px;
            user-select: all;
        }
        .verify-button {
            display: inline-block;
            background-color: #3498db;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
        }
        .verify-button:hover {
            background-color: #2980b9;
        }
        .verify-button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
        .error-message {
            color: #e74c3c;
            margin-top: 10px;
            display: none;
        }
        .success-message {
            color: #2ecc71;
            margin-top: 10px;
            display: none;
        }
        .security-note {
            margin-top: 30px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            font-size: 14px;
            color: #7f8c8d;
            text-align: left;
        }
        .security-note strong {
            color: #2c3e50;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Authentication Tokens</a>
            <i class="fas fa-chevron-right"></i>
            <span>Two-Factor Authentication</span>
        </div>
        
        <div class="tfa-panel">
            <div class="tfa-icon">
                <i class="fas fa-mobile-alt"></i>
            </div>
            <h1>Two-Factor Authentication</h1>
            <p class="tfa-description">Verify your identity to continue to the secure area.</p>
            
            <div class="tfa-methods">
                <div class="tfa-method active" id="method-app" onclick="selectMethod('app')">
                    <div class="method-icon">
                        <i class="fas fa-qrcode"></i>
                    </div>
                    <div class="method-name">Authenticator App</div>
                    <div class="method-description">Use Google, Microsoft, or other authenticator app</div>
                </div>
                
                <div class="tfa-method" id="method-sms" onclick="selectMethod('sms')">
                    <div class="method-icon">
                        <i class="fas fa-sms"></i>
                    </div>
                    <div class="method-name">SMS Code</div>
                    <div class="method-description">Receive a verification code via SMS</div>
                </div>
            </div>
            
            <div id="app-method-content">
                <div class="qr-code">
                    <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=otpauth://totp/SecureSystem:admin@example.com?secret=JBSWY3DPEHPK3PXP&issuer=SecureSystem" alt="QR Code">
                </div>
                
                <div class="qr-secret">
                    JBSWY3DPEHPK3PXP
                </div>
                
                <p class="tfa-hint">Scan the QR code with your authenticator app or enter the code manually.</p>
            </div>
            
            <div id="sms-method-content" style="display: none;">
                <p class="tfa-hint">
                    Enter the 6-digit code sent to ******3456.
                    <br>
                    <span class="resend-link" id="resend-link">Resend code</span>
                </p>
            </div>
            
            <div class="tfa-code-input">
                <div class="code-digits">
                    <input type="text" class="digit-input" maxlength="1" id="digit-1" autofocus>
                    <input type="text" class="digit-input" maxlength="1" id="digit-2">
                    <input type="text" class="digit-input" maxlength="1" id="digit-3">
                    <input type="text" class="digit-input" maxlength="1" id="digit-4">
                    <input type="text" class="digit-input" maxlength="1" id="digit-5">
                    <input type="text" class="digit-input" maxlength="1" id="digit-6">
                </div>
            </div>
            
            <div class="error-message" id="error-message">
                <i class="fas fa-exclamation-circle"></i> The verification code is incorrect. Please try again.
            </div>
            
            <div class="success-message" id="success-message">
                <i class="fas fa-check-circle"></i> Verification successful. Redirecting...
            </div>
            
            <a href="/system/crypto/keys" class="verify-button" id="verify-btn">
                Verify Identity
            </a>
            
            <div class="security-note">
                <strong>Security Note:</strong> Two-factor authentication adds an extra layer of security to your account. 
                Even if someone knows your password, they would also need physical access to your phone or authenticator app to log in.
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Set up digit input behavior
            const digitInputs = document.querySelectorAll('.digit-input');
            digitInputs.forEach((input, index) => {
                // Auto-focus next input after typing
                input.addEventListener('input', function() {
                    if (this.value.length === 1) {
                        if (index < digitInputs.length - 1) {
                            digitInputs[index + 1].focus();
                        }
                    }
                    
                    // Check if all digits are filled
                    checkAllDigitsFilled();
                });
                
                // Handle backspace to go to previous input
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Backspace' && this.value.length === 0) {
                        if (index > 0) {
                            digitInputs[index - 1].focus();
                        }
                    }
                });
                
                // Log when user types in digit fields
                input.addEventListener('input', function() {
                    logInteraction('digit_input', {
                        field_index: index,
                        has_value: this.value.length > 0
                    });
                });
            });
            
            // Resend link
            document.getElementById('resend-link').addEventListener('click', function() {
                alert("New verification code sent! (In a real system, this would send a new code)");
                logInteraction('resend_code');
            });
            
            // Auto-fill code with a test value
            setTimeout(() => {
                const testCode = "420699";
                digitInputs.forEach((input, index) => {
                    if (index < testCode.length) {
                        input.value = testCode[index];
                    }
                });
                checkAllDigitsFilled();
            }, 2000);
        });
        
        // Select authentication method
        function selectMethod(method) {
            // Update UI
            document.getElementById('method-app').classList.remove('active');
            document.getElementById('method-sms').classList.remove('active');
            document.getElementById(`method-${method}`).classList.add('active');
            
            // Show/hide content
            document.getElementById('app-method-content').style.display = method === 'app' ? 'block' : 'none';
            document.getElementById('sms-method-content').style.display = method === 'sms' ? 'block' : 'none';
            
            // Log the selection
            logInteraction('method_selected', {
                method: method
            });
        }
        
        // Check if all digit inputs are filled
        function checkAllDigitsFilled() {
            const digitInputs = document.querySelectorAll('.digit-input');
            const allFilled = Array.from(digitInputs).every(input => input.value.length === 1);
            
            document.getElementById('verify-btn').disabled = !allFilled;
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'two_factor_auth',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the verify button is clicked
        document.getElementById('verify-btn').addEventListener('click', function(e) {
            // Get the code
            const digitInputs = document.querySelectorAll('.digit-input');
            const code = Array.from(digitInputs).map(input => input.value).join('');
            
            // Log the verification attempt
            logInteraction('verify_attempt', {
                code: code,
                method: document.getElementById('method-app').classList.contains('active') ? 'app' : 'sms'
            });
            
            // Show success message (in a real system, we would validate the code)
            document.getElementById('success-message').style.display = 'block';
            document.getElementById('error-message').style.display = 'none';
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step8.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cryptographic Keys Management</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .crypto-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        .crypto-icon {
            font-size: 48px;
            color: #2980b9;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .crypto-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .security-warning {
            background-color: #fcf8e3;
            color: #8a6d3b;
            padding: 10px 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            text-align: left;
        }
        .security-warning i {
            font-size: 24px;
            margin-right: 15px;
            color: #f39c12;
        }
        .tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }
        .tab:hover {
            background-color: #f5f5f5;
        }
        .tab.active {
            border-bottom-color: #3498db;
            color: #3498db;
            font-weight: 500;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .key-list {
            text-align: left;
            margin-bottom: 25px;
        }
        .key-item {
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .key-item:hover {
            border-color: #3498db;
            background-color: #f8f9fa;
        }
        .key-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .key-name {
            font-weight: 600;
            color: #2c3e50;
        }
        .key-type {
            background-color: #e8f4fc;
            color: #3498db;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 12px;
        }
        .key-details {
            color: #7f8c8d;
            font-size: 14px;
            display: flex;
            justify-content: space-between;
        }
        .key-created, .key-expires {
            display: flex;
            align-items: center;
        }
        .key-created i, .key-expires i {
            margin-right: 5px;
            font-size: 12px;
        }
        .key-value {
            margin-top: 10px;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ddd;
            font-family: monospace;
            font-size: 13px;
            word-break: break-all;
            display: none;
        }
        .key-value.visible {
            display: block;
        }
        .key-controls {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 10px;
        }
        .key-button {
            border: none;
            background: none;
            color: #7f8c8d;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            transition: color 0.2s;
        }
        .key-button i {
            margin-right: 5px;
        }
        .key-button:hover {
            color: #3498db;
        }
        .key-button.download:hover {
            color: #2ecc71;
        }
        .key-button.delete:hover {
            color: #e74c3c;
        }
        .generate-form {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 4px;
            text-align: left;
            margin-bottom: 25px;
        }
        .form-row {
            margin-bottom: 15px;
        }
        .form-row label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #34495e;
        }
        .form-row input, .form-row select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        .form-row input:focus, .form-row select:focus {
            outline: none;
            border-color: #3498db;
        }
        .form-submit {
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
        }
        .submit-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .submit-button:hover {
            background-color: #2980b9;
        }
        .import-form .form-row textarea {
            width: 100%;
            height: 120px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: monospace;
            font-size: 14px;
            resize: vertical;
        }
        .import-form .form-row textarea:focus {
            outline: none;
            border-color: #3498db;
        }
        .action-buttons {
            margin-top: 25px;
            display: flex;
            justify-content: space-between;
        }
        .primary-button {
            background-color: #2980b9;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
        }
        .primary-button:hover {
            background-color: #2471a3;
        }
        .secondary-button {
            background-color: #7f8c8d;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
        }
        .secondary-button:hover {
            background-color: #6c7a7a;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Two-Factor Authentication</a>
            <i class="fas fa-chevron-right"></i>
            <span>Cryptographic Keys</span>
        </div>
        
        <div class="crypto-panel">
            <div class="crypto-icon">
                <i class="fas fa-key"></i>
            </div>
            <h1>Cryptographic Keys Management</h1>
            <p class="crypto-description">Manage encryption and signing keys for secure system operations.</p>
            
            <div class="security-warning">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>Security Warning:</strong> Unauthorized access to cryptographic keys can compromise system security. 
                    All key operations are logged and monitored. Only proceed if you have proper authorization.
                </div>
            </div>
            
            <div class="tabs">
                <div class="tab active" onclick="showTab('keys')">Stored Keys</div>
                <div class="tab" onclick="showTab('generate')">Generate Key</div>
                <div class="tab" onclick="showTab('import')">Import Key</div>
            </div>
            
            <div class="tab-content active" id="keys-tab">
                <div class="key-list">
                    <div class="key-item" onclick="toggleKeyValue('key-1')">
                        <div class="key-header">
                            <span class="key-name">System Encryption Key</span>
                            <span class="key-type">RSA-2048</span>
                        </div>
                        <div class="key-details">
                            <span class="key-created"><i class="fas fa-calendar-plus"></i> Created: 2024-12-15</span>
                            <span class="key-expires"><i class="fas fa-calendar-times"></i> Expires: 2025-12-15</span>
                        </div>
                        <div class="key-value" id="key-1">
                            -----BEGIN PUBLIC KEY-----<br>
                            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo<br>
                            4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u<br>
                            +qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh<br>
                            kd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ<br>
                            0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg<br>
                            cKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAQ==<br>
                            -----END PUBLIC KEY-----
                        </div>
                        <div class="key-controls">
                            <button class="key-button download"><i class="fas fa-download"></i> Download</button>
                            <button class="key-button"><i class="fas fa-eye"></i> Toggle View</button>
                            <button class="key-button delete"><i class="fas fa-trash-alt"></i> Delete</button>
                        </div>
                    </div>
                    
                    <div class="key-item" onclick="toggleKeyValue('key-2')">
                        <div class="key-header">
                            <span class="key-name">API Signing Key</span>
                            <span class="key-type">ECDSA P-256</span>
                        </div>
                        <div class="key-details">
                            <span class="key-created"><i class="fas fa-calendar-plus"></i> Created: 2025-01-20</span>
                            <span class="key-expires"><i class="fas fa-calendar-times"></i> Expires: 2026-01-20</span>
                        </div>
                        <div class="key-value" id="key-2">
                            -----BEGIN PUBLIC KEY-----<br>
                            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9<br>
                            q9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==<br>
                            -----END PUBLIC KEY-----
                        </div>
                        <div class="key-controls">
                            <button class="key-button download"><i class="fas fa-download"></i> Download</button>
                            <button class="key-button"><i class="fas fa-eye"></i> Toggle View</button>
                            <button class="key-button delete"><i class="fas fa-trash-alt"></i> Delete</button>
                        </div>
                    </div>
                    
                    <div class="key-item" onclick="toggleKeyValue('key-3')">
                        <div class="key-header">
                            <span class="key-name">Data Vault Key</span>
                            <span class="key-type">AES-256</span>
                        </div>
                        <div class="key-details">
                            <span class="key-created"><i class="fas fa-calendar-plus"></i> Created: 2025-03-05</span>
                            <span class="key-expires"><i class="fas fa-calendar-times"></i> Never</span>
                        </div>
                        <div class="key-value" id="key-3">
                            Key ID: vault-aes-256-001<br>
                            [Key material hidden for security]
                        </div>
                        <div class="key-controls">
                            <button class="key-button download"><i class="fas fa-download"></i> Download</button>
                            <button class="key-button"><i class="fas fa-eye"></i> Toggle View</button>
                            <button class="key-button delete"><i class="fas fa-trash-alt"></i> Delete</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="tab-content" id="generate-tab">
                <div class="generate-form">
                    <div class="form-row">
                        <label for="key-name">Key Name:</label>
                        <input type="text" id="key-name" placeholder="Enter a descriptive name for the key">
                    </div>
                    
                    <div class="form-row">
                        <label for="key-type">Key Type:</label>
                        <select id="key-type">
                            <option value="rsa-2048">RSA 2048-bit</option>
                            <option value="rsa-4096">RSA 4096-bit</option>
                            <option value="ecdsa-p256">ECDSA P-256</option>
                            <option value="ecdsa-p384">ECDSA P-384</option>
                            <option value="ed25519">ED25519</option>
                            <option value="aes-256">AES 256-bit</option>
                        </select>
                    </div>
                    
                    <div class="form-row">
                        <label for="key-usage">Key Usage:</label>
                        <select id="key-usage">
                            <option value="encryption">Encryption</option>
                            <option value="signing">Digital Signing</option>
                            <option value="authentication">Authentication</option>
                            <option value="key-wrapping">Key Wrapping</option>
                        </select>
                    </div>
                    
                    <div class="form-row">
                        <label for="key-expiry">Expiration:</label>
                        <select id="key-expiry">
                            <option value="90">90 Days</option>
                            <option value="180">180 Days</option>
                            <option value="365" selected>1 Year</option>
                            <option value="730">2 Years</option>
                            <option value="0">Never (Not Recommended)</option>
                        </select>
                    </div>
                    
                    <div class="form-submit">
                        <button class="submit-button" id="generate-key-btn">
                            <i class="fas fa-plus-circle"></i> Generate Key
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="tab-content" id="import-tab">
                <div class="import-form">
                    <div class="form-row">
                        <label for="import-name">Key Name:</label>
                        <input type="text" id="import-name" placeholder="Enter a descriptive name for the key">
                    </div>
                    
                    <div class="form-row">
                        <label for="import-type">Key Type:</label>
                        <select id="import-type">
                            <option value="rsa">RSA</option>
                            <option value="ecdsa">ECDSA</option>
                            <option value="ed25519">ED25519</option>
                            <option value="aes">AES</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    
                    <div class="form-row">
                        <label for="import-data">Key Data:</label>
                        <textarea id="import-data" placeholder="Paste PEM-encoded key or key material here"></textarea>
                    </div>
                    
                    <div class="form-submit">
                        <button class="submit-button" id="import-key-btn">
                            <i class="fas fa-file-import"></i> Import Key
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="action-buttons">
                <button class="secondary-button">
                    <i class="fas fa-cog"></i> Key Settings
                </button>
                <a href="/system/data/customers" class="primary-button" id="access-data-btn">
                    <i class="fas fa-database"></i> Access Customer Data
                </a>
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Generate Key button
            document.getElementById('generate-key-btn').addEventListener('click', function() {
                // Log the interaction
                logInteraction('generate_key_click', {
                    key_name: document.getElementById('key-name').value,
                    key_type: document.getElementById('key-type').value,
                    key_usage: document.getElementById('key-usage').value,
                    key_expiry: document.getElementById('key-expiry').value
                });
                
                alert("Key generation initiated. This process may take a few moments.");
                
                // In a real system, this would generate a key
                setTimeout(() => {
                    alert("Key generated successfully!");
                }, 2000);
            });
            
            // Import Key button
            document.getElementById('import-key-btn').addEventListener('click', function() {
                // Log the interaction
                logInteraction('import_key_click', {
                    key_name: document.getElementById('import-name').value,
                    key_type: document.getElementById('import-type').value,
                    data_length: document.getElementById('import-data').value.length
                });
                
                alert("Key import successful!");
            });
            
            // Key list buttons
            document.querySelectorAll('.key-button').forEach(function(button) {
                button.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent toggling the key value
                    
                    const action = this.textContent.trim().toLowerCase();
                    const keyItem = this.closest('.key-item');
                    const keyName = keyItem.querySelector('.key-name').textContent;
                    
                    // Log the interaction
                    logInteraction('key_action', {
                        action: action,
                        key_name: keyName
                    });
                    
                    if (action.includes('download')) {
                        alert(`Downloading key: ${keyName}`);
                    } else if (action.includes('delete')) {
                        if (confirm(`Are you sure you want to delete the key: ${keyName}?`)) {
                            alert(`Key deleted: ${keyName}`);
                            keyItem.remove();
                        }
                    } else if (action.includes('toggle')) {
                        // Find the key-value element within this key item
                        const keyValueId = keyItem.querySelector('.key-value').id;
                        toggleKeyValue(keyValueId);
                    }
                });
            });
        });
        
        // Show tab content
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(function(tab) {
                tab.classList.remove('active');
            });
            
            // Deactivate all tabs
            document.querySelectorAll('.tab').forEach(function(tab) {
                tab.classList.remove('active');
            });
            
            // Activate the selected tab and content
            document.getElementById(`${tabName}-tab`).classList.add('active');
            
            // Find and activate the tab button
            const tabIndex = ['keys', 'generate', 'import'].indexOf(tabName);
            document.querySelectorAll('.tab')[tabIndex].classList.add('active');
            
            // Log the tab change
            logInteraction('tab_change', {
                tab: tabName
            });
        }
        
        // Toggle key value visibility
        function toggleKeyValue(keyId) {
            const keyValue = document.getElementById(keyId);
            keyValue.classList.toggle('visible');
            
            // Log the interaction
            logInteraction('toggle_key_value', {
                key_id: keyId,
                visible: keyValue.classList.contains('visible')
            });
        }
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'crypto_keys',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the access customer data button is clicked
        document.getElementById('access-data-btn').addEventListener('click', function() {
            logInteraction('access_data_click');
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/templates/redirection/step9.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Data Access</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 10px;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .user-info img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .breadcrumb {
            margin: 20px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        .breadcrumb i {
            margin: 0 8px;
            font-size: 12px;
        }
        .data-panel {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 30px;
            margin-top: 20px;
            text-align: center;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        .data-icon {
            font-size: 48px;
            color: #e74c3c;
            margin-bottom: 20px;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .data-description {
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .gdpr-warning {
            background-color: #fcf8e3;
            color: #8a6d3b;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            text-align: left;
        }
        .gdpr-warning i {
            font-size: 24px;
            margin-right: 15px;
            color: #f39c12;
        }
        .security-level {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 25px;
        }
        .security-badge {
            background-color: #e74c3c;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        .security-badge i {
            margin-right: 8px;
        }
        .data-access-options {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            margin-bottom: 30px;
        }
        .data-option {
            flex: 1;
            min-width: 200px;
            max-width: 300px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
            text-align: center;
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .data-option:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-color: #3498db;
        }
        .option-icon {
            font-size: 32px;
            margin-bottom: 15px;
            color: #3498db;
        }
        .option-title {
            font-weight: 600;
            margin-bottom: 10px;
            color: #2c3e50;
        }
        .option-description {
            font-size: 14px;
            color: #7f8c8d;
        }
        .data-status {
            background-color: #ebf5fb;
            color: #3498db;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px;
            text-align: left;
        }
        .data-status h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            display: flex;
            align-items: center;
        }
        .data-status h3 i {
            margin-right: 10px;
        }
        .status-details {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 15px;
        }
        .status-item {
            display: flex;
            align-items: center;
        }
        .status-item i {
            margin-right: 8px;
            font-size: 14px;
        }
        .obfuscation-toggle {
            margin: 25px 0;
            text-align: center;
        }
        .toggle-switch {
            display: inline-block;
            position: relative;
            width: 60px;
            height: 34px;
            margin: 0 15px;
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .toggle-slider {
            background-color: #2ecc71;
        }
        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }
        .toggle-label {
            font-weight: 500;
            color: #7f8c8d;
        }
        .action-button {
            display: inline-block;
            background-color: #e74c3c;
            color: white;
            padding: 12px 25px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
            margin-top: 20px;
        }
        .action-button:hover {
            background-color: #c0392b;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            SecureSystem
        </div>
        <div class="user-info">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSB0ekUmVkNanJ_NcH8YedBwMNDFlU9pMyERQ&s" alt="Admin">
            <span class="username">System Administrator</span>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> Home</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">User Management</a>
            <i class="fas fa-chevron-right"></i>
            <a href="#">Cryptographic Keys</a>
            <i class="fas fa-chevron-right"></i>
            <span>Customer Data</span>
        </div>
        
        <div class="data-panel">
            <div class="data-icon">
                <i class="fas fa-users"></i>
            </div>
            <h1>Customer Data Access</h1>
            <p class="data-description">Access and manage sensitive customer information securely.</p>
            
            <div class="gdpr-warning">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>Data Protection Warning:</strong> 
                    Accessing and processing this data is subject to GDPR, CCPA, and other applicable privacy regulations. 
                    Ensure you have a legitimate business purpose and appropriate authorization.
                </div>
            </div>
            
            <div class="security-level">
                <div class="security-badge">
                    <i class="fas fa-lock"></i>
                    Security Level: Restricted
                </div>
            </div>
            
            <div class="data-access-options">
                <div class="data-option" id="option-personal">
                    <div class="option-icon">
                        <i class="fas fa-address-card"></i>
                    </div>
                    <div class="option-title">Personal Information</div>
                    <div class="option-description">Names, addresses, contact information, and demographic data</div>
                </div>
                
                <div class="data-option" id="option-financial">
                    <div class="option-icon">
                        <i class="fas fa-credit-card"></i>
                    </div>
                    <div class="option-title">Financial Records</div>
                    <div class="option-description">Payment information, transaction history, and billing details</div>
                </div>
                
                <div class="data-option" id="option-activity">
                    <div class="option-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="option-title">Activity Logs</div>
                    <div class="option-description">System interactions, login history, and feature usage</div>
                </div>
            </div>
            
            <div class="data-status">
                <h3><i class="fas fa-info-circle"></i> Data Status</h3>
                <div class="status-details">
                    <div class="status-item">
                        <i class="fas fa-database"></i>
                        <span>Total Records: 24,891</span>
                    </div>
                    <div class="status-item">
                        <i class="fas fa-calendar-alt"></i>
                        <span>Last Updated: 4 hours ago</span>
                    </div>
                    <div class="status-item">
                        <i class="fas fa-shield-alt"></i>
                        <span>Encryption: AES-256</span>
                    </div>
                    <div class="status-item">
                        <i class="fas fa-user-shield"></i>
                        <span>Access Level: Administrative</span>
                    </div>
                </div>
            </div>
            
            <div class="obfuscation-toggle">
                <span class="toggle-label">Data Obfuscation:</span>
                <label class="toggle-switch">
                    <input type="checkbox" id="obfuscation-toggle" checked>
                    <span class="toggle-slider"></span>
                </label>
                <span class="toggle-label">Enabled</span>
            </div>
            
            <a href="/system/finance/payments" class="action-button" id="view-data-btn">
                <i class="fas fa-eye"></i> View Customer Data
            </a>
        </div>
        
        <div class="footer">
            &copy; 2025 SecureSystem Enterprise Solutions. All rights reserved.
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Log the page view to honeypot system
            logInteraction('page_view');
            
            // Toggle switch behavior
            const toggleSwitch = document.getElementById('obfuscation-toggle');
            const toggleLabels = document.querySelectorAll('.toggle-label');
            
            toggleSwitch.addEventListener('change', function() {
                toggleLabels[1].textContent = this.checked ? 'Enabled' : 'Disabled';
                
                // Log the interaction
                logInteraction('obfuscation_toggle', {
                    enabled: this.checked
                });
            });
            
            // Data option click handlers
            document.getElementById('option-personal').addEventListener('click', function() {
                logInteraction('option_click', {
                    option: 'personal_information'
                });
                alert("Preparing personal information data...");
            });
            
            document.getElementById('option-financial').addEventListener('click', function() {
                logInteraction('option_click', {
                    option: 'financial_records'
                });
                alert("Preparing financial records data...");
            });
            
            document.getElementById('option-activity').addEventListener('click', function() {
                logInteraction('option_click', {
                    option: 'activity_logs'
                });
                alert("Preparing activity logs data...");
            });
        });
        
        // Function to log interactions with the honeypot
        function logInteraction(interactionType, details = {}) {
            fetch('/honeypot/log-interaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_type: 'customer_data_access',
                    interaction_type: interactionType,
                    additional_data: {
                        ...details,
                        referrer: document.referrer,
                        resolution: `${window.innerWidth}x${window.innerHeight}`,
                        user_agent: navigator.userAgent
                    }
                })
            }).catch(error => {
                console.log('Logging completed');
            });
        }
        
        // Log when the view data button is clicked
        document.getElementById('view-data-btn').addEventListener('click', function() {
            logInteraction('button_click', {
                button: 'view_data',
                obfuscation_enabled: document.getElementById('obfuscation-toggle').checked
            });
        });
    </script>
</body>
</html>
</file>

<file path="honeypot/backend/__init__.py">
"""Backend module for Honeypot Framework"""

# Expose key components at module level
from honeypot.backend.app import create_app
from honeypot.backend.middleware.csrf_protection import csrf_protect, generate_csrf_token
</file>

<file path="honeypot/config/settings.py">
# honeypot/config/settings.py
import os
from dotenv import load_dotenv

# Load .env file if exists
load_dotenv()

class Config:
    """Base configuration for honeypot package"""
    # Core settings
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_secure_key_change_me')
    DEBUG = False
    TESTING = False
    
    # Redis settings for sessions
    REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
    REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))
    REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', None)
    REDIS_DB = int(os.environ.get('REDIS_DB', 0))
    
    # MongoDB settings
    MONGO_URI = os.environ.get('MONGO_URI', 'mongodb://localhost:27017/honeypot')
    
    # GeoIP settings
    GEOIP_DB_DIRECTORY = os.environ.get('GEOIP_DB_DIRECTORY', './geoip_db')
    MAXMIND_LICENSE_KEY = os.environ.get('MAXMIND_LICENSE_KEY', '')
    
    # Honeypot settings
    HONEYPOT_RATE_LIMIT = int(os.environ.get('HONEYPOT_RATE_LIMIT', 5))
    HONEYPOT_RATE_PERIOD = int(os.environ.get('HONEYPOT_RATE_PERIOD', 99))
    HONEYPOT_TEMPLATES_PATH = os.environ.get('HONEYPOT_TEMPLATES_PATH', None)
       
    # Admin dashboard settings
    ADMIN_URL_PREFIX = os.environ.get('ADMIN_URL_PREFIX', '/admin')
    ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME', 'admin')
    ADMIN_PASSWORD_HASH = os.environ.get('ADMIN_PASSWORD_HASH', None)  # Should be bcrypt hash
    
    # Logging settings
    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'DEBUG')
    LOG_FILE = os.environ.get('LOG_FILE', None)
    

class DevelopmentConfig(Config):
    """Development configuration"""
    DEBUG = True
    

class ProductionConfig(Config):
    """Production configuration"""
    # Ensure these settings are properly set in production
    def __init__(self):
        if not self.SECRET_KEY or self.SECRET_KEY == 'dev_secure_key_change_me':
            import warnings
            warnings.warn("SECRET_KEY not set or using default value in production!")
    

class TestingConfig(Config):
    """Testing configuration"""
    TESTING = True
    MONGO_URI = 'mongodb://localhost:27017/honeypot_test'
    REDIS_DB = 1  


# Configuration dictionary
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

def get_config(config_name=None):
    """
    Return configuration class based on environment
    
    Args:
        config_name (str, optional): Configuration name to load
        
    Returns:
        object: Configuration object
    """
    if not config_name:
        config_name = os.environ.get('FLASK_ENV', 'default')
    return config.get(config_name, config['default'])()
</file>

<file path="honeypot/database/models.py">
# honeypot/database/models.py
from datetime import datetime
from bson.objectid import ObjectId

class HoneypotModel:
    """Base model for honeypot data objects"""
    
    @classmethod
    def from_dict(cls, data):
        """Create an instance from a dictionary"""
        instance = cls()
        for key, value in data.items():
            setattr(instance, key, value)
        return instance

class HoneypotInteraction:
    """Model for storing honeypot interactions"""
    
    def __init__(self, page_type=None, interaction_type=None, 
                 ip_address=None, user_agent=None, path=None, 
                 timestamp=None, additional_data=None, **kwargs):
        self.id = str(ObjectId())
        self.page_type = page_type
        self.interaction_type = interaction_type
        self.ip_address = ip_address
        self.user_agent = user_agent
        self.path = path
        self.timestamp = timestamp or datetime.utcnow()
        self.additional_data = additional_data or {}
        
        # Additional fields
        for key, value in kwargs.items():
            setattr(self, key, value)
    
    def to_dict(self):
        """Convert to dictionary for storage"""
        return {
            "_id": ObjectId(self.id) if isinstance(self.id, str) else self.id,
            "page_type": self.page_type,
            "interaction_type": self.interaction_type,
            "ip_address": self.ip_address,
            "user_agent": self.user_agent,
            "path": self.path,
            "timestamp": self.timestamp,
            "additional_data": self.additional_data
        }
    
    @classmethod
    def from_dict(cls, data):
        """Create instance from MongoDB document"""
        if data is None:
            return None
            
        obj = cls()
        obj.id = str(data.get("_id", ""))
        obj.page_type = data.get("page_type")
        obj.interaction_type = data.get("interaction_type")
        obj.ip_address = data.get("ip_address")
        obj.user_agent = data.get("user_agent")
        obj.path = data.get("path")
        obj.timestamp = data.get("timestamp")
        obj.additional_data = data.get("additional_data", {})
        
        return obj

class ScanAttempt:
    """Model for tracking scanning attempts"""
    
    def __init__(self, client_id=None, ip=None, path=None, method=None,
                 timestamp=None, user_agent=None, headers=None, 
                 asn_info=None, **kwargs):
        self.id = str(ObjectId())
        self.client_id = client_id
        self.ip = ip
        self.path = path
        self.method = method
        self.timestamp = timestamp or datetime.utcnow()
        self.user_agent = user_agent
        self.headers = headers or {}
        self.asn_info = asn_info or {}
        
        # Additional fields
        for key, value in kwargs.items():
            setattr(self, key, value)
    
    def to_dict(self):
        """Convert to dictionary for storage"""
        return {
            "_id": ObjectId(self.id) if isinstance(self.id, str) else self.id,
            "clientId": self.client_id,
            "ip": self.ip,
            "path": self.path,
            "method": self.method,
            "timestamp": self.timestamp,
            "user_agent": self.user_agent,
            "headers": self.headers,
            "asn_info": self.asn_info
        }
    
    @classmethod
    def from_dict(cls, data):
        """Create instance from MongoDB document"""
        if data is None:
            return None
            
        obj = cls()
        obj.id = str(data.get("_id", ""))
        obj.client_id = data.get("clientId")
        obj.ip = data.get("ip")
        obj.path = data.get("path")
        obj.method = data.get("method")
        obj.timestamp = data.get("timestamp")
        obj.user_agent = data.get("user_agent")
        obj.headers = data.get("headers", {})
        obj.asn_info = data.get("asn_info", {})
        
        return obj

class WatchlistEntry:
    """Model for tracking suspicious activity"""
    
    def __init__(self, client_id=None, ip=None, last_seen=None, count=0, 
                 severity=0, last_path=None, **kwargs):
        self.id = str(ObjectId())
        self.client_id = client_id
        self.ip = ip
        self.last_seen = last_seen or datetime.utcnow()
        self.count = count
        self.severity = severity
        self.last_path = last_path
        
        # Additional fields
        for key, value in kwargs.items():
            setattr(self, key, value)
    
    def to_dict(self):
        """Convert to dictionary for storage"""
        return {
            "_id": ObjectId(self.id) if isinstance(self.id, str) else self.id,
            "clientId": self.client_id,
            "ip": self.ip,
            "lastSeen": self.last_seen,
            "count": self.count,
            "severity": self.severity,
            "lastPath": self.last_path
        }

class BlocklistEntry:
    """Model for IP/client blocklist"""
    
    def __init__(self, client_id=None, ip=None, block_until=None, 
                 reason=None, threat_score=0, **kwargs):
        self.id = str(ObjectId())
        self.client_id = client_id
        self.ip = ip
        self.block_until = block_until
        self.reason = reason
        self.threat_score = threat_score
        self.created_at = datetime.utcnow()
        
        # Additional fields
        for key, value in kwargs.items():
            setattr(self, key, value)
    
    def to_dict(self):
        """Convert to dictionary for storage"""
        return {
            "_id": ObjectId(self.id) if isinstance(self.id, str) else self.id,
            "clientId": self.client_id,
            "ip": self.ip,
            "blockUntil": self.block_until,
            "reason": self.reason,
            "threatScore": self.threat_score,
            "createdAt": self.created_at
        }
</file>

<file path="honeypot/database/mongodb.py">
from pymongo import MongoClient
import os
from flask import g, current_app
import logging

logger = logging.getLogger(__name__)

def get_db():
    """
    Get MongoDB database connection
    
    Returns:
        pymongo.database.Database: MongoDB database object
    """
    if 'db' not in g:
        mongo_uri = os.environ.get('MONGO_URI', 'mongodb://localhost:27017/honeypot')
        
        try:
            # Create client and connect to database
            client = MongoClient(mongo_uri)
            db_name = mongo_uri.split('/')[-1]
            g.db = client[db_name]
            g.mongo_client = client
            
            # Test connection
            client.admin.command('ping')
            logger.info(f"Connected to MongoDB: {mongo_uri}")
        except Exception as e:
            logger.error(f"Failed to connect to MongoDB: {e}")
            raise
    
    return g.db

def close_db(e=None):
    """Close database connection if it exists"""
    mongo_client = g.pop('mongo_client', None)
    
    if mongo_client is not None:
        mongo_client.close()
        logger.info("Closed MongoDB connection")

def init_app(app):
    """
    Initialize MongoDB with Flask application
    
    Args:
        app (Flask): Flask application
    """
    app.teardown_appcontext(close_db)
</file>

<file path="honeypot/frontend/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <!-- Favicon and mobile configuration -->
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="%PUBLIC_URL%/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="%PUBLIC_URL%/favicon-16x16.png">
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/apple-touch-icon.png">
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="theme-color" content="#ffffff">
    <meta name="description" content="Advanced Honeypot Framework" />
    <meta name="author" content="Carter Perez" />
    
    
    <title>Honeypot Framework</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
</file>

<file path="honeypot/frontend/public/manifest.json">
{
  "short_name": "Honeypt",
  "name": "Honepot-Framework",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "android-chrome-192x192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "android-chrome-512x512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="honeypot/frontend/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="honeypot/frontend/public/site.webmanifest">
{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}
</file>

<file path="honeypot/frontend/src/components/csrfHelper.js">
// honeypot/frontend/components/csrfHelper.js

/**
 * Helper to manage CSRF tokens for admin requests
 */
export const getCsrfToken = () => {
  const metaTag = document.querySelector('meta[name="csrf-token"]');
  if (metaTag) {
    return metaTag.getAttribute('content');
  }
  
  return localStorage.getItem('csrf_token');
};

export const setCsrfToken = (token) => {
  if (token) {
    localStorage.setItem('csrf_token', token);
  }
};

/**
 * Fetch wrapper that automatically adds CSRF token headers for admin routes
 */
export const adminFetch = async (url, options = {}) => {
  const method = options.method || 'GET';
  
  if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(method.toUpperCase())) {
    // Get the current token
    const token = getCsrfToken();
    
    // Add CSRF header
    const headers = {
      ...options.headers || {},
      'X-CSRF-TOKEN': token
    };
    
    // Return fetch with added headers
    return fetch(url, {
      ...options,
      headers,
      credentials: 'include' 
    });
  }
  
  // For GET requests, just add credentials
  return fetch(url, {
    ...options,
    credentials: 'include'
  });
};
</file>

<file path="honeypot/frontend/src/App.js">
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;
</file>

<file path="honeypot/frontend/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="honeypot/frontend/src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="honeypot/frontend/src/reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="honeypot/frontend/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="honeypot/frontend/package.json">
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="honeypot/frontend/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
</file>

<file path="honeypot/__init__.py">
"""
Honeypot Framework - A comprehensive honeypot system for detecting and analyzing unauthorized access attempts
"""

from honeypot.backend.app import create_app
from honeypot.config.settings import get_config

__version__ = '0.1.0'

# Expose key functions at package level
create_honeypot_app = create_app
</file>

<file path=".gitignore">
# Python virtual environment folders (used to isolate dependencies)
venv/

# Compiled Python files (automatically created during runtime)
*.pyc

#  Python cache directories (stores temporary compiled Python files)
__pycache__/

# Environment variable files (contains sensitive info like API keys)
.env

# Node.js dependencies folder (installed by npm or yarn)
node_modules/

# React build files (generated during production build, not needed in source control)
my-react-app/build/
</file>

<file path="LICENSE">
## 10. Migration Challenges

Let's address some challenges you might face when packaging your honeypot system:

### 10.1 Database Dependencies

Your system uses MongoDB extensively. The package should:

1. Provide clear documentation on MongoDB requirements
2. Include proper error handling for when MongoDB isn't available
3. Allow users to configure MongoDB connection details
4. Support optional database backends in the future

### 10.2 GeoIP Database

The system uses MaxMind GeoIP databases:

1. Include mechanisms to download and update these databases
2. Handle cases where the license key isn't provided
3. Gracefully handle missing or outdated databases

### 10.3 Frontend Integration

Since your frontend is React-based:

1. Provide compiled JS/CSS files for users who aren't using React
2. Include source components for those who want to integrate with their React apps
3. Document how to customize and extend the frontend

### 10.4 Security Considerations

For a security-focused package:

1. Ensure default settings are secure
2. Validate configuration parameters
3. Include proper security headers and CSRF protection
4. Document security best practices for deployment

## Conclusion

This comprehensive guide provides a detailed roadmap for extracting your honeypot system into a reusable Python package. By following these steps, you'll create a flexible, maintainable package that others can easily integrate into their security infrastructure.

The package structure respects your existing architecture while making it more modular and configurable. The examples and documentation will help users quickly get started with your powerful honeypot framework.
</file>

<file path="MANIFEST.in">
include honeypot/backend/templates/*/*.html
include honeypot/backend/templates/*/*/*.html
include honeypot/frontend/static/css/*.css
include honeypot/frontend/static/js/*.js
include honeypot/frontend/components/*.js
include README.md
include LICENSE
</file>

<file path="README.md">
# Honeypot Framework

A comprehensive honeypot system for detecting and analyzing unauthorized access attempts. This framework provides both backend (Flask) and frontend (React) components for a complete honeypot solution.
---
## Features

- Multiple honeypot types (admin panels, WordPress, phpMyAdmin, etc.)
- Interactive admin dashboard for monitoring activities
- C2 (Command and Control) server simulation
- Detailed logging of all interactions
- GeoIP-based attacker information
- Rate limiting and security protections
- Docker support for easy deployment
----
## Installation

```bash
pip install honeypot-framework
```
----
## Quick Start

```python
from honeypot import create_honeypot_app

app = create_honeypot_app()

if __name__ == "__main__":
    app.run(debug=True)
```
----
## Configuration

Configuration can be provided through environment variables, a .env file, or directly in the code:

```python
from honeypot import create_honeypot_app

app = create_honeypot_app({
    "SECRET_KEY": "your-secure-key",
    "MONGO_URI": "mongodb://localhost:27017/honeypot",
    "REDIS_HOST": "localhost",
    "REDIS_PORT": 6379,
    "REDIS_PASSWORD": "your-redis-password",
    "HONEYPOT_RATE_LIMIT": 5,
    "HONEYPOT_RATE_PERIOD": 60
})
```

## Docker Deployment

See the examples/full_deployment directory for a complete Docker Compose setup.

## Advanced Usage

### Integration with Existing Flask Application

```python
from flask import Flask
from honeypot import create_honeypot_app
from werkzeug.middleware.dispatcher import DispatcherMiddleware

main_app = Flask(__name__)
honeypot_app = create_honeypot_app()

application = DispatcherMiddleware(main_app, {
    '/security': honeypot_app
})
```

### Custom Templates

You can customize the honeypot templates by setting the `HONEYPOT_TEMPLATES_PATH` configuration value:

```python
app = create_honeypot_app({
    "HONEYPOT_TEMPLATES_PATH": "/path/to/your/templates"
})
```
</file>

<file path="setup.py">
from setuptools import setup, find_packages

setup(
    name="honeypot-framework",
    version="0.1.0",
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        "flask>=2.0.0",
        "flask-cors>=3.0.0",
        "flask-session>=0.4.0",
        "redis>=4.0.0",
        "pymongo>=4.0.0",
        "geoip2>=4.0.0", 
        "python-dotenv>=0.19.0",
        "bcrypt>=3.2.0",
        "user-agents>=2.0.0",
        "python-socketio>=5.0.0",
        "gevent>=21.0.0"
    ],
    extras_require={
        "dev": [
            "pytest>=7.0.0",
            "flake8>=4.0.0",
            "black>=22.0.0"
        ]
    },
    python_requires=">=3.8",
    author="Your Name",
    author_email="your.email@example.com",
    description="A comprehensive honeypot framework with admin dashboard",
    long_description=open("README.md").read(),
    long_description_content_type="text/markdown",
    url="https://github.com/yourusername/honeypot-framework",
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Information Technology",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Topic :: Security",
    ],
)
</file>

<file path="honeypot/backend/routes/honeypot_pages.py">
# honeypot/backend/routes/honeypot_pages.py
from flask import Blueprint, render_template, request, jsonify, make_response, redirect, url_for, current_app
import logging
import time
from datetime import datetime
import json
import hashlib
from werkzeug.local import LocalProxy

honeypot_pages_bp = Blueprint('honeypot_pages', __name__, 
                              template_folder='templates')

# Access the MongoDB database
db = LocalProxy(get_db)


def log_honeypot_interaction(page_type, interaction_type, additional_data=None):
    """Log detailed information about honeypot interactions"""
    try:
        # Get client details
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if ip and ',' in ip:
            ip = ip.split(',')[0].strip()
            
        user_agent = request.headers.get('User-Agent', '')
        referer = request.headers.get('Referer', '')
        
        # Create interaction fingerprint
        interaction_id = hashlib.sha256(f"{ip}|{user_agent}|{time.time()}".encode()).hexdigest()
        
        # Build log entry
        log_entry = {
            "interaction_id": interaction_id,
            "timestamp": datetime.utcnow(),
            "ip_address": ip,
            "user_agent": user_agent,
            "referer": referer,
            "page_type": page_type,
            "interaction_type": interaction_type,
            "http_method": request.method,
            "path": request.path,
            "query_string": dict(request.args),
            "headers": {k: v for k, v in request.headers.items()},
            "cookies": {k: v for k, v in request.cookies.items()},
        }
        
        # Add form data if applicable
        if request.form:
            log_entry["form_data"] = dict(request.form)
            
        # Add JSON data if applicable
        if request.is_json:
            log_entry["json_data"] = request.get_json(silent=True)
            
        # Add additional custom data
        if additional_data:
            log_entry["additional_data"] = additional_data
            
        # Store in database
        db.honeypot_interactions.insert_one(log_entry)
        
        return interaction_id
    except Exception as e:
        logging.error(f"Error logging honeypot interaction: {str(e)}")
        return None



def determine_category(path):
    """Determine honeypot category based on the request path"""
    path = path.lower()
    
    # WordPress
    if any(x in path for x in ['wp-', 'wordpress', 'wp/', 'wp-login', 'wp-admin']):
        return "wordpress"
    
    # Admin panels
    elif any(x in path for x in ['admin', 'administrator', 'adm', 'siteadmin', 'panel', 'console']):
        return "admin_panels"
    
    # E-commerce
    elif any(x in path for x in ['shop', 'store', 'cart', 'checkout', 'product', 'magento', 'shopify', 'woocommerce']):
        return "e_commerce"
    
    # CMS
    elif any(x in path for x in ['joomla', 'drupal', 'typo3', 'cms', 'content']):
        return "additional_cms"
    
    # Forums and boards
    elif any(x in path for x in ['forum', 'board', 'community', 'discourse', 'phpbb', 'vbulletin']):
        return "forums_and_boards"
    
    # File sharing
    elif any(x in path for x in ['upload', 'file', 'share', 'download', 'ftp', 'webdav']):
        return "file_sharing"
    
    # Database endpoints
    elif any(x in path for x in ['phpmyadmin', 'pma', 'mysql', 'database', 'db', 'sql', 'mongo']):
        return "database_endpoints"
    
    # Mail servers
    elif any(x in path for x in ['mail', 'webmail', 'smtp', 'imap', 'roundcube', 'squirrelmail']):
        return "mail_servers"
    
    # Remote access
    elif any(x in path for x in ['ssh', 'telnet', 'rdp', 'vnc', 'remote']):
        return "remote_access"
    
    # IoT devices
    elif any(x in path for x in ['iot', 'device', 'router', 'camera', 'dvr', 'smart']):
        return "iot_devices"
    
    # DevOps tools
    elif any(x in path for x in ['jenkins', 'gitlab', 'ci', 'cd', 'devops', 'travis', 'build']):
        return "devops_tools"
    
    # Web frameworks
    elif any(x in path for x in ['laravel', 'symfony', 'django', 'flask', 'rails', 'spring']):
        return "web_frameworks"
    
    # Logs and debug
    elif any(x in path for x in ['log', 'debug', 'trace', 'error', 'console']):
        return "logs_and_debug"
    
    # Backdoors and shells
    elif any(x in path for x in ['shell', 'backdoor', 'cmd', 'command', 'c99', 'r57']):
        return "backdoors_and_shells"
    
    # Injection attempts
    elif any(x in path for x in ['sql', 'injection', 'xss', 'script', 'eval']):
        return "injection_attempts"
    
    # Mobile endpoints
    elif any(x in path for x in ['api', 'mobile', 'app', 'android', 'ios', 'endpoint']):
        return "mobile_endpoints"
    
    # Cloud services
    elif any(x in path for x in ['aws', 'azure', 'cloud', 's3', 'bucket', 'lambda']):
        return "cloud_services"
    
    # Monitoring tools
    elif any(x in path for x in ['monitor', 'grafana', 'prometheus', 'nagios', 'zabbix']):
        return "monitoring_tools"
    
    # Special cases for common targets
    if 'phpmyadmin' in path or 'pma' in path:
        return "database_endpoints"
    elif 'cpanel' in path:
        return "admin_panels"
    
    # Return None if no category matched
    return None

@honeypot_pages_bp.route('/system/<path:component>', methods=['GET'])
def system_trap(component):
    """
    Handles the redirection loop with realistic-looking URLs
    """
    # Map URL components to step numbers
    url_mapping = {
        'verify': 1,
        'users/management': 2,
        'access/privileges': 3,
        'security/credentials': 4,
        'vault/passwords': 5,
        'auth/tokens': 6,
        'security/2fa': 7,
        'crypto/keys': 8,
        'data/customers': 9,
        'finance/payments': 10,
        'servers/access': 11,
        'database/dump': 12,
        'developers/api': 13,
        'admin/override': 14,
        'system/root': 15
    }
    
    # Find the current step number from the URL component
    current_step = 1
    for path, step in url_mapping.items():
        if component == path:
            current_step = step
            break
    
    # Determine the next step
    next_step = current_step + 1 if current_step < 15 else 1
    
    # Get the URL component for the next step
    next_component = list(url_mapping.keys())[next_step - 1]
    
    # Log this interaction
    log_honeypot_interaction(
        'system_trap',
        'page_view',
        additional_data={
            'step': current_step,
            'component': component,
            'next_step': next_step,
            'next_component': next_component
        }
    )
    
    # Render the appropriate template
    return render_template(f'redirection/step{current_step}.html', next_component=next_component)

# Your existing specific routes
@honeypot_pages_bp.route('/wp-admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/wp-login.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/wordpress/wp-admin', methods=['GET', 'POST'])
def wordpress_honeypot():
    """WordPress admin honeypot"""
    log_honeypot_interaction('wordpress', 'page_view')
    return render_template('honeypot/wp-dashboard.html')

# Add specific routes for other categories here...
@honeypot_pages_bp.route('/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/administrator', methods=['GET', 'POST'])
def admin_panel_honeypot():
    """Admin panel honeypot"""
    log_honeypot_interaction('admin_panels', 'page_view')
    return render_template('honeypot/admin-login.html')



# phpMyAdmin routes
@honeypot_pages_bp.route('/phpmyadmin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/pma', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/mysql', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/db/phpmyadmin', methods=['GET', 'POST'])
def phpmyadmin_honeypot():
    """phpMyAdmin honeypot"""
    log_honeypot_interaction('phpmyadmin', 'page_view')
    return render_template('honeypot/phpmyadmin-dashboard.html')

# cPanel routes
@honeypot_pages_bp.route('/cpanel', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/cPanel', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/cp', methods=['GET', 'POST'])
def cpanel_honeypot():
    """cPanel honeypot"""
    log_honeypot_interaction('cpanel', 'page_view')
    return render_template('honeypot/cpanel-dashboard.html')

# Admin panel routes

@honeypot_pages_bp.route('/admin/login', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/admin/dashboard', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/adminpanel', methods=['GET', 'POST'])
def admin_honeypot():
    """Generic admin honeypot"""
    log_honeypot_interaction('admin_panels', 'page_view')
    return render_template('honeypot/admin-dashboard.html')

# E-commerce admin routes
@honeypot_pages_bp.route('/shop/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/store/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/woocommerce/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/magento/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/shopify/admin', methods=['GET', 'POST'])
def ecommerce_honeypot():
    """E-commerce admin honeypot"""
    log_honeypot_interaction('ecommerce', 'page_view')
    return render_template('honeypot/ecommerce-dashboard.html')

# Additional CMS routes
@honeypot_pages_bp.route('/typo3', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/joomla/administrator', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/drupal/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/craft/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/cms/admin', methods=['GET', 'POST'])
def cms_honeypot():
    """CMS admin honeypot"""
    log_honeypot_interaction('additional_cms', 'page_view')
    return render_template('honeypot/cms-dashboard.html')

# Forums and boards routes
@honeypot_pages_bp.route('/forum/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/phpbb/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/vbulletin/admincp', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/xenforo/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/community/admin', methods=['GET', 'POST'])
def forum_honeypot():
    """Forum admin honeypot"""
    log_honeypot_interaction('forums_and_boards', 'page_view')
    return render_template('honeypot/forum-dashboard.html')

# File sharing routes
@honeypot_pages_bp.route('/owncloud/login', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/nextcloud/login', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/cloud/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/filerun/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/share/admin', methods=['GET', 'POST'])
def file_sharing_honeypot():
    """File sharing admin honeypot"""
    log_honeypot_interaction('file_sharing', 'page_view')
    return render_template('honeypot/filesharing-dashboard.html')

# Database endpoints routes
@honeypot_pages_bp.route('/mongodb', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/postgres', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/redis', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/elasticsearch', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/couchdb/_utils', methods=['GET', 'POST'])
def database_honeypot():
    """Database admin honeypot"""
    log_honeypot_interaction('database_endpoints', 'page_view')
    return render_template('honeypot/database-dashboard.html')

# Mail server routes
@honeypot_pages_bp.route('/webmail', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/roundcube', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/squirrelmail', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/mail/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/postfixadmin', methods=['GET', 'POST'])
def mail_server_honeypot():
    """Mail server admin honeypot"""
    log_honeypot_interaction('mail_servers', 'page_view')
    return render_template('honeypot/mail-dashboard.html')

# Remote access routes
@honeypot_pages_bp.route('/ssh', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/vnc', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/rdp', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/webssh', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/terminal', methods=['GET', 'POST'])
def remote_access_honeypot():
    """Remote access honeypot"""
    log_honeypot_interaction('remote_access', 'page_view')
    return render_template('honeypot/remote-access-dashboard.html')

# IoT devices routes
@honeypot_pages_bp.route('/router', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/camera', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/ipcam', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/smart-home', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/device/admin', methods=['GET', 'POST'])
def iot_device_honeypot():
    """IoT device admin honeypot"""
    log_honeypot_interaction('iot_devices', 'page_view')
    return render_template('honeypot/iot-dashboard.html')

# DevOps tools routes
@honeypot_pages_bp.route('/jenkins', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/gitlab', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/travis', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/circleci', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/kubernetes', methods=['GET', 'POST'])
def devops_honeypot():
    """DevOps tools honeypot"""
    log_honeypot_interaction('devops_tools', 'page_view')
    return render_template('honeypot/devops-dashboard.html')

# Web frameworks routes
@honeypot_pages_bp.route('/django/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/rails/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/laravel/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/spring/admin', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/flask/admin', methods=['GET', 'POST'])
def framework_honeypot():
    """Web framework admin honeypot"""
    log_honeypot_interaction('web_frameworks', 'page_view')
    return render_template('honeypot/framework-dashboard.html')

# Logs and debug routes
@honeypot_pages_bp.route('/logs', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/debug', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/debug/console', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/debug/panel', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/trace', methods=['GET', 'POST'])
def debug_honeypot():
    """Logs and debug honeypot"""
    log_honeypot_interaction('logs_and_debug', 'page_view')
    return render_template('honeypot/debug-console.html')

# Backdoors and shells routes
@honeypot_pages_bp.route('/shell.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/c99.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/cmd.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/backdoor.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/terminal.php', methods=['GET', 'POST'])
def shell_honeypot():
    """Backdoor/shell honeypot"""
    log_honeypot_interaction('backdoors_and_shells', 'page_view')
    return render_template('honeypot/shell.html')

# Injection attempts routes
@honeypot_pages_bp.route('/page.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/article.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/product.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/user.php', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/view.php', methods=['GET', 'POST'])
def injection_honeypot():
    """Injection vulnerabilities honeypot"""
    # Log any parameters passed
    params = {k: v for k, v in request.args.items()}
    log_honeypot_interaction('injection_attempts', 'page_view', additional_data={'params': params})
    return render_template('honeypot/generic-page.html')

# Mobile endpoints routes
@honeypot_pages_bp.route('/api/mobile', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/api/v1/mobile', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/mobile/api', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/app/api', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/api/app', methods=['GET', 'POST'])
def mobile_api_honeypot():
    """Mobile API honeypot"""
    # Log any JSON data
    json_data = request.get_json(silent=True) or {}
    log_honeypot_interaction('mobile_endpoints', 'page_view', additional_data={'json_data': json_data})
    return render_template('honeypot/mobile-api.html')

# Cloud services routes
@honeypot_pages_bp.route('/aws/login', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/azure/login', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/gcp/login', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/s3/console', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/ec2/console', methods=['GET', 'POST'])
def cloud_honeypot():
    """Cloud services honeypot"""
    log_honeypot_interaction('cloud_services', 'page_view')
    return render_template('honeypot/cloud-dashboard.html')

# Monitoring tools routes
@honeypot_pages_bp.route('/nagios', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/zabbix', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/grafana', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/prometheus', methods=['GET', 'POST'])
@honeypot_pages_bp.route('/monitoring', methods=['GET', 'POST'])
def monitoring_honeypot():
    """Monitoring tools honeypot"""
    log_honeypot_interaction('monitoring_tools', 'page_view')
    return render_template('honeypot/monitoring-dashboard.html')



@honeypot_pages_bp.route('/<path:path>', methods=['GET', 'POST'])
def catch_all_honeypot(path):
    """Catch-all route that categorizes and redirects to specific honeypot handlers"""
    # Determine category from path
    category = determine_category(path)
    

    if category == "wordpress":
        return redirect(url_for('honeypot_pages.wordpress_honeypot'))
    elif category == "admin_panels":
        return redirect(url_for('honeypot_pages.admin_honeypot')) 
    elif category == "e_commerce":
        return redirect(url_for('honeypot_pages.ecommerce_honeypot'))
    elif category == "additional_cms":
        return redirect(url_for('honeypot_pages.cms_honeypot'))
    elif category == "forums_and_boards":
        return redirect(url_for('honeypot_pages.forum_honeypot'))
    elif category == "file_sharing":
        return redirect(url_for('honeypot_pages.file_sharing_honeypot'))  
    elif category == "mail_servers":
        return redirect(url_for('honeypot_pages.mail_server_honeypot'))  
    elif category == "remote_access":
        return redirect(url_for('honeypot_pages.remote_access_honeypot'))
    elif category == "iot_devices":
        return redirect(url_for('honeypot_pages.iot_device_honeypot'))  
    elif category == "devops_tools":
        return redirect(url_for('honeypot_pages.devops_honeypot'))
    elif category == "web_frameworks":
        return redirect(url_for('honeypot_pages.framework_honeypot'))
    elif category == "logs_and_debug":
        return redirect(url_for('honeypot_pages.debug_honeypot'))
    elif category == "backdoors_and_shells":
        return redirect(url_for('honeypot_pages.shell_honeypot'))
    elif category == "injection_attempts":
        return redirect(url_for('honeypot_pages.injection_honeypot'))
    elif category == "mobile_endpoints":
        return redirect(url_for('honeypot_pages.mobile_api_honeypot'))  
    elif category == "cloud_services":
        return redirect(url_for('honeypot_pages.cloud_honeypot'))
    elif category == "monitoring_tools":
        return redirect(url_for('honeypot_pages.monitoring_honeypot'))
    
    if 'phpmyadmin' in path or 'pma' in path:
        return redirect(url_for('honeypot_pages.phpmyadmin_honeypot'))
    elif 'cpanel' in path:
        return redirect(url_for('honeypot_pages.cpanel_honeypot'))
    elif 'admin' in path:
        return redirect(url_for('honeypot_pages.admin_honeypot'))
    
    # Default fallback - you need to define this function
    return render_template('honeypot/generic-login.html')  # Changed to direct template rendering
</file>

<file path="honeypot/backend/routes/honeypot_routes.py">
# honeypot_routes.py
# Just defines routes without importing or modifying blueprint

def get_honeypot_routes():
    """Return a dictionary of all honeypot routes by category"""
    
    honeypot_routes = {
        # Wordpress
        "wordpress": [
            '/wp-login.php',
            '/wp-admin',
            '/wp-admin/admin-ajax.php',
            '/wordpress/wp-login.php',
            '/wordpress/wp-admin',
            '/blog/wp-login.php',
            '/blog/wp-admin',
            '/wp-admin/index.php',
            '/wp-admin/profile.php',
            '/wp-admin/options-general.php',
            '/wp-admin/post.php',
            '/wp-admin/edit.php',
            '/wp-admin/post-new.php',
            '/wp-admin/plugins.php',
            '/wp-admin/users.php',
            '/wp-admin/themes.php',
            '/wp-admin/options-writing.php',
            '/wp-admin/options-reading.php',
            '/wp-admin/options-discussion.php',
            '/wp-admin/options-media.php',
            '/wp-admin/options-permalink.php',
            '/wp-admin/upload.php',
            '/wp-admin/media-new.php',
            '/wp-admin/edit-comments.php',
            '/wp-admin/network-admin.php',
            '/wp-admin/network',
            '/wp-admin/update-core.php',
            '/wp/wp-admin',
            '/wp/wp-login.php',
            '/wordpress/wp-admin/index.php',
            '/blog/wp-admin/index.php',
            '/news/wp-admin',
            '/news/wp-login.php',
            '/cms/wp-admin',
            '/cms/wp-login.php',
            '/site/wp-admin',
            '/site/wp-login.php',
            '/main/wp-admin',
            '/main/wp-login.php',
            '/web/wp-admin',
            '/web/wp-login.php',
            '/staging/wp-admin',
            '/staging/wp-login.php',
            '/test/wp-admin',
            '/test/wp-login.php',
            '/dev/wp-admin',
            '/dev/wp-login.php',
            '/backup/wp-admin',
            '/backup/wp-login.php',
            '/old/wp-admin',
            '/old/wp-login.php',
            '/new/wp-admin',
            '/new/wp-login.php',
            '/demo/wp-admin',
            '/demo/wp-login.php',
            '/xmlrpc.php',
            '/wordpress/xmlrpc.php',
            '/wp/xmlrpc.php',
            '/blog/xmlrpc.php',
            '/news/xmlrpc.php',
            '/cms/xmlrpc.php',
            '/wp-config.php',
            '/wp-config.php.bak',
            '/wp-config.php.old',
            '/wp-config.php.save',
            '/wp-config.php.swp',
            '/wp-config.php.txt',
            '/wp-config.php~',
            '/wp-config-sample.php',
            '/wordpress/wp-config.php',
            '/blog/wp-config.php',
            '/wp-json',
            '/wp-json/wp/v2/users',
            '/wp-json/wp/v2/posts',
            '/wp-json/wp/v2/pages',
            '/wp-json/wp/v2/media',
            '/wp-json/wp/v2/comments',
            '/wp-json/wp/v2/types',
            '/wp-json/wp/v2/statuses',
            '/wp-json/wp/v2/taxonomies',
            '/wp-json/wp/v2/categories',
            '/wp-json/wp/v2/tags',
            '/wp-json/wp/v2/settings',
            '/wp-json/wp/v2/themes',
            '/wp-json/wp/v2/plugins',
            '/wp-json/wp/v2/block-types',
            '/wp-json/wp/v2/blocks',
            '/wp-json/wp/v2/search',
            '/wp-content/plugins/wp-file-manager/readme.txt',
            '/wp-content/plugins/wp-file-manager/fm_backups',
            '/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php',
            '/wp-content/plugins/contact-form-7/readme.txt',
            '/wp-content/plugins/woocommerce/readme.txt',
            '/wp-content/plugins/elementor/readme.txt',
            '/wp-content/plugins/akismet/readme.txt',
            '/wp-content/plugins/all-in-one-seo-pack/readme.txt',
            '/wp-content/plugins/yoast-seo/readme.txt',
            '/wp-content/plugins/wordfence/readme.txt',
            '/wp-content/plugins/wpforms-lite/readme.txt',
            '/wp-content/plugins/jetpack/readme.txt',
            '/wp-content/plugins/duplicator/readme.txt',
            '/wp-content/plugins/updraftplus/readme.txt',
            '/wp-content/plugins/wp-super-cache/readme.txt',
            '/wp-content/plugins/ninja-forms/readme.txt',
            '/wp-content/plugins/wp-mail-smtp/readme.txt',
            '/wp-content/plugins/redirection/readme.txt',
            '/wp-content/plugins/slider-revolution/readme.txt',
            '/wp-content/plugins/gravityforms/readme.txt',
            '/wp-content/plugins/elementor-pro/readme.txt',
            '/wp-content/plugins/advanced-custom-fields/readme.txt',
            '/wp-content/plugins/sucuri-scanner/readme.txt',
            '/wp-content/plugins/wp-optimize/readme.txt',
            '/wp-content/plugins/wp-security-audit-log/readme.txt',
            '/wp-content/plugins/wp-hide-security-enhancer/readme.txt',
            '/wp-content/plugins/all-in-one-wp-migration/readme.txt',
            '/wp-content/plugins/classic-editor/readme.txt',
            '/wp-content/plugins/google-analytics-for-wordpress/readme.txt',
            '/wp-content/plugins/tinymce-advanced/readme.txt',
            '/wp-content/plugins/admin',
            '/wp-content/plugins/login',
            '/wp-content/plugins/manager',
            '/wp-content/plugins/config',
            '/wp-content/plugins/settings',
            '/wp-content/plugins/setup',
            '/wp-content/plugins/install',
            '/wp-content/themes/twentytwentyfour/style.css',
            '/wp-content/themes/twentytwentythree/style.css',
            '/wp-content/themes/twentytwentytwo/style.css',
            '/wp-content/themes/twentytwentyone/style.css',
            '/wp-content/themes/twentytwenty/style.css',
            '/wp-content/themes/twentynineteen/style.css',
            '/wp-content/themes/twentyeighteen/style.css',
            '/wp-content/themes/twentyseventeen/style.css',
            '/wp-content/themes/twentysixteen/style.css',
            '/wp-content/themes/twentyfifteen/style.css',
            '/wp-content/themes/astra/style.css',
            '/wp-content/themes/divi/style.css',
            '/wp-content/themes/avada/style.css',
            '/wp-content/themes/hello-elementor/style.css',
            '/wp-content/themes/oceanwp/style.css',
            '/wp-content/themes/generatepress/style.css',
            '/wp-content/themes/neve/style.css',
            '/wp-content/themes/storefront/style.css',
            '/wp-content/themes/flatsome/style.css',
            '/wp-content/themes/enfold/style.css',
            '/wp-content/backup-db',
            '/wp-content/backups',
            '/wp-content/backup',
            '/wp-content/bak',
            '/wp-content/old',
            '/wp-content/temp',
            '/wp-content/tmp',
            '/wp-content/cache',
            '/wp-content/uploads/backups',
            '/wp-content/uploads/backup-db',
            '/wp-content/debug.log',
            '/wp-content/debug.txt',
            '/wp-content/error.log',
            '/wp-content/error_log',
            '/wp-content/php_error.log',
            '/wp-content/uploads/debug.log',
            '/wp-content/uploads/error.log',
            '/wp-content/uploads/error_log',
            '/wp-admin/install.php',
            '/wp-admin/setup-config.php',
            '/wp-admin/upgrade.php',
            '/wp-admin/upgrade-functions.php',
            '/wp-admin/includes/upgrade.php',
            '/wp-content/uploads',
            '/wp-content/uploads/2025',
            '/wp-content/uploads/2024',
            '/wp-content/uploads/2023',
            '/wp-content/uploads/2022',
            '/wp-content/uploads/2021',
            '/wp-content/uploads/2020',
            '/wp-content/uploads/2019',
            '/wp-content/uploads/2018',
            '/wp-load.php',
            '/wp-includes/version.php',
            '/wp-includes/functions.php',
            '/wp-includes/class-wp.php',
            '/wp-includes/class-wp-error.php',
            '/wp-includes/plugin.php',
            '/wp-includes/l10n.php',
            '/wp-includes/user.php',
            '/wp-includes/post.php',
            '/wp-includes/meta.php',
            '/wp-includes/capabilities.php',
            '/wp-includes/theme.php',
            '/login',
            '/login.php',
            '/wp/login',
            '/wordpress/login',
            '/blog/login',
            '/wp-login',
            '/wp-login/',
            '/login/',
            '/admin/login',
            '/wp-admin/login',
            '/admin/',
            '/wp-signup.php',
            '/wp-register.php',
            '/wp-activate.php',
            '/wordpress/wp-signup.php',
            '/wordpress/wp-register.php',
            '/blog/wp-signup.php',
            '/blog/wp-register.php',
            '/wp-admin/network',
            '/wp-admin/network/sites.php',
            '/wp-admin/network/users.php',
            '/wp-admin/network/themes.php',
            '/wp-admin/network/plugins.php',
            '/wp-admin/network/settings.php',
            '/wp-admin/network/update-core.php',
            '/wp-admin/network/admin.php',
            '/wp-admin/network/edit.php',
            '/wp-admin/network/site-info.php',
            '/wp-admin/network/site-users.php',
            '/wp-admin/network/site-themes.php',
            '/wp-admin/network/site-settings.php',
            '/wp-admin/network/site-new.php',
            '/wp-admin/network/user-new.php',
            '/wp-content/uploads/media',
            '/wp-content/uploads/images',
            '/wp-content/uploads/files',
            '/wp-content/uploads/documents',
            '/wp-content/uploads/assets',
            '/wp-content/uploads/pdf',
            '/wp-content/uploads/private',
            '/wp-content/uploads/restricted',
            '/wp-content/uploads/users',
            '/wp-content/uploads/avatars',
            '/wp-cron.php',
            '/wp-trackback.php',
            '/wp-links-opml.php',
            '/wp-mail.php',
            '/wp-settings.php',
            '/wp-signup.php',
            '/wp-blog-header.php',
            '/wp-comments-post.php',
            '/wp-activate.php',
            '/wp-links.php',
            '/wp-feed.php',
            '/wp-atom.php',
            '/wp-rss.php',
            '/wp-pass.php',
            '/wp-rdf.php',
            '/wp-commentsrss2.php',
            '/robots.txt',
            '/readme.html',
            '/license.txt',
            '/licences.txt',
            '/changelog.txt',
            '/sitemap.xml',
            '/sitemap_index.xml',
            '/.htaccess',
            '/wp-includes/certificates',
            '/wp-includes/pomo',
            '/wp-includes/rest-api',
            '/wp-includes/sodium_compat',
            '/wp-includes/sitemaps',
            '/wp-content/mu-plugins',
            '/wp-content/languages',
            '/wp-config-docker.php',
            '/wp-config-local.php',
            '/wp-config-dev.php',
            '/wp-config-staging.php',
        ],
        # admin
        "admin_panels": [
            '/admin',
            '/admin/',
            '/administrator',
            '/admin/login',
            '/admin/login.php',
            '/administrator/index.php',
            '/admin.php',
            '/admin/admin.php',
            '/adminpanel',
            '/administrador',
            '/admin/dashboard',
            '/admin/home',
            '/admin/control',
            '/admin/cp',
            '/admin/portal',
            '/admin-panel',
            '/admin-console',
            '/admin-area',
            '/admin-login',
            '/admin-dashboard',
            '/adm',
            '/adm/',
            '/adm/index.php',
            '/adm/admin.php',
            '/adminarea',
            '/admincontrol',
            '/admloginuser',
            '/admcp',
            '/admin_area',
            '/admin_login',
            '/siteadmin',
            '/siteadmin/login',
            '/siteadmin/index',
            '/siteadmin/login.html',
            '/site-admin',
            '/backup/admin',
            '/admin123',
            '/admin_c',
            '/administrator/admin',
            '/administrator.php',
            '/administrator.html',
            '/administrator/account',
            '/administrator.asp',
            '/admin1',
            '/admin2',
            '/admin3',
            '/admin4',
            '/admin5',
            '/moderator',
            '/moderator/',
            '/moderator/login',
            '/moderator/admin',
            '/webadmin',
            '/webadmin/index',
            '/webadmin/admin',
            '/webadmin/login',
            '/user/admin',
            '/adminpanel.php',
            '/adminpanel.asp',
            '/adminpanel.html',
            '/adminlogin',
            '/adminlogin.php',
            '/adminlogin.asp',
            '/panel-admin',
            '/panel-administrator',
            '/wp-admin',
            '/wp-login',
            '/wp-login.php',
            '/wplogin',
            '/administrator/login.php',
            '/backend',
            '/backend/login',
            '/backend/admin',
            '/secure/admin',
            '/secure/login',
            '/manage',
            '/management',
            '/management/admin',
            '/management/login',
            '/manager',
            '/manager/login',
            '/manager/admin',
            '/member/admin',
            '/panel',
            '/control',
            '/control/login',
            '/console',
            '/console/login',
            '/cp',
            '/cp/login',
            '/administrators',
            '/administrators/login',
            '/admins',
            '/admins/login',
            '/adm/admloginuser.php',
            '/adm/index.php',
            '/adm/admin.php',
            '/joomla/administrator',
            '/cms/admin',
            '/cms/administrator',
            '/system/admin',
            '/system/login',
            '/portal/admin',
            '/portal/login',
            '/admin1.php',
            '/admin2.php',
            '/yonetim',
            '/yonetim.php',
            '/yonetici',
            '/admin1.html',
            '/admin1.asp',
            '/admin2.asp',
            '/admin2.html',
            '/yonetim.html',
            '/yonetici.html',
            '/yonetici.php',
            '/admin1/login.php',
            '/admin2/login.php',
            '/cpanel',
            '/cpanel/login',
            '/phpmyadmin',
            '/phpmyadmin/login',
            '/phppgadmin',
            '/phppgadmin/login',
            '/myadmin',
            '/sql/login',
            '/mysql/login',
            '/pma',
            '/dbadmin',
            '/db/phpmyadmin',
            '/db/phpMyAdmin',
            '/phpmy',
            '/phpMyAdmin',
            '/phpMyAdmin/login',
            '/sqlmanager',
            '/mysqlmanager',
            '/php-myadmin',
            '/mysqladmin',
            '/mysql-admin',
            '/database',
            '/database/login',
            '/db',
            '/db/admin',
            '/db/login',
            '/admin/db',
            '/admin/pma',
            '/admin/mysql',
            '/admin/phpmyadmin',
            '/secret',
            '/secret/admin',
            '/secret/login',
            '/adm/index',
            '/private',
            '/private/admin',
            '/private/login',
            '/server/admin',
            '/server/login',
            '/sys/admin',
            '/sys/login',
            '/admin_panel',
            '/admin_panel.php',
            '/admin_panel.html',
            '/admin_panel.asp',
            '/admin.html',
            '/admin.asp',
            '/adminweb',
            '/adminweb/',
            '/api/admin',
            '/api/login',
            '/users/admin',
            '/users/login',
            '/super',
            '/super/login',
            '/super/admin',
            '/auth',
            '/auth/login',
            '/authenticate',
            '/administrator/account.asp',
            '/administrator/account.html',
            '/administrator/login.asp',
            '/administrator/login.html',
            '/administrator/index.asp',
            '/administrator/index.html',
            '/secret/.env',
            '/config/.env',
            '/application/.env',
            '/.env',
            '/.env.backup',
            '/.env.old',
            '/.env.dev',
            '/.env.development',
            '/.env.local',
            '/.env.prod',
            '/.env.production',
            '/.env.test',
            '/.env.example',
            '/.env.bak',
            '/config.php',
            '/config.ini',
            '/config.json',
            '/config.yml',
            '/config.yaml',
            '/config.xml',
            '/config/config.php',
            '/config/database.php',
            '/app/config/database.php',
            '/application/config/database.php',
            '/application/config.php',
            '/includes/config.php',
            '/inc/config.php',
            '/db/config.php',
            '/db/config.ini',
            '/database.php',
            '/database.yml',
            '/database.json',
            '/configuration.php',
            '/configuration.ini',
            '/settings.php',
            '/settings.ini',
            '/settings.json',
            '/app/config.php',
            '/app/settings.php',
            '/app/database.php',
            '/app/db.php',
            '/conn.php',
            '/connection.php',
            '/db-config.php',
            '/db-connection.php',
            '/db_config.php',
            '/db_connection.php',
            '/db.php',
            '/db.ini',
            '/includes/db.php',
            '/includes/database.php',
            '/inc/db.php',
            '/inc/database.php',
            '/api/config',
            '/config.js',
            '/backup',
            '/backup/',
            '/backup/config',
            '/backup/db',
            '/backup/database',
            '/backup/files',
            '/backup/website',
            '/backups',
            '/backups/',
            '/bak',
            '/old',
            '/old/config',
            '/old/database',
            '/old/db',
            '/log',
            '/logs',
            '/logs/',
            '/log/',
            '/error_log',
            '/error.log',
            '/debug.log',
            '/access.log',
            '/access_log',
            '/php_error.log',
            '/server.log',
            '/server_log',
            '/app/logs',
            '/application/logs',
            '/var/log',
            '/usr/logs',
            '/debug',
            '/debug/bar',
            '/debug/console',
            '/phpinfo',
            '/phpinfo.php',
            '/info.php',
            '/php',
            '/php/',
            '/status',
            '/server-status',
            '/server-info'
            '/admin/index.jsp',
            '/admin/control.jsp',
            '/administrator/index.jsp',
            '/admin/auth',
            '/admin/auth/login',
            '/admin/setup',
            '/admin/install',
            '/admin/configure',
            '/admin/maintenance',
            '/admin/backup',
            '/admin/reset',
            '/admin/reports',
            '/admin/stats',
            '/admin/analytics',
            '/admin/users',
            '/admin/roles',
            '/admin/permissions',
            '/admin/settings',
            '/admin/config',
            '/admin/configuration',
            '/admin-settings',
            '/admin-config',
            '/admin/security',
            '/admin/profile',
            '/admin/tools',
            '/admin/modules',
            '/admin/plugins',
            '/admin/themes',
            '/admin/templates',
            '/admin/logs',
            '/admin/log',
            '/admin/activity',
            '/admin/monitor',
            '/admin/api',
            '/admin/api/v1',
            '/admin/api/v2',
            '/admin/filemanager',
            '/admin/files',
            '/admin/upload',
            '/admin/download',
            '/admin/export',
            '/admin/import',
            '/admin/database',
            '/admin/db',
            '/admin/sql',
            '/admin/mysql',
            '/admin/postgres',
            '/admin/mongodb',
            '/admin/redis',
            '/admin/cache',
            '/admin/flush',
            '/admin/purge',
            '/admin/clear',
            '/admin/update',
            '/admin/upgrade',
            '/admin/install.php',
            '/admin/setup.php',
            '/admin/config.php',
            '/admin/login.jsp',
            '/admin/login.aspx',
            '/admin/login.asp',
            '/admin/login.js',
            '/admin/login.cgi',
            '/admin/auth.php',
            '/admin/auth.jsp',
            '/admin/auth.aspx',
            '/admin/dashboard.php',
            '/admin/dashboard.asp',
            '/admin/dashboard.aspx',
            '/admin/dashboard.jsp',
            '/admin/dashboard.html',
            '/admin/cp.php',
            '/admin/controlpanel',
            '/admin/adminpanel',
            '/adminportal',
            '/adminsite',
            '/adminsection',
            '/adminhome',
            '/adminindex',
            '/admin.aspx',
            '/admin/index.aspx',
            '/admin_console',
            '/admin-cp',
            '/admin/phpinfo.php',
            '/admin/info.php',
            '/admin/apc.php',
            '/admin/opcache.php',
            '/admin/server-info',
            '/admin/server-status',
            '/admin/status.php',
            '/admin/health',
            '/admin/metrics',
            '/admin/statistics',
            '/admin/accounts',
            '/admin/members',
            '/admin/customers',
            '/admin/subscribers',
            '/admin/orders',
            '/admin/products',
            '/admin/catalog',
            '/admin/categories',
            '/admin/tags',
            '/admin/comments',
            '/admin/reviews',
            '/admin/ratings',
            '/admin/feedback',
            '/admin/tickets',
            '/admin/support',
            '/admin/helpdesk',
            '/admin/faq',
            '/admin/knowledge',
            '/admin/articles',
            '/admin/posts',
            '/admin/pages',
            '/admin/media',
            '/admin/images',
            '/admin/videos',
            '/admin/documents',
            '/admin/attachments',
            '/admin/newsletters',
            '/admin/campaigns',
            '/admin/marketing',
            '/admin/seo',
            '/admin/analytics',
            '/admin/reports',
            '/admin/statistics/users',
            '/admin/statistics/traffic',
            '/admin/statistics/sales',
            '/admin/logs/access',
            '/admin/logs/error',
            '/admin/logs/security',
            '/admin/logs/activity',
            '/admin/export/users',
            '/admin/export/orders',
            '/admin/export/products',
            '/admin/import/users',
            '/admin/import/products',
            '/admin/backup/db',
            '/admin/backup/files',
            '/admin/restore',
            '/admin/cron',
            '/admin/scheduled',
            '/admin/tasks',
            '/admin/jobs',
            '/admin/queue',
            '/admin/workers',
            '/admin/processes',
            '/admin/services',
            '/admin/daemons',
            '/admin/system',
            '/admin/platform',
            '/admin/environment',
            '/admin/configuration/general',
            '/admin/configuration/security',
            '/admin/configuration/performance',
            '/admin/configuration/email',
            '/admin/configuration/payment',
            '/admin/configuration/shipping',
            '/admin/configuration/tax',
            '/admin/integration',
            '/admin/api/keys',
            '/admin/api/tokens',
            '/admin/api/webhooks',
            '/admin/api/docs',
            '/admin/auth/2fa',
            '/admin/auth/saml',
            '/admin/auth/ldap',
            '/admin/auth/sso',
            '/admin/users/roles',
            '/admin/users/permissions',
            '/admin/users/groups',
            '/admin/users/invites',
            '/admin/users/sessions',
            '/admin/users/activity',
            '/admin/acl',
            '/admin/rbac',
            '/admin/permissions/roles',
            '/admin/permissions/groups',
            '/admin/logs/audit',
            '/admin/logs/login',
            '/admin/logs/changes',
            '/admin/security/firewall',
            '/admin/security/waf',
            '/admin/security/blocklist',
            '/admin/security/allowlist',
            '/admin/security/scanner',
            '/admin/security/malware',
            '/admin/security/updates',
            '/admin/security/patches',
            '/admin/security/vulnerabilities',
            '/admin/network',
            '/admin/network/settings',
            '/admin/network/dns',
            '/admin/network/firewall',
            '/admin/storage',
            '/admin/storage/files',
            '/admin/storage/backups',
            '/admin/storage/uploads',
            '/admin/storage/media',
            '/admin/storage/s3',
            '/admin/storage/cloud',
            '/admin/storage/cdn',
            '/admin/plugins/installed',
            '/admin/plugins/store',
            '/admin/plugins/upload',
            '/admin/plugins/settings',
            '/admin/themes/installed',
            '/admin/themes/store',
            '/admin/themes/upload',
            '/admin/themes/customize',
            '/admin/themes/editor',
            '/admin/modules/installed',
            '/admin/modules/store',
            '/admin/modules/upload',
            '/admin/modules/settings',
            '/admin/widgets',
            '/admin/blocks',
            '/admin/components',
            '/admin/elements',
            '/admin/email/templates',
            '/admin/email/campaigns',
            '/admin/email/autoresponders',
            '/admin/email/newsletter',
            '/admin/email/subscribers',
            '/admin/sms',
            '/admin/sms/campaigns',
            '/admin/sms/templates',
            '/admin/notifications',
            '/admin/alerts',
            '/admin/events',
            '/admin/calendar',
            '/admin/schedule',
            '/admin/appointments',
            '/admin/bookings',
            '/admin/reservations',
            '/user-admin',
            '/admin-user',
            '/admin-panel-login',
            '/laravel-admin',
            '/symfony-admin',
            '/django-admin',
            '/rails-admin',
            '/spring-admin',
            '/node-admin',
            '/express-admin',
            '/react-admin',
            '/vue-admin',
            '/angular-admin',
            '/wordpress-admin',
            '/joomla-admin',
            '/drupal-admin',
            '/magento-admin',
            '/shopify-admin',
            '/prestashop-admin'
        ],
        "e_commerce": [
            # Shopify
            '/shopify-login', '/shopify/admin', '/admin/shopify', '/shop/admin-login',
            '/myshopify/login', '/shopify/dashboard', '/store-admin', '/shopify-admin',
            '/vendors/login', '/merchant/login', '/merchant-center', '/seller-central',
            
            # WooCommerce
            '/woocommerce/admin', '/wc-admin', '/wc-login', '/wc/v3/admin',
            '/woo/login', '/woocommerce-login', '/woo-admin', '/woocommerce/dashboard',
            '/shop/wc-admin', '/store/wc-admin', '/market/admin', '/marketplace/admin',
            
            # PrestaShop
            '/prestashop/admin', '/ps-admin', '/prestashop-admin', '/presta/backoffice',
            '/adminshop', '/ps/admin123', '/prestashop/adminpanel', '/ps/admin-login',
            '/presta/admin', '/ps-backoffice', '/prestashop/back', '/ps/back-office',
            
            # OpenCart
            '/opencart/admin', '/oc-admin', '/opencart-admin', '/oc/login',
            '/opencart/login', '/admin/opencart', '/shop/oc-admin', '/store/oc-admin',
            '/opencart/backoffice', '/oc/dashboard', '/oc-panel', '/opencart/panel',
            
            # Big Commerce
            '/bigcommerce/login', '/bc-admin', '/bigcommerce-admin', '/bc/login',
            '/bigcommerce/dashboard', '/bc/dashboard', '/bc-panel', '/bigcommerce/panel'
        ],
        
        "additional_cms": [
            # Typo3
            '/typo3', '/typo3/login', '/t3-admin', '/typo3/backend', '/typo3/index.php',
            '/typo3conf', '/typo3temp', '/typo3/install', '/t3/backend', '/typo3cms/login',
            
            # Craft CMS
            '/craft/login', '/craft-admin', '/craftcms/login', '/admin/craft',
            '/craft/dashboard', '/craft/cp', '/craftcms/admin', '/craft/control-panel',
            
            # ExpressionEngine
            '/expressionengine/login', '/ee-admin', '/ee/login', '/ee/cp',
            '/ee/dashboard', '/ee-cp', '/ee-backend', '/system/ee/login',
            
            # Concrete5/ConcreteCMS
            '/concrete/login', '/concrete5/login', '/concrete/dashboard', '/c5/login',
            '/concretecms/login', '/c5-admin', '/concrete-admin', '/c5/dashboard',
            
            # SilverStripe
            '/silverstripe/admin', '/ss-admin', '/cms/login', '/ss/login',
            '/silverstripe/dashboard', '/ss/admin', '/admin/ss', '/cms/admin',
            
            # Ghost
            '/ghost', '/ghost/login', '/ghost/admin', '/ghost/dashboard',
            '/ghost-admin', '/ghost/signin', '/ghostcms/login', '/ghost/backend',
            
            # Umbraco
            '/umbraco', '/umbraco/login', '/umbraco/backoffice', '/umbraco/dashboard',
            '/umbraco-login', '/umbraco-admin', '/umbraco/backend', '/umbraco/admin',
            
            # DotNetNuke/DNN
            '/dotnetnuke/login', '/dnn/login', '/dnn-admin', '/dnn/admin',
            '/dotnetnuke/admin', '/dnn/dashboard', '/dnn/host', '/dnn/portal',
            
            # Kentico
            '/kentico/login', '/kentico-admin', '/kentico/admin', '/kentico/dashboard',
            '/kentico-cms', '/kentico/cms', '/admin/kentico', '/k-admin'
        ],
        
        "forums_and_boards": [
            # phpBB
            '/phpbb', '/phpbb/login', '/phpbb/admin', '/forum/admin',
            '/phpbb/admincp', '/forum/admincp', '/phpbb/modcp', '/forum/modcp',
            '/phpbb/install', '/forum/ucp', '/forum/acp', '/forum/install.php',
            
            # vBulletin
            '/vbulletin/login', '/vb/login', '/vb/admincp', '/vbulletin/admincp',
            '/vb/modcp', '/vbulletin/modcp', '/vb/install', '/vbulletin/install',
            '/forum/vb/login', '/forum/admincp', '/vb/admin', '/forum/admin',
            
            # XenForo
            '/xenforo/admin', '/xf/admin', '/xf/login', '/xenforo/login',
            '/forum/xf-admin', '/xf-admin', '/xenforo-admin', '/xf/admincp',
            '/community/admin', '/community/login', '/xf/install', '/xenforo/install',
            
            # SMF
            '/smf/admin', '/smf/login', '/forum/smf-admin', '/simplemachines/admin',
            '/forum/smf/login', '/smf-admin', '/smf/install', '/forum/admin.php',
            '/community/smf', '/smf/Admin', '/forum/Admin', '/smf/AdminIndex.php',
            
            # Discourse
            '/discourse/login', '/discourse/admin', '/community/login', '/community/admin',
            '/discourse-admin', '/discourse-login', '/discuss/admin', '/forum/discourse'
        ],
        
        "file_sharing": [
            # General file sharing
            '/files/admin', '/download/admin', '/uploads/admin', '/share/admin',
            '/files/login', '/download/login', '/uploads/login', '/share/login',
            '/files/index.php', '/download/index.php', '/uploads/index.php', '/share/index.php',
            
            # OwnCloud/NextCloud
            '/owncloud/login', '/nextcloud/login', '/owncloud/admin', '/nextcloud/admin',
            '/cloud/login', '/owncloud/index.php', '/nextcloud/index.php', '/cloud/admin',
            '/owncloud/remote.php', '/nextcloud/remote.php', '/cloud/index.php', '/cloud/remote.php',
            
            # Seafile
            '/seafile/login', '/seafile/admin', '/seafile/index.php', '/sea/login',
            '/seafile/dashboard', '/sea-admin', '/seafile-admin', '/sea/admin',
            
            # FileRun
            '/filerun/login', '/filerun/admin', '/filerun/index.php', '/fr/login',
            '/filerun/dashboard', '/fr-admin', '/filerun-admin', '/fr/admin'
        ],
        
        "database_endpoints": [
            # MongoDB
            '/mongo', '/mongodb', '/mongo-express', '/mongodb-admin',
            '/mongo/login', '/mongodb/login', '/mongo-express/login', '/mongodb-admin/login',
            
            # PostgreSQL
            '/postgres', '/postgresql', '/pgadmin', '/phppgadmin',
            '/postgres/login', '/postgresql/login', '/pgadmin/login', '/phppgadmin/login',
            
            # Redis
            '/redis', '/redis-commander', '/redis-admin', '/redis-ui',
            '/redis/login', '/redis-commander/login', '/redis-admin/login', '/redis-ui/login',
            
            # Elasticsearch
            '/elastic', '/elasticsearch', '/kibana', '/elastic-hq',
            '/elastic/login', '/elasticsearch/login', '/kibana/login', '/elastic-hq/login',
            
            # Cassandra
            '/cassandra', '/cassandra-admin', '/opscenter', '/cassandra-web',
            '/cassandra/login', '/cassandra-admin/login', '/opscenter/login', '/cassandra-web/login',
            
            # CouchDB
            '/couchdb', '/couch', '/futon', '/fauxton',
            '/couchdb/login', '/couch/login', '/futon/login', '/fauxton/login'
        ],
        
        "mail_servers": [
            # Roundcube
            '/roundcube', '/roundcube/login', '/webmail/roundcube', '/mail/roundcube',
            '/roundcubemail', '/roundcubemail/login', '/rc/login', '/roundcube/index.php',
            
            # Squirrelmail
            '/squirrelmail', '/squirrelmail/login', '/webmail/squirrelmail', '/mail/squirrelmail',
            '/squirrelmail/src/login.php', '/sm/login', '/squirrel/login', '/squirrelmail/index.php',
            
            # Zimbra
            '/zimbra', '/zimbra/login', '/mail/zimbra', '/webmail/zimbra',
            '/zimbra/admin', '/zimbra-admin', '/zimbraadmin', '/zimbra/h/login',
            
            # Postfix Admin
            '/postfixadmin', '/postfix-admin', '/postfix/admin', '/mail/admin',
            '/postfixadmin/login', '/postfix-admin/login', '/postfix/login', '/mail/postfix',
            
            # Dovecot
            '/dovecot', '/dovecot/login', '/mail/dovecot', '/dovecot-admin',
            '/dovecot/admin', '/mail/dovecot-admin', '/dovecot/webmail', '/mail/dovecot/login',
            
            # Microsoft Exchange
            '/owa', '/exchange', '/mail/exchange', '/outlook',
            '/owa/login', '/exchange/login', '/outlook/login', '/exchange/admin',
            '/ecp', '/ews', '/oab', '/autodiscover',
            '/microsoft-server-activesync', '/rpc', '/mapi', '/powershell'
        ],
        
        "remote_access": [
            # SSH Web Interfaces
            '/ssh', '/webssh', '/web-ssh', '/ssh-web',
            '/ssh/login', '/webssh/login', '/web-ssh/login', '/ssh-web/login',
            
            # VNC
            '/vnc', '/webvnc', '/web-vnc', '/vnc-web',
            '/vnc/login', '/webvnc/login', '/web-vnc/login', '/vnc-web/login',
            
            # RDP
            '/rdp', '/webrdp', '/web-rdp', '/rdp-web',
            '/rdp/login', '/webrdp/login', '/web-rdp/login', '/rdp-web/login',
            
            # Telnet
            '/telnet', '/webtelnet', '/web-telnet', '/telnet-web',
            '/telnet/login', '/webtelnet/login', '/web-telnet/login', '/telnet-web/login',
            
            # TeamViewer
            '/teamviewer', '/team-viewer', '/tv-web', '/tv/login',
            '/teamviewer/login', '/team-viewer/login', '/tv-web/login', '/tv/web',
            
            # AnyDesk
            '/anydesk', '/any-desk', '/ad-web', '/ad/login',
            '/anydesk/login', '/any-desk/login', '/ad-web/login', '/ad/web'
        ],
        
        "iot_devices": [
            # IP Cameras
            '/camera', '/ipcam', '/webcam', '/cam',
            '/camera/login', '/ipcam/login', '/webcam/login', '/cam/login',
            '/camera/admin', '/ipcam/admin', '/webcam/admin', '/cam/admin',
            
            # Routers
            '/router', '/gateway', '/gw', '/modem',
            '/router/login', '/gateway/login', '/gw/login', '/modem/login',
            '/router/admin', '/gateway/admin', '/gw/admin', '/modem/admin',
            
            # Smart Home
            '/smarthome', '/smart-home', '/sh', '/home',
            '/smarthome/login', '/smart-home/login', '/sh/login', '/home/login',
            '/smarthome/admin', '/smart-home/admin', '/sh/admin', '/home/admin',
            
            # Industrial Control Systems
            '/ics', '/scada', '/plc', '/hmi',
            '/ics/login', '/scada/login', '/plc/login', '/hmi/login',
            '/ics/admin', '/scada/admin', '/plc/admin', '/hmi/admin'
        ],
        
        "devops_tools": [
            # Jenkins
            '/jenkins', '/jenkins/login', '/ci', '/ci/login',
            '/jenkins/dashboard', '/ci/dashboard', '/jenkins/admin', '/ci/admin',
            
            # GitLab
            '/gitlab', '/gitlab/login', '/git', '/git/login',
            '/gitlab/admin', '/git/admin', '/gitlab/dashboard', '/git/dashboard',
            
            # Travis CI
            '/travis', '/travis/login', '/travisci', '/travisci/login',
            '/travis/admin', '/travisci/admin', '/travis/dashboard', '/travisci/dashboard',
            
            # CircleCI
            '/circleci', '/circleci/login', '/circle', '/circle/login',
            '/circleci/admin', '/circle/admin', '/circleci/dashboard', '/circle/dashboard',
            
            # Docker
            '/docker', '/docker/login', '/portainer', '/portainer/login',
            '/docker/admin', '/portainer/admin', '/docker/dashboard', '/portainer/dashboard',
            '/swarm', '/swarm/login', '/swarm/admin', '/swarm/dashboard',
            
            # Kubernetes
            '/kubernetes', '/kubernetes/login', '/k8s', '/k8s/login',
            '/kubernetes/admin', '/k8s/admin', '/kubernetes/dashboard', '/k8s/dashboard',
            '/kube', '/kube/login', '/kube/admin', '/kube/dashboard'
        ],
        
        "web_frameworks": [
            # Django
            '/django/admin', '/admin/django', '/django-admin', '/djangoadmin',
            '/django/login', '/django/dashboard', '/django/backend', '/django/staff',
            
            # Ruby on Rails
            '/rails/admin', '/admin/rails', '/rails-admin', '/railsadmin',
            '/rails/login', '/rails/dashboard', '/rails/backend', '/rails/console',
            
            # ASP.NET
            '/aspnet/admin', '/admin/aspnet', '/aspnet-admin', '/aspnetadmin',
            '/aspnet/login', '/aspnet/dashboard', '/aspnet/backend', '/aspnet/panel',
            
            # Flask
            '/flask/admin', '/admin/flask', '/flask-admin', '/flaskadmin',
            '/flask/login', '/flask/dashboard', '/flask/backend', '/flask/panel',
            
            # Express.js
            '/express/admin', '/admin/express', '/express-admin', '/expressadmin',
            '/express/login', '/express/dashboard', '/express/backend', '/express/panel',
            
            # Spring
            '/spring/admin', '/admin/spring', '/spring-admin', '/springadmin',
            '/spring/login', '/spring/dashboard', '/spring/backend', '/spring/panel'
        ],
        
        "logs_and_debug": [
            # Log files
            '/logs', '/log', '/logs.txt', '/log.txt',
            '/access.log', '/error.log', '/debug.log', '/system.log',
            '/logs/access', '/logs/error', '/logs/debug', '/logs/system',
            '/log/access', '/log/error', '/log/debug', '/log/system',
            
            # Debug endpoints
            '/debug', '/debug/console', '/debug/panel', '/debug/info',
            '/debug/log', '/debug/status', '/debug/vars', '/debug/pprof',
            '/debug/health', '/debug/metrics', '/debug/trace', '/debug/heap',
            
            # Trace and profiling
            '/trace', '/profile', '/profiler', '/tracing',
            '/trace/console', '/profile/console', '/profiler/console', '/tracing/console',
            '/trace/dumps', '/profile/dumps', '/profiler/dumps', '/tracing/dumps'
        ],
        
        "backdoors_and_shells": [
            # PHP shells
            '/shell.php', '/c99.php', '/r57.php', '/cmd.php',
            '/webshell.php', '/backdoor.php', '/terminal.php', '/exec.php',
            '/console.php', '/system.php', '/eval.php', '/rsh.php',
            
            # JSP shells
            '/shell.jsp', '/cmd.jsp', '/webshell.jsp', '/backdoor.jsp',
            '/terminal.jsp', '/exec.jsp', '/console.jsp', '/system.jsp',
            
            # ASP shells
            '/shell.asp', '/cmd.asp', '/webshell.asp', '/backdoor.asp',
            '/terminal.asp', '/exec.asp', '/console.asp', '/system.asp',
            
            # ASPX shells
            '/shell.aspx', '/cmd.aspx', '/webshell.aspx', '/backdoor.aspx',
            '/terminal.aspx', '/exec.aspx', '/console.aspx', '/system.aspx'
        ],
        
        "injection_attempts": [
            # SQL injection
            '/page.php?id=1', '/article.php?id=1', '/product.php?id=1', '/user.php?id=1',
            '/view.php?page=1', '/index.php?cat=1', '/show.php?item=1', '/display.php?id=1',
            
            # Path traversal / LFI
            '/index.php?page=../../../etc/passwd', '/view.php?file=../../../etc/passwd',
            '/include.php?file=../../../etc/passwd', '/display.php?template=../../../etc/passwd',
            '/main.php?page=../../../etc/passwd', '/index.php?show=../../../etc/passwd',
            '/index.php?load=../../../etc/passwd', '/index.php?include=../../../etc/passwd',
            
            # RFI
            '/index.php?page=http://evil.com/shell.php', '/view.php?file=http://evil.com/shell.php',
            '/include.php?file=http://evil.com/shell.php', '/display.php?template=http://evil.com/shell.php',
            '/main.php?page=http://evil.com/shell.php', '/index.php?show=http://evil.com/shell.php',
            '/index.php?load=http://evil.com/shell.php', '/index.php?include=http://evil.com/shell.php'
        ],
        
        "mobile_endpoints": [
            # Mobile API endpoints
            '/api/mobile', '/api/v1/mobile', '/api/v2/mobile', '/api/mobile/v1',
            '/mobile/api', '/mobile/v1/api', '/mobile/v2/api', '/api/app',
            '/app/api', '/api/ios', '/api/android', '/api/mobile/ios',
            '/api/mobile/android', '/api/app/ios', '/api/app/android', '/mobile/login',
            
            # Mobile app specific endpoints
            '/app/config', '/app/settings', '/app/version', '/app/update',
            '/mobile/config', '/mobile/settings', '/mobile/version', '/mobile/update',
            '/api/app/config', '/api/app/settings', '/api/app/version', '/api/app/update'
        ],
        
        "cloud_services": [
            # AWS
            '/aws/login', '/aws/console', '/aws/admin', '/amazon/login',
            '/s3/login', '/s3/admin', '/s3/console', '/s3/bucket',
            '/ec2/login', '/ec2/admin', '/ec2/console', '/ec2/instance',
            
            # Azure
            '/azure/login', '/azure/console', '/azure/admin', '/microsoft/login',
            '/azure/portal', '/azure/dashboard', '/azure/vm', '/azure/storage',
            
            # Google Cloud
            '/gcp/login', '/gcp/console', '/gcp/admin', '/google/login',
            '/gcloud/login', '/gcloud/console', '/gcloud/admin', '/gcp/dashboard',
            
            # Digital Ocean
            '/digitalocean/login', '/do/login', '/do/admin', '/digitalocean/admin',
            '/do/console', '/digitalocean/console', '/do/dashboard', '/digitalocean/dashboard'
        ],
        
        "monitoring_tools": [
            # Nagios
            '/nagios', '/nagios/login', '/nagios/admin', '/nagios3',
            '/nagios4', '/nagios/cgi-bin', '/nagios3/cgi-bin', '/nagios4/cgi-bin',
            
            # Zabbix
            '/zabbix', '/zabbix/login', '/zabbix/admin', '/zabbix.php',
            '/zabbix/index.php', '/zabbix/dashboard.php', '/zabbix/charts.php', '/zabbix/setup.php',
            
            # Grafana
            '/grafana', '/grafana/login', '/grafana/admin', '/monitoring',
            '/grafana/dashboard', '/grafana/explore', '/grafana/plugins', '/grafana/alerting',
            
            # Prometheus
            '/prometheus', '/prometheus/login', '/prometheus/admin', '/prom',
            '/prometheus/graph', '/prometheus/alerts', '/prometheus/targets', '/prometheus/status'
        ]
    }
    
    return honeypot_routes

def register_routes_with_blueprint(blueprint, handler_function):
    """Register all honeypot routes with the given blueprint using the handler function"""
    routes = get_honeypot_routes()
    
    # Register all routes with the blueprint
    for category, paths in routes.items():
        for path in paths:
            # Register both GET and POST methods for each route
            blueprint.add_url_rule(
                path, 
                endpoint=f"honeypot_{category}_{path.replace('/', '_')}",
                view_func=handler_function,
                methods=['GET', 'POST']
            )
</file>

<file path="honeypot/backend/routes/honeypot.py">
# honeypot/backend/routes/honeypot.py
from flask import Blueprint, request, jsonify, render_template, make_response, g, current_app
from datetime import datetime, timedelta
import time
import re
import hashlib
import json
import logging
import ipaddress
import user_agents
import hmac
import secrets
from honeypot.database.mongodb import get_db
from werkzeug.local import LocalProxy

# Setup logging
logger = logging.getLogger(__name__)

# Create the blueprint
honeypot_bp = Blueprint('honeypot', __name__)

# Access the MongoDB database
db = LocalProxy(get_db)

# Default scan paths
DEFAULT_SCAN_PATHS = {
    "/admin",
    "/admin/login",
    "/wp-admin",
    "/wp-login.php",
    "/administrator",
    "/login",
    "/administrator/index.php"
}

# Cache for common scan paths
COMMON_SCAN_PATHS = DEFAULT_SCAN_PATHS.copy()

# Constants for rate limiting
HONEYPOT_RATE_LIMIT = 5  # requests per minute
HONEYPOT_RATE_PERIOD = 60  # seconds

def load_common_scan_paths():
    """Load the most common scan paths from the database"""
    global COMMON_SCAN_PATHS
    
    # Start with the default paths
    COMMON_SCAN_PATHS = DEFAULT_SCAN_PATHS.copy()
    
    try:
        # Get top 500 scanned paths from database
        pipeline = [
            {"$group": {"_id": "$path", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}},
            {"$limit": 500}
        ]
        results = list(db.scanAttempts.aggregate(pipeline))
        
        # Add database paths to our set (which already contains the defaults)
        for result in results:
            COMMON_SCAN_PATHS.add(result["_id"])
            
        logger.info(f"Loaded {len(COMMON_SCAN_PATHS)} common scan paths (including defaults) from database")
    except Exception as e:
        logger.error(f"Error loading common scan paths: {str(e)}")

# Load paths on module import
load_common_scan_paths()

def get_client_identifier():
    """
    Generate a comprehensive client identifier using multiple factors.
    This creates a more reliable identifier even if the client is trying to hide.
    """
    factors = []
    
    # Basic identifiers
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    if ip and ',' in ip:  # Handle proxy chains
        ip = ip.split(',')[0].strip()
    factors.append(ip or "unknown_ip")
    
    # Browser fingerprinting
    user_agent = request.headers.get('User-Agent', '')
    factors.append(user_agent[:100] or "unknown_agent")
    
    # Accept headers can be used for fingerprinting
    accept = request.headers.get('Accept', '')
    accept_lang = request.headers.get('Accept-Language', '')
    accept_encoding = request.headers.get('Accept-Encoding', '')
    factors.append((accept + accept_lang + accept_encoding)[:50])
    
    # Connection-specific headers
    connection = request.headers.get('Connection', '')
    factors.append(connection)
    
    # Additional headers that might be useful for fingerprinting
    additional_headers = [
        'X-Requested-With', 'DNT', 'Referer', 'Origin',
        'Sec-Fetch-Dest', 'Sec-Fetch-Mode', 'Sec-Fetch-Site', 'Sec-Fetch-User',
        'Cache-Control', 'Pragma', 'If-None-Match', 'If-Modified-Since',
    ]
    
    for header in additional_headers:
        value = request.headers.get(header, '')
        if value:
            factors.append(f"{header}:{value[:20]}")
    
    # Build and hash the combined identifier
    identifier = "|".join(factors)
    hashed_id = hashlib.sha256(identifier.encode()).hexdigest()
    
    return hashed_id

def extract_asn_from_ip(ip):
    """
    Get ASN, organization, and country information for an IP address
    using MaxMind GeoLite2 databases if available
    """
    try:
        # Skip private, local, or invalid IPs
        if not ip or ip == "unknown_ip" or ip == "127.0.0.1":
            return {"asn": "Unknown", "org": "Unknown", "country": "Unknown"}
            
        # Make sure we're working with a valid IP
        try:
            ip_obj = ipaddress.ip_address(ip)
            if ip_obj.is_private or ip_obj.is_loopback or ip_obj.is_multicast:
                return {"asn": "Private", "org": "Private Network", "country": "Unknown"}
        except ValueError:
            return {"asn": "Invalid", "org": "Invalid IP", "country": "Unknown"}
        
        # Try to use GeoIP database if available
        try:
            from honeypot.backend.helpers.geo_db_updater import get_geoip_info
            return get_geoip_info(ip)
        except ImportError:
            # Fall back to basic info if GeoIP is not available
            return {"asn": "Unknown", "org": "Unknown", "country": "Unknown"}
                
    except Exception as e:
        logger.error(f"Error extracting ASN for IP {ip}: {str(e)}")
        return {"asn": "Error", "org": "Error", "country": "Unknown"}

def detect_bot_patterns(user_agent, request_info):
    """
    Analyze request patterns to determine if it's likely a bot.
    """
    bot_indicators = []
    
    ua_lower = user_agent.lower()
    
    # Check for common bot strings in user agent
    bot_strings = [
        # Common crawlers and bots
        'bot', 'crawl', 'spider', 'scan', 'scrape',
        # Web automation tools
        'wget', 'curl', 'httr', 'httpie', 'requests', 'axios',
        # Programming language HTTP clients
        'python-requests', 'python-urllib', 'go-http', 'java-http-client', 'okhttp',
        'aiohttp', 'httpclient', 'urllib', 'apache-httpclient',
        # Security scanners and testing tools
        'nmap', 'nikto', 'burp', 'zap', 'acunetix', 'qualys', 'nessus', 'sqlmap',
        'masscan', 'dirbuster', 'gobuster', 'dirb', 'wfuzz', 'hydra',
    ]
    for bot_string in bot_strings:
        if bot_string in ua_lower:
            bot_indicators.append(f"UA contains '{bot_string}'")
    
    # Empty or very short user agents are suspicious
    if len(user_agent) < 10:
        bot_indicators.append("Short user agent")
    
    return bot_indicators if bot_indicators else None

def log_scan_attempt(path, method, params=None, data=None):
    """
    Log comprehensive details about the scan attempt to the database.
    """
    try:
        client_id = get_client_identifier()
        
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if ip and ',' in ip:
            ip = ip.split(',')[0].strip()
        
        user_agent = request.headers.get('User-Agent', '')
        
        # 1. Reverse DNS lookup for additional intelligence
        hostname = None
        try:
            import socket
            hostname = socket.gethostbyaddr(ip)[0]
        except:
            hostname = None
        
        # 2. Check for port scanning attempts
        is_port_scan = any(scan_term in path.lower() for scan_term in [
            'port', 'scan', 'nmap', 'masscan', 'shodan', 'censys'
        ])
        
        # 3. Check for common vulnerability scanners in user agent
        ua_lower = user_agent.lower() if user_agent else ""
        scanner_signs = ['nmap', 'nikto', 'sqlmap', 'acunetix', 'nessus', 
                        'zap', 'burp', 'whatweb', 'qualys', 'openvas']
        is_scanner = any(sign in ua_lower for sign in scanner_signs)
        
        # 4. Check for suspicious request parameters
        suspicious_params = False
        if params and request.args:
            param_checks = ['sleep', 'benchmark', 'exec', 'eval', 'union', 
                          'select', 'update', 'delete', 'insert', 'script']
            for param, value in request.args.items():
                if any(check in value.lower() for check in param_checks):
                    suspicious_params = True
                    break
        
        # Parse the user agent string for more details
        ua_info = {}
        try:
            if user_agent:
                parsed_ua = user_agents.parse(user_agent)
                ua_info = {
                    "browser": {
                        "family": parsed_ua.browser.family,
                        "version": parsed_ua.browser.version_string
                    },
                    "os": {
                        "family": parsed_ua.os.family,
                        "version": parsed_ua.os.version_string
                    },
                    "device": {
                        "family": parsed_ua.device.family,
                        "brand": parsed_ua.device.brand,
                        "model": parsed_ua.device.model
                    },
                    "is_mobile": parsed_ua.is_mobile,
                    "is_tablet": parsed_ua.is_tablet,
                    "is_pc": parsed_ua.is_pc,
                    "is_bot": parsed_ua.is_bot
                }
        except Exception as e:
            ua_info = {"parse_error": str(e)}
        
        # Get ASN info
        asn_info = extract_asn_from_ip(ip)
        
        # Detect if it's a likely bot
        bot_indicators = detect_bot_patterns(user_agent, {
            "path": path,
            "method": method
        })
        
        # Check if using Tor or proxy
        try:
            from honeypot.backend.helpers.proxy_detector import is_tor_or_proxy
            is_tor_or_proxy = is_tor_or_proxy(ip)
        except ImportError:
            is_tor_or_proxy = False
        
        # Extract all headers for analysis
        headers = {key: value for key, value in request.headers.items()}
        
        # Build the scan log document
        scan_log = {
            "clientId": client_id,
            "ip": ip,
            "path": path,
            "method": method,
            "timestamp": datetime.utcnow(),
            "user_agent": user_agent,
            "ua_info": ua_info,
            "asn_info": asn_info,
            "headers": headers,
            "query_params": dict(request.args) if params else None,
            "form_data": dict(request.form) if data else None,
            "json_data": request.get_json(silent=True) if data else None,
            "cookies": {key: value for key, value in request.cookies.items()},
            "is_tor_or_proxy": is_tor_or_proxy,
            "bot_indicators": bot_indicators,
            "hostname": hostname,
            "is_port_scan": is_port_scan,
            "is_scanner": is_scanner,
            "suspicious_params": suspicious_params,
            "notes": []
        }
        
        # Additional security checks
        if "X-Forwarded-For" in headers and ip != request.remote_addr:
            scan_log["notes"].append("Possible IP spoofing attempt")
        
        # Check for suspicious query parameters
        if params:
            suspicious_params = [
                # SQL injection
                'eval', 'exec', 'select', 'union', 'sleep', 'benchmark', 'waitfor', 'delay',
                'from', 'where', 'having', 'group by', 'order by', 'insert', 'update', 'delete',
                '1=1', 'true=true', '1 like 1', 'information_schema', 'sys.tables',
                # Command injection
                'cmd', 'command', 'system', 'shell', 'bash', 'powershell', 'execute',
                '|', '&', ';', '`', '$', '>', '<', 'ping', 'nc', 'ncat', 'telnet',
                # File inclusion/traversal
                'file', 'path', 'include', 'require', 'load', '../', '..\\', '/etc/passwd',
                'c:\\windows', 'boot.ini', 'win.ini', '/var/www',
            ]
            for param, value in request.args.items():
                if any(sus in value.lower() for sus in suspicious_params):
                    scan_log["notes"].append(f"Suspicious parameter: {param}")
        
        # Insert into database
        db.scanAttempts.insert_one(scan_log)
        
        # Update watchlist with this client
        severity = 1  # Base severity level
        
        # Increase severity based on certain factors
        if bot_indicators:
            severity += 1
        if is_tor_or_proxy:
            severity += 1
        if scan_log["notes"]:
            severity += len(scan_log["notes"])
        if is_port_scan:
            severity += 2
        if is_scanner:
            severity += 3
        if suspicious_params:
            severity += 2
        
        # Update the watchlist
        db.watchList.update_one(
            {"clientId": client_id},
            {
                "$set": {
                    "lastSeen": datetime.utcnow(),
                    "lastPath": path,
                    "ip": ip
                },
                "$inc": {"count": 1, "severity": severity}
            },
            upsert=True
        )
        
        # Return the client ID for potential further actions
        return client_id
        
    except Exception as e:
        logger.error(f"Error logging scan attempt: {str(e)}")
        return None

def is_rate_limited(client_id):
    """
    Check if the client has exceeded the honeypot rate limit.
    Much stricter than normal rate limits.
    """
    now = datetime.utcnow()
    cutoff = now - timedelta(seconds=HONEYPOT_RATE_PERIOD)
    
    # Count recent requests from this client to honeypot endpoints
    count = db.scanAttempts.count_documents({
        "clientId": client_id,
        "timestamp": {"$gte": cutoff}
    })
    
    return count >= HONEYPOT_RATE_LIMIT

def get_threat_score(client_id):
    """
    Calculate a threat score for this client based on past behavior.
    Higher score = more suspicious.
    """
    # Get client history
    client = db.watchList.find_one({"clientId": client_id})
    if not client:
        return 0
    
    # Base score
    score = 0
    
    # Number of scan attempts
    count = client.get("count", 0)
    if count > 1:
        score += min(count * 5, 50)  # Max 50 points from count
    
    # Severity from past scans
    severity = client.get("severity", 0)
    score += min(severity * 2, 30)  # Max 30 points from severity
    
    # Recent activity (within last hour)
    cutoff = datetime.utcnow() - timedelta(hours=1)
    recent_count = db.scanAttempts.count_documents({
        "clientId": client_id,
        "timestamp": {"$gte": cutoff}
    })
    score += min(recent_count * 2, 20)  # Max 20 points from recent activity
    
    return min(score, 100)  # Cap at 100

def handle_high_threat(client_id, threat_score):
    """
    Take action based on threat score. 
    This could include adding to a block list, triggering alerts, etc.
    """
    if threat_score >= 80:
        # Very high threat - add to blocklist
        db.securityBlocklist.update_one(
            {"clientId": client_id},
            {
                "$set": {
                    "blockUntil": datetime.utcnow() + timedelta(days=7),
                    "reason": "Excessive scanning activity",
                    "threatScore": threat_score,
                    "updatedAt": datetime.utcnow()
                }
            },
            upsert=True
        )
    elif threat_score >= 50:
        # Medium-high threat - temporary block
        db.securityBlocklist.update_one(
            {"clientId": client_id},
            {
                "$set": {
                    "blockUntil": datetime.utcnow() + timedelta(hours=24),
                    "reason": "Suspicious scanning activity",
                    "threatScore": threat_score,
                    "updatedAt": datetime.utcnow()
                }
            },
            upsert=True
        )

@honeypot_bp.route('/handler', methods=['GET', 'POST'])
def honeypot_handler():
    """
    Centralized handler for all honeypot routes. 
    Logs the attempt and returns appropriate fake response.
    """
    path = request.path
    method = request.method
    
    # Log this scan attempt
    client_id = log_scan_attempt(
        path, 
        method, 
        params=(request.method == 'GET'), 
        data=(request.method == 'POST')
    )
    
    # Check if this client is rate limited
    if client_id and is_rate_limited(client_id):
        # Calculate threat score for this client
        threat_score = get_threat_score(client_id)
        
        # Handle high-threat clients
        if threat_score >= 50:
            handle_high_threat(client_id, threat_score)
            
            # For very high threats, we might want to return a different response
            if threat_score >= 90:
                resp = make_response("403 Forbidden", 403)
                resp.headers['Server'] = 'Apache/2.4.41 (Ubuntu)'
                return resp
    
    # Return a fake but convincing response
    resp = make_response(render_template('honeypot/generic-login.html'))
    
    # Add some realistic headers
    resp.headers['Server'] = 'Apache/2.4.41 (Ubuntu)'
    resp.headers['X-Powered-By'] = 'PHP/7.4.3'
    
    return resp

@honeypot_bp.route('/analytics', methods=['GET'])
def honeypot_analytics():
    """Return analytics about honeypot activity"""
    try:
        total_attempts = db.scanAttempts.count_documents({})
        unique_ips = len(db.scanAttempts.distinct("ip"))
        unique_clients = len(db.scanAttempts.distinct("clientId"))
        
        top_paths_pipeline = [
            {"$group": {"_id": "$path", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}},
            {"$limit": 10}
        ]
        top_paths = list(db.scanAttempts.aggregate(top_paths_pipeline))
        
        top_ips_pipeline = [
            {"$group": {"_id": "$ip", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}},
            {"$limit": 10}
        ]
        top_ips = list(db.scanAttempts.aggregate(top_ips_pipeline))
        
        recent_activity = list(db.scanAttempts.find()
                              .sort("timestamp", -1)
                              .limit(20))
        
        # Format data for JSON serialization
        for activity in recent_activity:
            activity["_id"] = str(activity["_id"])
            activity["timestamp"] = activity["timestamp"].isoformat()
        
        return jsonify({
            "total_attempts": total_attempts,
            "unique_ips": unique_ips,
            "unique_clients": unique_clients,
            "top_paths": top_paths,
            "top_ips": top_ips,
            "recent_activity": recent_activity
        }), 200
    except Exception as e:
        logger.error(f"Error in honeypot analytics: {str(e)}")
        return jsonify({
            "total_attempts": 0,
            "unique_ips": 0,
            "unique_clients": 0,
            "top_paths": [],
            "top_ips": [],
            "recent_activity": []
        }), 200

@honeypot_bp.route('/log-interaction', methods=['POST'])
def log_interaction():
    """Endpoint for logging client-side interactions via AJAX"""
    if not request.is_json:
        return jsonify({"status": "error", "message": "Expected JSON data"}), 400
        
    data = request.get_json()
    page_type = data.get('page_type', 'unknown')
    interaction_type = data.get('interaction_type', 'unknown')
    additional_data = data.get('additional_data', {})
    
    # Create log entry
    log_entry = {
        "page_type": page_type,
        "interaction_type": interaction_type,
        "timestamp": datetime.utcnow(),
        "ip_address": request.remote_addr,
        "user_agent": request.headers.get('User-Agent', 'Unknown'),
        "path": request.path,
        "http_method": request.method,
        "additional_data": additional_data
    }
    
    # Insert into database
    result = db.honeypot_interactions.insert_one(log_entry)
    
    return jsonify({
        "status": "success", 
        "interaction_id": str(result.inserted_id)
    })

@honeypot_bp.route('/interactions', methods=['GET'])
def get_interactions():
    """Get honeypot interactions with filtering and pagination"""
    try:
        # Get pagination params
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 20))
        skip = (page - 1) * limit
        
        # Get filter params
        page_type = request.args.get('page_type')
        interaction_type = request.args.get('interaction_type')
        ip_filter = request.args.get('ip')
        date_from = request.args.get('date_from')
        date_to = request.args.get('date_to')
        search_term = request.args.get('search')
        
        # Build query
        query = {}
        
        # Apply filters
        if page_type and page_type != 'all':
            query['page_type'] = page_type
            
        if interaction_type and interaction_type != 'all':
            query['interaction_type'] = interaction_type
            
        if ip_filter:
            query['ip_address'] = {"$regex": ip_filter, "$options": "i"}
            
        # Date range filter
        if date_from or date_to:
            query['timestamp'] = {}
            if date_from:
                try:
                    from_date = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
                    query['timestamp']["$gte"] = from_date
                except:
                    pass
                    
            if date_to:
                try:
                    to_date = datetime.fromisoformat(date_to.replace('Z', '+00:00'))
                    query['timestamp']["$lte"] = to_date
                except:
                    pass
        
        # Full text search across multiple fields
        if search_term:
            search_regex = {"$regex": search_term, "$options": "i"}
            query["$or"] = [
                {"page_type": search_regex},
                {"interaction_type": search_regex},
                {"ip_address": search_regex},
                {"additional_data.username": search_regex},
                {"additional_data.message": search_regex},
                {"additional_data.input": search_regex},
                {"additional_data.form_data": search_regex}
            ]
        
        # Get total count for pagination
        total_count = db.honeypot_interactions.count_documents(query)
        
        # Get interactions with pagination
        interactions = list(db.honeypot_interactions.find(query)
                          .sort("timestamp", -1)
                          .skip(skip)
                          .limit(limit))
        
        # Format for JSON
        for interaction in interactions:
            interaction['_id'] = str(interaction['_id'])
            if isinstance(interaction.get('timestamp'), datetime):
                interaction['timestamp'] = interaction['timestamp'].isoformat()
            
        # Get unique page types and interaction types for filters
        page_types = db.honeypot_interactions.distinct("page_type")
        interaction_types = db.honeypot_interactions.distinct("interaction_type")
        
        return jsonify({
            "interactions": interactions,
            "total": total_count,
            "page": page,
            "limit": limit,
            "page_types": page_types,
            "interaction_types": interaction_types
        }), 200
        
    except Exception as e:
        logger.error(f"Error getting honeypot interactions: {str(e)}")
        return jsonify({"error": str(e)}), 500

@honeypot_bp.route('/interactions/<interaction_id>', methods=['GET'])
def get_interaction_details(interaction_id):
    """Get detailed information about a specific honeypot interaction"""
    try:
        from bson.objectid import ObjectId
        
        # Find the interaction by ID
        interaction = db.honeypot_interactions.find_one({"_id": ObjectId(interaction_id)})
        
        if not interaction:
            return jsonify({"error": "Interaction not found"}), 404
            
        # Convert ObjectId to string for JSON serialization
        interaction["_id"] = str(interaction["_id"])
        
        # Make timestamp JSON serializable if it's a datetime
        if isinstance(interaction.get("timestamp"), datetime):
            interaction["timestamp"] = interaction["timestamp"].isoformat()
            
        # Add human-readable explanations
        interaction["explanations"] = {
            "summary": f"This is a record of a user interacting with the {interaction.get('page_type', 'unknown')} honeypot page.",
            "interaction_type": get_interaction_explanation(interaction.get("interaction_type", "")),
            "page_type": get_page_type_explanation(interaction.get("page_type", "")),
            "risk_level": get_risk_level(interaction),
            "technical_details": "The data shows the exact interaction the visitor made with your honeypot system.",
            "suspicious_factors": get_suspicious_factors(interaction)
        }
        
        # Enrich with GeoIP data if not already present
        if interaction.get('ip_address') and not interaction.get('geoInfo'):
            interaction['geoInfo'] = extract_asn_from_ip(interaction['ip_address'])
        
        return jsonify(interaction), 200
        
    except Exception as e:
        logger.error(f"Error getting interaction details: {str(e)}")
        return jsonify({"error": str(e)}), 500

# Helper functions for human-readable explanations
def get_interaction_explanation(interaction_type):
    """Return a human-readable explanation of the interaction type"""
    explanations = {
        "page_view": "The visitor viewed this honeypot page, showing interest in this resource.",
        "login_attempt": "The visitor attempted to log in with credentials, trying to gain unauthorized access.",
        "form_submit": "The visitor submitted form data, potentially revealing their intentions.",
        "button_click": "The visitor clicked on a button, showing deeper engagement with the honeypot.",
        "download_attempt": "The visitor tried to download a file, which could indicate data exfiltration intent.",
        "sql_injection_attempt": "The visitor attempted to inject SQL code, a clear attack vector.",
        "captcha_attempt": "The visitor attempted to solve a CAPTCHA challenge.",
        "terminal_command": "The visitor entered commands in a fake terminal, showing technical sophistication.",
        "chat_message": "The visitor sent messages in a fake chat interface."
    }
    
    return explanations.get(interaction_type, f"Unknown interaction type: {interaction_type}")

def get_page_type_explanation(page_type):
    """Return a human-readable explanation of the page type"""
    explanations = {
        "admin_dashboard": "A fake admin dashboard that attracts attackers looking for privileged access.",
        "login_portal": "A fake login page designed to attract unauthorized access attempts.",
        "system_verify": "A fake system verification page that appears to offer privileged access.",
        "synergy_portal_login": "A fake enterprise portal login that attracts credential harvesting attempts.",
        "wp-admin": "A fake WordPress admin page that attracts attackers looking for vulnerable WordPress sites.",
        "phpmyadmin": "A fake database administration tool page that attracts attackers looking for database access.",
        "cpanel": "A fake hosting control panel that attracts attackers looking for website hosting access."
    }
    
    return explanations.get(page_type, f"Honeypot page type: {page_type}")

def get_risk_level(interaction):
    """Determine risk level based on interaction characteristics"""
    risk = "Low"
    reasons = []
    
    # Higher risk interaction types
    high_risk_types = ["sql_injection_attempt", "terminal_command", "download_attempt"]
    medium_risk_types = ["login_attempt", "form_submit"]
    
    interaction_type = interaction.get("interaction_type", "")
    
    if interaction_type in high_risk_types:
        risk = "High"
        reasons.append(f"{interaction_type} is a high-risk interaction type")
    elif interaction_type in medium_risk_types:
        risk = "Medium"
        reasons.append(f"{interaction_type} is a medium-risk interaction type")
    
    # Check additional data for suspicious content
    additional_data = interaction.get("additional_data", {})
    
    # SQL injection patterns
    sql_patterns = ["'", "\"", ";", "--", "/*", "*/", "=", " OR ", " AND ", 
                   "SELECT ", "INSERT ", "UPDATE ", "DELETE ", "DROP ", "UNION "]
    
    for field in ["username", "password", "message", "input", "command"]:
        if field in additional_data:
            value = str(additional_data[field]).lower()
            for pattern in sql_patterns:
                if pattern.lower() in value:
                    risk = "High"
                    reasons.append(f"SQL injection pattern ({pattern}) found in {field}")
                    break
    
    # Check for credential harvesting
    if interaction_type == "login_attempt" and "username" in additional_data and "password" in additional_data:
        risk = max(risk, "Medium")
        reasons.append("Credential harvesting attempt detected")
    
    # Check browser information if present
    browser_info = additional_data.get("browser_info", {})
    user_agent = browser_info.get("userAgent", "").lower()
    
    # Potential automated tool indicators
    tool_patterns = ["curl", "wget", "python", "bot", "spider", "crawl", "scan"]
    for pattern in tool_patterns:
        if pattern in user_agent:
            risk = max(risk, "Medium")
            reasons.append(f"Potential automated tool detected in user agent ({pattern})")
            break
    
    return {"level": risk, "reasons": reasons}

def get_suspicious_factors(interaction):
    """Analyze the interaction for suspicious factors and return human-readable explanations"""
    factors = []
    
    # Check for Tor/proxy usage
    if interaction.get("is_tor_or_proxy"):
        factors.append("This visitor appears to be using Tor or a proxy service, which might indicate they're trying to hide their identity.")
    
    # Check for known bot patterns
    if interaction.get("bot_indicators") and len(interaction.get("bot_indicators", [])) > 0:
        factors.append("This visitor shows signs of being an automated tool or bot rather than a real person.")
    
    # Check for scanner signatures
    if interaction.get("is_scanner"):
        factors.append("This visitor appears to be using a vulnerability scanner tool, which is commonly used by attackers.")
    
    # Check for port scanning
    if interaction.get("is_port_scan"):
        factors.append("This visitor seems to be scanning your server for open ports, which is often a first step in an attack.")
    
    # Check for suspicious query parameters
    if interaction.get("suspicious_params"):
        factors.append("This visitor is using suspicious parameters that might indicate an attempt to exploit vulnerabilities.")
    
    return factors if factors else ["No obviously suspicious behavior detected."]
</file>

<file path="honeypot/backend/app.py">
# honeypot/backend/app.py
from flask import Flask
from flask_cors import CORS
from flask_session import Session
from werkzeug.middleware.proxy_fix import ProxyFix
import os
import redis
from honeypot.config.settings import get_config
from honeypot.database.mongodb import init_app as init_db

def create_app(config=None):
    """
    Create and configure the Flask application for honeypot functionality
    
    Args:
        config (dict, optional): Configuration dictionary to override defaults
        
    Returns:
        Flask: Configured Flask application
    """
    app = Flask(__name__)
    
    # Get configuration
    app_config = get_config()
    
    # Apply default configuration
    app.config.update(
        SECRET_KEY=app_config.SECRET_KEY,
        SESSION_TYPE='redis',
        SESSION_PERMANENT=True,
        SESSION_USE_SIGNER=True,
        SESSION_KEY_PREFIX='honeypot_session:',
        SESSION_REDIS=redis.StrictRedis(
            host=app_config.REDIS_HOST,
            port=app_config.REDIS_PORT,
            db=app_config.REDIS_DB,
            password=app_config.REDIS_PASSWORD
        ),
        SESSION_COOKIE_HTTPONLY=True,
        SESSION_COOKIE_SECURE=not app_config.DEBUG,
        JSON_SORT_KEYS=False,
        PROPAGATE_EXCEPTIONS=True,
        PRESERVE_CONTEXT_ON_EXCEPTION=False,
        HONEYPOT_RATE_LIMIT=app_config.HONEYPOT_RATE_LIMIT,
        HONEYPOT_RATE_PERIOD=app_config.HONEYPOT_RATE_PERIOD
    )
    
    # Apply custom configuration if provided
    if config:
        app.config.update(config)
    

    CORS(app, supports_credentials=True)
    

    Session(app)
    init_db(app)
    

    app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1)
    
    # Register blueprints
    from honeypot.backend.routes.honeypot import honeypot_bp
    from honeypot.backend.routes.honeypot_pages import honeypot_pages_bp
    from honeypot.backend.routes.honeypot_routes import register_routes_with_blueprint
    
    app.register_blueprint(honeypot_bp, url_prefix='/honeypot')
    app.register_blueprint(honeypot_pages_bp)
    

    register_routes_with_blueprint(
        blueprint=honeypot_pages_bp,
        handler_function=honeypot_bp.view_functions['honeypot_handler']
    )
    
    # Context processor for CSRF token
    from honeypot.backend.middleware.csrf_protection import generate_csrf_token
    
    @app.context_processor
    def inject_csrf_token():
        return {'csrf_token': generate_csrf_token()}
    
    # Basic health check endpoint
    @app.route('/health')
    def health_check():
        return 'Honeypot is running'
    
    return app
</file>

<file path="pyproject.toml">
[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "honeypot-framework"
description = "A comprehensive honeypot framework with admin dashboard"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
dynamic = ["version"]
dependencies = [
    "flask>=2.0.0",
    "flask-cors>=3.0.0",
    "flask-session>=0.4.0",
    "redis>=4.0.0",
    "pymongo>=4.0.0",
    "geoip2>=4.0.0",
    "python-dotenv>=0.19.0",
    "bcrypt>=3.2.0",
    "user-agents>=2.0.0",
    "python-socketio>=5.0.0",
    "gevent>=21.0.0"
    "gunicorn>=20.0.0",  
    "werkzeug>=2.0.0",   
    "ipaddress>=1.0.0",  
    "requests>=2.0.0",  
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "flake8>=4.0.0",
    "black>=22.0.0"
]

[tool.setuptools]
packages = ["flask-honeypot"]

[tool.setuptools_scm]
</file>

</files>
