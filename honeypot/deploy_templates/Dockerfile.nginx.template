# Dockerfile.nginx template generated by honeypot-deploy init
# Multi-stage build: Build frontend, then copy to final Nginx image

# --- Stage 1: Build Frontend ---

FROM node:18-alpine as frontend-builder
WORKDIR /app

# Copy only necessary files first for caching

COPY honeypot/frontend/package.json honeypot/frontend/package-lock.json* ./
RUN npm ci --only=production --ignore-scripts

# Copy the rest of the frontend source

COPY honeypot/frontend/ ./

# Set API URL 

ARG REACT_APP_API_URL=/api
ENV REACT_APP_API_URL=$REACT_APP_API_URL

# Build the production assets

RUN npm run build

# --- Stage 2: Final Nginx Image ---

FROM nginx:1.25-alpine # Use specific alpine version

# Remove default Nginx welcome page & config

RUN rm -rf /usr/share/nginx/html/* /etc/nginx/conf.d/default.conf

# Copy your custom Nginx config files (nginx.conf, sites-enabled/*)
# These paths are relative to the build context (repo root)

# The files copied here are the ones generated by honeypot-deploy init

COPY nginx/nginx.conf /etc/nginx/nginx.conf
COPY nginx/sites-enabled/ /etc/nginx/sites-enabled/

# Copy the built frontend static files from the builder stage

COPY --from=frontend-builder /app/build /usr/share/nginx/html/frontend

# Create log directory expected by default nginx.conf

RUN mkdir -p /var/log/nginx && \
    touch /var/log/nginx/access.log /var/log/nginx/error.log && \
    chown -R nginx:nginx /var/log/nginx /var/cache/nginx /var/run /etc/nginx && \
    chmod -R 755 /var/log/nginx /var/cache/nginx /var/run # Ensure permissions

# Expose port (standard HTTP)

EXPOSE 80

# Start Nginx in the foreground

CMD ["nginx", "-g", "daemon off;"]
