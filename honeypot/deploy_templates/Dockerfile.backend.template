# Dockerfile.backend template generated by honeypot-deploy init

FROM python:3.11-slim

WORKDIR /app

# Set non-interactive frontend for apt-get

ENV DEBIAN_FRONTEND=noninteractive

# Install necessary OS packages and build tools

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libffi-dev \
    gcc \
    curl \
    # Add any other OS deps your backend needs (e.g., libmaxminddb-dev if needed)
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create and activate virtual environment

RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Upgrade pip in venv

RUN pip install --no-cache-dir --upgrade pip

# Copy dependency definition files first for caching

COPY pyproject.toml setup.py MANIFEST.in ./


# Install Python dependencies into the virtual environment
# Use pyproject.toml as the source of truth
# The '-e' flag is NOT typically used here if we copy the source next.
# Install dependencies first, then copy source.

RUN pip install --no-cache-dir .

# Copy the application source code

COPY honeypot ./honeypot/

# Create data/log directories expected by the application

RUN mkdir -p /app/data/geoip_db /app/data/proxy_cache /app/logs

# Expose the port Gunicorn will run on

EXPOSE 5000

# Set user (optional)
# RUN useradd --create-home appuser
# USER appuser
# WORKDIR /home/appuser/app # If using non-root user

# Set default command to run the application with Gunicorn

CMD ["gunicorn", \
    "-k", "gevent", \
    "--workers", "4", \
    "--bind", "0.0.0.0:5000", \
    "--timeout", "120", \
    "--log-level", "info", \
    "honeypot.backend.app:create_app()"] # Reference the app factory
