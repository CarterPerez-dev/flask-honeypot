# docker-compose.yml template generated by honeypot-deploy init

version: '3.8'

services:
  nginx: # Main reverse proxy AND frontend server
    build:
      context: .
      dockerfile: Dockerfile.nginx # Uses the multi-stage Dockerfile
    container_name: honeypot_nginx_main
    ports:
      - "80:80" # Expose port 80 (add 443 if setting up SSL)
    volumes:
      - ./nginx/logs:/var/log/nginx # Mount generated nginx log dir
      # Add volume for SSL certs if using HTTPS:
      # - ./path/to/certs:/etc/nginx/certs:ro
    depends_on:
      - backend
    networks:
      - honeypot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"] 
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: . 
      dockerfile: Dockerfile.backend 
    container_name: honeypot_backend
    volumes:
      # Use named volumes for persistent data
      - honeypot_data:/app/data
      - honeypot_logs:/app/logs
    environment:
      # Loaded from .env file by default
      - FLASK_ENV=${FLASK_ENV:-production}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/honeypot?authSource=admin
      - SECRET_KEY=${SECRET_KEY}
      - HONEYPOT_ADMIN_PASSWORD=${HONEYPOT_ADMIN_PASSWORD}
    depends_on:
      - redis
      - mongodb
    networks:
      - honeypot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine 
    container_name: honeypot_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - honeypot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:6 
    container_name: honeypot_mongodb
    environment:
      # Set root user/pass used for initial DB setup and auth
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      # Optional: Mount init scripts if needed
      # - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - honeypot_network
    restart: unless-stopped
    healthcheck:
      test: >
        mongosh --host localhost:27017 --authenticationDatabase admin -u ${MONGO_USER} -p ${MONGO_PASSWORD} --quiet --eval "db.adminCommand('ping')"
      interval: 30s
      timeout: 10s
      retries: 5 # Give mongo more retries as it can take longer to start

networks:
  honeypot_network:
    driver: bridge

volumes:
  honeypot_data: # Backend data (geoip, proxy cache)
    driver: local
  honeypot_logs: # Backend logs
    driver: local
  redis_data: # Redis persistence
  mongodb_data: # MongoDB data files
